#![allow(non_camel_case_types, non_snake_case, unused, non_upper_case_globals)]

use winapi::{ENUM, RIDL, STRUCT};
use winapi::shared::guiddef::GUID;
use winapi::shared::minwindef::UINT;
use winapi::shared::winerror::HRESULT;
use winapi::shared::wtypes::{BSTR, VARIANT_BOOL};
use winapi::um::oaidl::{IDispatch, IDispatchVtbl, LPDISPATCH, VARIANT, SAFEARRAY};
use winapi::um::unknwnbase::{IUnknown, IUnknownVtbl, LPUNKNOWN};

RIDL!{#[uuid(0xdf6d6666, 0x2994, 0x4be3, 0x99, 0xbd, 0x88, 0x52, 0xef, 0x10, 0x53, 0x29)]
interface cAreaElm(cAreaElmVtbl): IDispatch(IDispatchVtbl) {
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadTemperature(
        Name: BSTR,
        NumberItems: *mut i32,
        AreaName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        Value: *mut SAFEARRAY,
        PatternName: *mut SAFEARRAY,
        ItemTypeElm: eItemTypeElm,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadUniform(
        Name: BSTR,
        NumberItems: *mut i32,
        AreaName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Dir: *mut SAFEARRAY,
        Value: *mut SAFEARRAY,
        ItemTypeElm: eItemTypeElm,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLocalAxes(
        Name: BSTR,
        Ang: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMaterialOverwrite(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetObj(
        Name: BSTR,
        Obj: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOffsets(
        Name: BSTR,
        OffsetType: *mut i32,
        OffsetPattern: *mut BSTR,
        OffsetPatternSF: *mut f64,
        Offset: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPoints(
        Name: BSTR,
        NumberPoints: *mut i32,
        Point: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetProperty(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetThickness(
        Name: BSTR,
        ThicknessType: *mut i32,
        ThicknessPattern: *mut BSTR,
        ThicknessPatternSF: *mut f64,
        Thickness: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTransformationMatrix(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x4dc0241a, 0xe192, 0x47c3, 0x8d, 0x65, 0x70, 0xea, 0xa4, 0xe3, 0xe2, 0xf5)]
interface cLineElm(cLineElmVtbl): IDispatch(IDispatchVtbl) {
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetEndLengthOffset(
        Name: BSTR,
        Length1: *mut f64,
        Length2: *mut f64,
        RZ: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetInsertionPoint(
        Name: BSTR,
        Offset1: *mut SAFEARRAY,
        Offset2: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadDistributed(
        Name: BSTR,
        NumberItems: *mut i32,
        LineName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Dir: *mut SAFEARRAY,
        RD1: *mut SAFEARRAY,
        RD2: *mut SAFEARRAY,
        Dist1: *mut SAFEARRAY,
        Dist2: *mut SAFEARRAY,
        Val1: *mut SAFEARRAY,
        Val2: *mut SAFEARRAY,
        ItemTypeElm: eItemTypeElm,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadPoint(
        Name: BSTR,
        NumberItems: *mut i32,
        LineName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Dir: *mut SAFEARRAY,
        RelDist: *mut SAFEARRAY,
        Dist: *mut SAFEARRAY,
        Val: *mut SAFEARRAY,
        ItemTypeElm: eItemTypeElm,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadTemperature(
        Name: BSTR,
        NumberItems: *mut i32,
        LineName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        Val: *mut SAFEARRAY,
        PatternName: *mut SAFEARRAY,
        ItemTypeElm: eItemTypeElm,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLocalAxes(
        Name: BSTR,
        Ang: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMaterialOverwrite(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetObj(
        Name: BSTR,
        Obj: *mut BSTR,
        ObjType: *mut i32,
        RDI: *mut f64,
        RDJ: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPoints(
        Name: BSTR,
        Point1: *mut BSTR,
        Point2: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetProperty(
        Name: BSTR,
        PropName: *mut BSTR,
        ObjType: *mut i32,
        Var: *mut VARIANT_BOOL,
        SVarRelStartLoc: *mut f64,
        SVarTotalLength: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetReleases(
        Name: BSTR,
        II: *mut SAFEARRAY,
        JJ: *mut SAFEARRAY,
        StartValue: *mut SAFEARRAY,
        EndValue: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTCLimits(
        Name: BSTR,
        LimitCompressionExists: *mut VARIANT_BOOL,
        LimitCompression: *mut f64,
        LimitTensionExists: *mut VARIANT_BOOL,
        LimitTension: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTransformationMatrix(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x8df99c3e, 0xd5dd, 0x4a5a, 0x84, 0xec, 0x53, 0xb7, 0xfd, 0xef, 0xb0, 0xce)]
interface cLinkElm(cLinkElmVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0x6b5b5603, 0xd340, 0x44d5, 0x96, 0xa4, 0x4b, 0x90, 0x28, 0xf6, 0x73, 0xf3)]
interface cPointElm(cPointElmVtbl): IDispatch(IDispatchVtbl) {
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountConstraint(
        Count: *mut i32,
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountLoadDispl(
        Count: *mut i32,
        Name: BSTR,
        LoadPat: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountLoadForce(
        Count: *mut i32,
        Name: BSTR,
        LoadPat: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountRestraint(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountSpring(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConnectivity(
        Name: BSTR,
        NumberItems: *mut i32,
        ObjectType: *mut SAFEARRAY,
        ObjectName: *mut SAFEARRAY,
        PointNumber: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConstraint(
        Name: BSTR,
        NumberItems: *mut i32,
        PointName: *mut SAFEARRAY,
        ConstraintName: *mut SAFEARRAY,
        ItemTypeElm: eItemTypeElm,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCoordCartesian(
        Name: BSTR,
        X: *mut f64,
        Y: *mut f64,
        Z: *mut f64,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadDispl(
        Name: BSTR,
        NumberItems: *mut i32,
        PointName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        LcStep: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        ItemTypeElm: eItemTypeElm,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadForce(
        Name: BSTR,
        NumberItems: *mut i32,
        PointName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        LcStep: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        F1: *mut SAFEARRAY,
        F2: *mut SAFEARRAY,
        F3: *mut SAFEARRAY,
        M1: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        ItemTypeElm: eItemTypeElm,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLocalAxes(
        Name: BSTR,
        A: *mut f64,
        B: *mut f64,
        C: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetObj(
        Name: BSTR,
        Obj: *mut BSTR,
        ObjType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPatternValue(
        Name: BSTR,
        PatternName: BSTR,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRestraint(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpring(
        Name: BSTR,
        K: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpringCoupled(
        Name: BSTR,
        K: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTransformationMatrix(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn IsSpringCoupled(
        Name: BSTR,
        IsCoupled: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x7603bf75, 0x2a18, 0x421b, 0x86, 0x60, 0x8b, 0x4d, 0x26, 0x95, 0xc4, 0xac)]
interface cAnalysisResults(cAnalysisResultsVtbl): IDispatch(IDispatchVtbl) {
    fn AreaForceShell(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        F11: *mut SAFEARRAY,
        F22: *mut SAFEARRAY,
        F12: *mut SAFEARRAY,
        FMax: *mut SAFEARRAY,
        FMin: *mut SAFEARRAY,
        FAngle: *mut SAFEARRAY,
        FVM: *mut SAFEARRAY,
        M11: *mut SAFEARRAY,
        M22: *mut SAFEARRAY,
        M12: *mut SAFEARRAY,
        MMax: *mut SAFEARRAY,
        MMin: *mut SAFEARRAY,
        MAngle: *mut SAFEARRAY,
        V13: *mut SAFEARRAY,
        V23: *mut SAFEARRAY,
        VMax: *mut SAFEARRAY,
        VAngle: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AreaJointForceShell(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        F1: *mut SAFEARRAY,
        F2: *mut SAFEARRAY,
        F3: *mut SAFEARRAY,
        M1: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AreaStressShell(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        S11Top: *mut SAFEARRAY,
        S22Top: *mut SAFEARRAY,
        S12Top: *mut SAFEARRAY,
        SMaxTop: *mut SAFEARRAY,
        SMinTop: *mut SAFEARRAY,
        SAngleTop: *mut SAFEARRAY,
        SVMTop: *mut SAFEARRAY,
        S11Bot: *mut SAFEARRAY,
        S22Bot: *mut SAFEARRAY,
        S12Bot: *mut SAFEARRAY,
        SMaxBot: *mut SAFEARRAY,
        SMinBot: *mut SAFEARRAY,
        SAngleBot: *mut SAFEARRAY,
        SVMBot: *mut SAFEARRAY,
        S13Avg: *mut SAFEARRAY,
        S23Avg: *mut SAFEARRAY,
        SMaxAvg: *mut SAFEARRAY,
        SAngleAvg: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AreaStressShellLayered(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        Layer: *mut SAFEARRAY,
        IntPtNum: *mut SAFEARRAY,
        IntPtLoc: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        S11: *mut SAFEARRAY,
        S22: *mut SAFEARRAY,
        S12: *mut SAFEARRAY,
        SMax: *mut SAFEARRAY,
        SMin: *mut SAFEARRAY,
        SAngle: *mut SAFEARRAY,
        SVM: *mut SAFEARRAY,
        S13Avg: *mut SAFEARRAY,
        S23Avg: *mut SAFEARRAY,
        SMaxAvg: *mut SAFEARRAY,
        SAngleAvg: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AssembledJointMass(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        PointElm: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn BaseReact(
        NumberResults: *mut i32,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        FX: *mut SAFEARRAY,
        FY: *mut SAFEARRAY,
        FZ: *mut SAFEARRAY,
        MX: *mut SAFEARRAY,
        ParamMy: *mut SAFEARRAY,
        MZ: *mut SAFEARRAY,
        GX: *mut f64,
        GY: *mut f64,
        GZ: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn BaseReactWithCentroid(
        NumberResults: *mut i32,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        FX: *mut SAFEARRAY,
        FY: *mut SAFEARRAY,
        FZ: *mut SAFEARRAY,
        MX: *mut SAFEARRAY,
        ParamMy: *mut SAFEARRAY,
        MZ: *mut SAFEARRAY,
        GX: *mut f64,
        GY: *mut f64,
        GZ: *mut f64,
        XCentroidForFX: *mut SAFEARRAY,
        YCentroidForFX: *mut SAFEARRAY,
        ZCentroidForFX: *mut SAFEARRAY,
        XCentroidForFY: *mut SAFEARRAY,
        YCentroidForFY: *mut SAFEARRAY,
        ZCentroidForFY: *mut SAFEARRAY,
        XCentroidForFZ: *mut SAFEARRAY,
        YCentroidForFZ: *mut SAFEARRAY,
        ZCentroidForFZ: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn BucklingFactor(
        NumberResults: *mut i32,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        Factor: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn FrameForce(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        ObjSta: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        ElmSta: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn FrameJointForce(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        F1: *mut SAFEARRAY,
        F2: *mut SAFEARRAY,
        F3: *mut SAFEARRAY,
        M1: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GeneralizedDispl(
        Name: BSTR,
        NumberResults: *mut i32,
        GD: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        DType: *mut SAFEARRAY,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn JointAcc(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn JointAccAbs(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn JointDispl(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn JointDisplAbs(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn JointReact(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        F1: *mut SAFEARRAY,
        F2: *mut SAFEARRAY,
        F3: *mut SAFEARRAY,
        M1: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn JointVel(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn JointVelAbs(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn LinkDeformation(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn LinkForce(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn LinkJointForce(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        F1: *mut SAFEARRAY,
        F2: *mut SAFEARRAY,
        F3: *mut SAFEARRAY,
        M1: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ModalLoadParticipationRatios(
        NumberResults: *mut i32,
        LoadCase: *mut SAFEARRAY,
        ItemType: *mut SAFEARRAY,
        Item: *mut SAFEARRAY,
        Stat: *mut SAFEARRAY,
        Dyn: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ModalParticipatingMassRatios(
        NumberResults: *mut i32,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        UX: *mut SAFEARRAY,
        UY: *mut SAFEARRAY,
        UZ: *mut SAFEARRAY,
        SumUX: *mut SAFEARRAY,
        SumUY: *mut SAFEARRAY,
        SumUZ: *mut SAFEARRAY,
        RX: *mut SAFEARRAY,
        RY: *mut SAFEARRAY,
        RZ: *mut SAFEARRAY,
        SumRX: *mut SAFEARRAY,
        SumRY: *mut SAFEARRAY,
        SumRZ: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ModalParticipationFactors(
        NumberResults: *mut i32,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        UX: *mut SAFEARRAY,
        UY: *mut SAFEARRAY,
        UZ: *mut SAFEARRAY,
        RX: *mut SAFEARRAY,
        RY: *mut SAFEARRAY,
        RZ: *mut SAFEARRAY,
        ModalMass: *mut SAFEARRAY,
        ModalStiff: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ModalPeriod(
        NumberResults: *mut i32,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        Frequency: *mut SAFEARRAY,
        CircFreq: *mut SAFEARRAY,
        EigenValue: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ModeShape(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn PanelZoneDeformation(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Elm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn PanelZoneForce(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Elm: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SectionCutAnalysis(
        NumberResults: *mut i32,
        SCut: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        F1: *mut SAFEARRAY,
        F2: *mut SAFEARRAY,
        F3: *mut SAFEARRAY,
        M1: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SectionCutDesign(
        NumberResults: *mut i32,
        SCut: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_Setup(
        pRetVal: *mut *mut cAnalysisResultsSetup,
    ) -> HRESULT,
    fn AreaStrainShell(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        e11top: *mut SAFEARRAY,
        e22top: *mut SAFEARRAY,
        g12top: *mut SAFEARRAY,
        emaxtop: *mut SAFEARRAY,
        emintop: *mut SAFEARRAY,
        eangletop: *mut SAFEARRAY,
        evmtop: *mut SAFEARRAY,
        e11bot: *mut SAFEARRAY,
        e22bot: *mut SAFEARRAY,
        g12bot: *mut SAFEARRAY,
        emaxbot: *mut SAFEARRAY,
        eminbot: *mut SAFEARRAY,
        eanglebot: *mut SAFEARRAY,
        evmbot: *mut SAFEARRAY,
        g13avg: *mut SAFEARRAY,
        g23avg: *mut SAFEARRAY,
        gmaxavg: *mut SAFEARRAY,
        gangleavg: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AreaStrainShellLayered(
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        Obj: *mut SAFEARRAY,
        Elm: *mut SAFEARRAY,
        Layer: *mut SAFEARRAY,
        IntPtNum: *mut SAFEARRAY,
        IntPtLoc: *mut SAFEARRAY,
        PointElm: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        E11: *mut SAFEARRAY,
        E22: *mut SAFEARRAY,
        G12: *mut SAFEARRAY,
        EMax: *mut SAFEARRAY,
        EMin: *mut SAFEARRAY,
        EAngle: *mut SAFEARRAY,
        EVM: *mut SAFEARRAY,
        g13avg: *mut SAFEARRAY,
        g23avg: *mut SAFEARRAY,
        gmaxavg: *mut SAFEARRAY,
        gangleavg: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AssembledJointMass_1(
        MassSourceName: BSTR,
        Name: BSTR,
        ItemTypeElm: eItemTypeElm,
        NumberResults: *mut i32,
        PointElm: *mut SAFEARRAY,
        MassSource: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn PierForce(
        NumberResults: *mut i32,
        StoryName: *mut SAFEARRAY,
        PierName: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SpandrelForce(
        NumberResults: *mut i32,
        StoryName: *mut SAFEARRAY,
        SpandrelName: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn JointDrifts(
        NumberResults: *mut i32,
        Story: *mut SAFEARRAY,
        Label: *mut SAFEARRAY,
        Name: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        DisplacementX: *mut SAFEARRAY,
        DisplacementY: *mut SAFEARRAY,
        DriftX: *mut SAFEARRAY,
        DriftY: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn StoryDrifts(
        NumberResults: *mut i32,
        Story: *mut SAFEARRAY,
        LoadCase: *mut SAFEARRAY,
        StepType: *mut SAFEARRAY,
        StepNum: *mut SAFEARRAY,
        Direction: *mut SAFEARRAY,
        Drift: *mut SAFEARRAY,
        Label: *mut SAFEARRAY,
        X: *mut SAFEARRAY,
        Y: *mut SAFEARRAY,
        Z: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x751db83e, 0xcf85, 0x4179, 0xb1, 0x72, 0xd8, 0xef, 0xdc, 0xe7, 0xb0, 0x56)]
interface cAnalysisResultsSetup(cAnalysisResultsSetupVtbl): IDispatch(IDispatchVtbl) {
    fn DeselectAllCasesAndCombosForOutput(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCaseSelectedForOutput(
        Name: BSTR,
        Selected: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetComboSelectedForOutput(
        Name: BSTR,
        Selected: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOptionBaseReactLoc(
        GX: *mut f64,
        GY: *mut f64,
        GZ: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOptionBucklingMode(
        BuckModeStart: *mut i32,
        BuckModeEnd: *mut i32,
        BuckModeAll: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOptionDirectHist(
        Value: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOptionModalHist(
        Value: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOptionModeShape(
        ModeShapeStart: *mut i32,
        ModeShapeEnd: *mut i32,
        ModeShapesAll: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOptionMultiStepStatic(
        Value: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOptionMultiValuedCombo(
        Value: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOptionNLStatic(
        Value: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCaseSelectedForOutput(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetComboSelectedForOutput(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOptionBaseReactLoc(
        GX: f64,
        GY: f64,
        GZ: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOptionBucklingMode(
        BuckModeStart: i32,
        BuckModeEnd: i32,
        BuckModeAll: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOptionDirectHist(
        Value: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOptionModalHist(
        Value: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOptionModeShape(
        ModeShapeStart: i32,
        ModeShapeEnd: i32,
        ModeShapesAll: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOptionMultiStepStatic(
        Value: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOptionMultiValuedCombo(
        Value: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOptionNLStatic(
        Value: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x90e7c3e4, 0x5d56, 0x40a2, 0xba, 0x97, 0x39, 0x79, 0xcf, 0xf0, 0x8a, 0xdc)]
interface cAnalyze(cAnalyzeVtbl): IDispatch(IDispatchVtbl) {
    fn CreateAnalysisModel(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteResults(
        Name: BSTR,
        All: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetActiveDOF(
        DOF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCaseStatus(
        NumberItems: *mut i32,
        CaseName: *mut SAFEARRAY,
        Status: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRunCaseFlag(
        NumberItems: *mut i32,
        CaseName: *mut SAFEARRAY,
        Run: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSolverOption(
        SolverType: *mut i32,
        Force32BitSolver: *mut VARIANT_BOOL,
        StiffCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSolverOption_1(
        SolverType: *mut i32,
        SolverProcessType: *mut i32,
        Force32BitSolver: *mut VARIANT_BOOL,
        StiffCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ModifyUndeformedGeometry(
        CaseName: BSTR,
        SF: f64,
        Stage: i32,
        Original: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn RunAnalysis(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetActiveDOF(
        DOF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetRunCaseFlag(
        Name: BSTR,
        Run: VARIANT_BOOL,
        All: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSolverOption(
        SolverType: i32,
        Force32BitSolver: VARIANT_BOOL,
        StiffCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSolverOption_1(
        SolverType: i32,
        SolverProcessType: i32,
        Force32BitSolver: VARIANT_BOOL,
        StiffCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ModifyUndeformedGeometryModeShape(
        CaseName: BSTR,
        Mode: i32,
        MaxDispl: f64,
        Direction: i32,
        Original: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSolverOption_2(
        SolverType: *mut i32,
        SolverProcessType: *mut i32,
        NumberParallelRuns: *mut i32,
        StiffCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSolverOption_2(
        SolverType: i32,
        SolverProcessType: i32,
        NumberParallelRuns: i32,
        StiffCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn MergeAnalysisResults(
        SourceFileName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSolverOption_3(
        SolverType: *mut i32,
        SolverProcessType: *mut i32,
        NumberParallelRuns: *mut i32,
        ResponseFileSizeMaxMB: *mut i32,
        NumberAnalysisThreads: *mut i32,
        StiffCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSolverOption_3(
        SolverType: i32,
        SolverProcessType: i32,
        NumberParallelRuns: i32,
        ResponseFileSizeMaxMB: i32,
        NumberAnalysisThreads: i32,
        StiffCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignResponseOption(
        NumberDesignThreads: *mut i32,
        NumberResponseRecoveryThreads: *mut i32,
        UseMemoryMappedFilesForResponseRecovery: *mut i32,
        ModelDifferencesOKWhenMergingResults: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDesignResponseOption(
        NumberDesignThreads: i32,
        NumberResponseRecoveryThreads: i32,
        UseMemoryMappedFilesForResponseRecovery: i32,
        ModelDifferencesOKWhenMergingResults: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xc2dc6f7f, 0x938e, 0x4a19, 0xb5, 0xe8, 0x57, 0xd8, 0xc0, 0x95, 0xf5, 0xd5)]
interface cDCompColEurocode_4_2004(cDCompColEurocode_4_2004Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x7209d764, 0xb0d3, 0x43fa, 0xa5, 0xf5, 0xe3, 0xbb, 0x8e, 0x2e, 0xf2, 0xd4)]
interface cDesignCompositeColumn(cDesignCompositeColumnVtbl): IDispatch(IDispatchVtbl) {
    fn GetCode(
        CodeName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetComboDeflection(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetComboStrength(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignSection(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroup(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetResultsAvailable(
        pRetVal: *mut VARIANT_BOOL,
    ) -> HRESULT,
    fn GetSummaryResults(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        FrameType: *mut SAFEARRAY,
        DesignSect: *mut SAFEARRAY,
        Status: *mut SAFEARRAY,
        PMMCombo: *mut SAFEARRAY,
        PMMRatio: *mut SAFEARRAY,
        PRatio: *mut SAFEARRAY,
        MMajRatio: *mut SAFEARRAY,
        MMinRatio: *mut SAFEARRAY,
        VMajCombo: *mut SAFEARRAY,
        VMajRatio: *mut SAFEARRAY,
        VMinCombo: *mut SAFEARRAY,
        VMinRatio: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteResults(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTargetDispl(
        NumberItems: *mut i32,
        LoadCase: *mut SAFEARRAY,
        Point: *mut SAFEARRAY,
        Displ: *mut SAFEARRAY,
        Active: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTargetPeriod(
        NumberItems: *mut i32,
        ModalCase: *mut BSTR,
        Mode: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        Active: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ResetOverwrites(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetAutoSelectNull(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCode(
        CodeName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetComboDeflection(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetComboStrength(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDesignSection(
        Name: BSTR,
        PropName: BSTR,
        LastAnalysis: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroup(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTargetDispl(
        NumberItems: i32,
        LoadCase: *mut SAFEARRAY,
        Point: *mut SAFEARRAY,
        Displ: *mut SAFEARRAY,
        Active: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTargetPeriod(
        NumberItems: i32,
        ModalCase: BSTR,
        Mode: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        Active: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn StartDesign(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn VerifyPassed(
        NumberItems: *mut i32,
        N1: *mut i32,
        N2: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn VerifySections(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_Eurocode_4_2004(
        pRetVal: *mut *mut cDCompColEurocode_4_2004,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x874a1e6c, 0x1490, 0x40e4, 0xba, 0x3c, 0xb8, 0x9b, 0x9f, 0x5f, 0x3b, 0x81)]
interface cDCoACI350_20(cDCoACI350_20Vtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0x5d7f3a1c, 0x1995, 0x47bb, 0xae, 0xd5, 0xd4, 0xc2, 0xf6, 0xed, 0x9a, 0x66)]
interface cDStAustralian_AS4100_2020(cDStAustralian_AS4100_2020Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

// Implements _Object
// Implements cHelper
RIDL!{#[uuid(0xfb5d97c6, 0x0eeb, 0x42a9, 0xb3, 0xb9, 0x3b, 0xc2, 0xfd, 0x19, 0xe0, 0x4f)]
class Helper; }

RIDL!{#[uuid(0x0e971131, 0xd37c, 0x4f86, 0xac, 0x29, 0xee, 0xd9, 0x44, 0x7f, 0xdd, 0x16)]
interface cHelper(cHelperVtbl): IDispatch(IDispatchVtbl) {
    fn CreateObject(
        fullPath: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn GetObject(
        typeName: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn CreateObjectProgID(
        progID: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn GetOAPIVersionNumber(
        pRetVal: *mut f64,
    ) -> HRESULT,
    fn CreateObjectHost(
        hostName: BSTR,
        fullPath: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn CreateObjectHostPort(
        hostName: BSTR,
        portNumber: i32,
        fullPath: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn CreateObjectProgIDHost(
        hostName: BSTR,
        progID: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn CreateObjectProgIDHostPort(
        hostName: BSTR,
        portNumber: i32,
        progID: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn GetObjectHost(
        hostName: BSTR,
        progID: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn GetObjectHostPort(
        hostName: BSTR,
        portNumber: i32,
        progID: BSTR,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
    fn GetObjectProcess(
        typeName: BSTR,
        pid: i32,
        pRetVal: *mut *mut cOAPI,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xbdd8c3ba, 0x07ea, 0x4475, 0x9e, 0x48, 0x7c, 0x1b, 0x7e, 0xaf, 0xb8, 0xaf)]
interface cOAPI(cOAPIVtbl): IDispatch(IDispatchVtbl) {
    fn ApplicationExit(
        FileSave: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_SapModel(
        pRetVal: *mut *mut cSapModel,
    ) -> HRESULT,
    fn GetOAPIVersionNumber(
        pRetVal: *mut f64,
    ) -> HRESULT,
    fn Hide(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Unhide(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Visible(
        pRetVal: *mut VARIANT_BOOL,
    ) -> HRESULT,
    fn SetAsActiveObject(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn UnsetAsActiveObject(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn InternalExec(
        operation: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ApplicationStart(
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf0db2843, 0xbbd6, 0x4482, 0xb8, 0x59, 0x00, 0xfb, 0xe3, 0x90, 0x07, 0x7f)]
interface cSapModel(cSapModelVtbl): IDispatch(IDispatchVtbl) {
    fn get_Analyze(
        pRetVal: *mut *mut cAnalyze,
    ) -> HRESULT,
    fn get_AreaElm(
        pRetVal: *mut *mut cAreaElm,
    ) -> HRESULT,
    fn get_AreaObj(
        pRetVal: *mut *mut cAreaObj,
    ) -> HRESULT,
    fn get_ConstraintDef(
        pRetVal: *mut *mut cConstraint,
    ) -> HRESULT,
    fn get_DesignConcrete(
        pRetVal: *mut *mut cDesignConcrete,
    ) -> HRESULT,
    fn get_DesignSteel(
        pRetVal: *mut *mut cDesignSteel,
    ) -> HRESULT,
    fn get_EditArea(
        pRetVal: *mut *mut cEditArea,
    ) -> HRESULT,
    fn get_EditFrame(
        pRetVal: *mut *mut cEditFrame,
    ) -> HRESULT,
    fn get_EditGeneral(
        pRetVal: *mut *mut cEditGeneral,
    ) -> HRESULT,
    fn get_EditPoint(
        pRetVal: *mut *mut cEditPoint,
    ) -> HRESULT,
    fn get_File(
        pRetVal: *mut *mut cFile,
    ) -> HRESULT,
    fn get_FrameObj(
        pRetVal: *mut *mut cFrameObj,
    ) -> HRESULT,
    fn get_Func(
        pRetVal: *mut *mut cFunction,
    ) -> HRESULT,
    fn get_GDispl(
        pRetVal: *mut *mut cGenDispl,
    ) -> HRESULT,
    fn GetDatabaseUnits(
        pRetVal: *mut eUnits,
    ) -> HRESULT,
    fn GetMergeTol(
        MergeTol: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModelFilename(
        IncludePath: VARIANT_BOOL,
        pRetVal: *mut BSTR,
    ) -> HRESULT,
    fn GetModelFilepath(
        pRetVal: *mut BSTR,
    ) -> HRESULT,
    fn GetModelIsLocked(
        pRetVal: *mut VARIANT_BOOL,
    ) -> HRESULT,
    fn GetPresentCoordSystem(
        pRetVal: *mut BSTR,
    ) -> HRESULT,
    fn GetPresentUnits(
        pRetVal: *mut eUnits,
    ) -> HRESULT,
    fn GetProgramInfo(
        ProgramName: *mut BSTR,
        ProgramVersion: *mut BSTR,
        ProgramLevel: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetProjectInfo(
        NumberItems: *mut i32,
        Item: *mut SAFEARRAY,
        Data: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetVersion(
        Version: *mut BSTR,
        MyVersionNumber: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_GroupDef(
        pRetVal: *mut *mut cGroup,
    ) -> HRESULT,
    fn InitializeNewModel(
        Units: eUnits,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_LineElm(
        pRetVal: *mut *mut cLineElm,
    ) -> HRESULT,
    fn get_LinkElm(
        pRetVal: *mut *mut cLinkElm,
    ) -> HRESULT,
    fn get_LinkObj(
        pRetVal: *mut *mut cLinkObj,
    ) -> HRESULT,
    fn get_LoadCases(
        pRetVal: *mut *mut cLoadCases,
    ) -> HRESULT,
    fn get_LoadPatterns(
        pRetVal: *mut *mut cLoadPatterns,
    ) -> HRESULT,
    fn get_Options(
        pRetVal: *mut *mut cOptions,
    ) -> HRESULT,
    fn get_PatternDef(
        pRetVal: *mut *mut cPattern,
    ) -> HRESULT,
    fn get_PointElm(
        pRetVal: *mut *mut cPointElm,
    ) -> HRESULT,
    fn get_PointObj(
        pRetVal: *mut *mut cPointObj,
    ) -> HRESULT,
    fn get_PropArea(
        pRetVal: *mut *mut cPropArea,
    ) -> HRESULT,
    fn get_PropFrame(
        pRetVal: *mut *mut cPropFrame,
    ) -> HRESULT,
    fn get_PropLink(
        pRetVal: *mut *mut cPropLink,
    ) -> HRESULT,
    fn get_PropMaterial(
        pRetVal: *mut *mut cPropMaterial,
    ) -> HRESULT,
    fn get_PropRebar(
        pRetVal: *mut *mut cPropRebar,
    ) -> HRESULT,
    fn get_PropTendon(
        pRetVal: *mut *mut cPropTendon,
    ) -> HRESULT,
    fn get_RespCombo(
        pRetVal: *mut *mut cCombo,
    ) -> HRESULT,
    fn get_Results(
        pRetVal: *mut *mut cAnalysisResults,
    ) -> HRESULT,
    fn get_SelectObj(
        pRetVal: *mut *mut cSelect,
    ) -> HRESULT,
    fn SetMergeTol(
        MergeTol: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetModelIsLocked(
        Lockit: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPresentUnits(
        Units: eUnits,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetProjectInfo(
        Item: BSTR,
        Data: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_TendonObj(
        pRetVal: *mut *mut cTendonObj,
    ) -> HRESULT,
    fn get_View(
        pRetVal: *mut *mut cView,
    ) -> HRESULT,
    fn get_DesignResults(
        pRetVal: *mut *mut cDesignResults,
    ) -> HRESULT,
    fn get_DatabaseTables(
        pRetVal: *mut *mut cDatabaseTables,
    ) -> HRESULT,
    fn get_DesignCompositeBeam(
        pRetVal: *mut *mut cDesignCompositeBeam,
    ) -> HRESULT,
    fn get_GridSys(
        pRetVal: *mut *mut cGridSys,
    ) -> HRESULT,
    fn get_Story(
        pRetVal: *mut *mut cStory,
    ) -> HRESULT,
    fn get_Tower(
        pRetVal: *mut *mut cTower,
    ) -> HRESULT,
    fn GetDatabaseUnits_2(
        forceUnits: *mut eForce,
        lengthUnits: *mut eLength,
        temperatureUnits: *mut eTemperature,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPresentUnits_2(
        forceUnits: *mut eForce,
        lengthUnits: *mut eLength,
        temperatureUnits: *mut eTemperature,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPresentUnits_2(
        forceUnits: eForce,
        lengthUnits: eLength,
        temperatureUnits: eTemperature,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_Diaphragm(
        pRetVal: *mut *mut cDiaphragm,
    ) -> HRESULT,
    fn TreeIsUpdateSuspended(
        IsSuspended: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn TreeResumeUpdateData(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn TreeSuspendUpdateData(
        updateAtResume: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_PierLabel(
        pRetVal: *mut *mut cPierLabel,
    ) -> HRESULT,
    fn get_SpandrelLabel(
        pRetVal: *mut *mut cSpandrelLabel,
    ) -> HRESULT,
    fn get_Detailing(
        pRetVal: *mut *mut cDetailing,
    ) -> HRESULT,
    fn get_PropPointSpring(
        pRetVal: *mut *mut cPropPointSpring,
    ) -> HRESULT,
    fn get_PropLineSpring(
        pRetVal: *mut *mut cPropLineSpring,
    ) -> HRESULT,
    fn get_PropAreaSpring(
        pRetVal: *mut *mut cPropAreaSpring,
    ) -> HRESULT,
    fn get_DesignConcreteSlab(
        pRetVal: *mut *mut cDesignConcreteSlab,
    ) -> HRESULT,
    fn get_DesignShearWall(
        pRetVal: *mut *mut cDesignShearWall,
    ) -> HRESULT,
    fn get_DesignCompositeColumn(
        pRetVal: *mut *mut cDesignCompositeColumn,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xab4b15aa, 0x780a, 0x4047, 0xa8, 0x14, 0x3b, 0x1a, 0x83, 0xcb, 0xd2, 0x6b)]
interface cPluginContract(cPluginContractVtbl): IDispatch(IDispatchVtbl) {
    fn Main(
        SapModel: *mut *mut cSapModel,
        ISapPlugin: *mut *mut cPluginCallback,
    ) -> HRESULT,
    fn Info(
        Text: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x496fb743, 0x26af, 0x47c5, 0xa7, 0x13, 0xc1, 0xb5, 0xca, 0x85, 0x10, 0x6c)]
interface cPluginCallback(cPluginCallbackVtbl): IDispatch(IDispatchVtbl) {
    fn get_ErrorFlag(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Finish(
        iVal: i32,
    ) -> HRESULT,
    fn get_Finished(
        pRetVal: *mut VARIANT_BOOL,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xee65dabe, 0xcd3c, 0x4028, 0x9c, 0x2a, 0x2c, 0x1a, 0x22, 0x4e, 0xe2, 0x64)]
interface cGenRefLine(cGenRefLineVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0x8ce65d2b, 0xf765, 0x4206, 0x8a, 0x1f, 0xca, 0x40, 0xaf, 0xe3, 0x10, 0x49)]
interface cGridSys(cGridSysVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGridSys(
        Name: BSTR,
        X: *mut f64,
        Y: *mut f64,
        RZ: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTransformationMatrix(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGridSys(
        Name: BSTR,
        X: f64,
        Y: f64,
        RZ: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGridSys_2(
        Name: BSTR,
        Xo: *mut f64,
        Yo: *mut f64,
        RZ: *mut f64,
        GridSysType: *mut BSTR,
        NumXLines: *mut i32,
        NumYLines: *mut i32,
        GridLineIDX: *mut SAFEARRAY,
        GridLineIDY: *mut SAFEARRAY,
        OrdinateX: *mut SAFEARRAY,
        OrdinateY: *mut SAFEARRAY,
        VisibleX: *mut SAFEARRAY,
        VisibleY: *mut SAFEARRAY,
        BubbleLocX: *mut SAFEARRAY,
        BubbleLocY: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGridSysType(
        Name: BSTR,
        GridSysType: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameTypeList(
        NumberNames: *mut i32,
        GridSysName: *mut SAFEARRAY,
        GridSysType: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGridSysCartesian(
        Name: BSTR,
        Xo: *mut f64,
        Yo: *mut f64,
        RZ: *mut f64,
        StoryRangeIsDefault: *mut VARIANT_BOOL,
        TopStory: *mut BSTR,
        BottomStory: *mut BSTR,
        BubbleSize: *mut f64,
        GridColor: *mut i32,
        NumXLines: *mut i32,
        GridLineIDX: *mut SAFEARRAY,
        OrdinateX: *mut SAFEARRAY,
        VisibleX: *mut SAFEARRAY,
        BubbleLocX: *mut SAFEARRAY,
        NumYLines: *mut i32,
        GridLineIDY: *mut SAFEARRAY,
        OrdinateY: *mut SAFEARRAY,
        VisibleY: *mut SAFEARRAY,
        BubbleLocY: *mut SAFEARRAY,
        NumGenLines: *mut i32,
        GridLineIDGen: *mut SAFEARRAY,
        GenOrdX1: *mut SAFEARRAY,
        GenOrdY1: *mut SAFEARRAY,
        GenOrdX2: *mut SAFEARRAY,
        GenOrdY2: *mut SAFEARRAY,
        VisibleGen: *mut SAFEARRAY,
        BubbleLocGen: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGridSysCylindrical(
        Name: BSTR,
        Xo: *mut f64,
        Yo: *mut f64,
        RZ: *mut f64,
        StoryRangeIsDefault: *mut VARIANT_BOOL,
        TopStory: *mut BSTR,
        BottomStory: *mut BSTR,
        BubbleSize: *mut f64,
        GridColor: *mut i32,
        NumRLines: *mut i32,
        GridLineIDR: *mut SAFEARRAY,
        OrdinateR: *mut SAFEARRAY,
        VisibleR: *mut SAFEARRAY,
        BubbleLocR: *mut SAFEARRAY,
        NumTLines: *mut i32,
        GridLineIDT: *mut SAFEARRAY,
        OrdinateT: *mut SAFEARRAY,
        VisibleT: *mut SAFEARRAY,
        BubbleLocT: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x0597c1a0, 0xa026, 0x4dd7, 0x92, 0xe0, 0x83, 0x32, 0x57, 0xf5, 0x28, 0x03)]
interface cDiaphragm(cDiaphragmVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDiaphragm(
        Name: BSTR,
        SemiRigid: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDiaphragm(
        Name: BSTR,
        SemiRigid: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xd0ce6fbb, 0x5a4f, 0x4dbb, 0xa5, 0x1d, 0x03, 0x9b, 0x10, 0x62, 0x85, 0xe0)]
interface cNamedSet(cNamedSetVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0xc16857e5, 0xed00, 0x43fa, 0xbe, 0x26, 0x8b, 0xed, 0x76, 0x6e, 0x77, 0xad)]
interface cSpandrelLabel(cSpandrelLabelVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpandrel(
        Name: BSTR,
        IsMultiStory: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        IsMultiStory: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpandrel(
        Name: BSTR,
        IsMultiStory: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSectionProperties(
        Name: BSTR,
        NumberStories: *mut i32,
        StoryName: *mut SAFEARRAY,
        NumAreaObj: *mut SAFEARRAY,
        NumLineObj: *mut SAFEARRAY,
        Length: *mut SAFEARRAY,
        DepthLeft: *mut SAFEARRAY,
        ThickLeft: *mut SAFEARRAY,
        DepthRight: *mut SAFEARRAY,
        ThickRight: *mut SAFEARRAY,
        MatProp: *mut SAFEARRAY,
        CGLeftX: *mut SAFEARRAY,
        CGLeftY: *mut SAFEARRAY,
        CGLeftZ: *mut SAFEARRAY,
        CGRightX: *mut SAFEARRAY,
        CGRightY: *mut SAFEARRAY,
        CGRightZ: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x694be161, 0xf785, 0x4f24, 0x85, 0x20, 0x9f, 0x38, 0x90, 0xf7, 0x81, 0xe1)]
interface cPierLabel(cPierLabelVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPier(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSectionProperties(
        Name: BSTR,
        NumberStories: *mut i32,
        StoryName: *mut SAFEARRAY,
        AxisAngle: *mut SAFEARRAY,
        NumAreaObjs: *mut SAFEARRAY,
        NumLineObjs: *mut SAFEARRAY,
        WidthBot: *mut SAFEARRAY,
        ThicknessBot: *mut SAFEARRAY,
        WidthTop: *mut SAFEARRAY,
        ThicknessTop: *mut SAFEARRAY,
        MatProp: *mut SAFEARRAY,
        CGBotX: *mut SAFEARRAY,
        CGBotY: *mut SAFEARRAY,
        CGBotZ: *mut SAFEARRAY,
        CGTopX: *mut SAFEARRAY,
        CGTopY: *mut SAFEARRAY,
        CGTopZ: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPier(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x5fafc96f, 0x2286, 0x4c5c, 0xa5, 0x76, 0xb4, 0x0a, 0xa0, 0x72, 0x71, 0x25)]
interface cStory(cStoryVtbl): IDispatch(IDispatchVtbl) {
    fn GetElevation(
        Name: BSTR,
        Elevation: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGUID(
        Name: BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetHeight(
        Name: BSTR,
        Height: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMasterStory(
        Name: BSTR,
        IsMasterStory: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSimilarTo(
        Name: BSTR,
        IsMasterStory: *mut VARIANT_BOOL,
        SimilarToStory: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSplice(
        Name: BSTR,
        SpliceAbove: *mut VARIANT_BOOL,
        SpliceHeight: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetStories(
        NumberStories: *mut i32,
        StoryNames: *mut SAFEARRAY,
        StoryElevations: *mut SAFEARRAY,
        StoryHeights: *mut SAFEARRAY,
        IsMasterStory: *mut SAFEARRAY,
        SimilarToStory: *mut SAFEARRAY,
        SpliceAbove: *mut SAFEARRAY,
        SpliceHeight: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGUID(
        Name: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetElevation(
        Name: BSTR,
        Elevation: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetHeight(
        Name: BSTR,
        Height: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMasterStory(
        Name: BSTR,
        IsMasterStory: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSimilarTo(
        Name: BSTR,
        SimilarToStory: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSplice(
        Name: BSTR,
        SpliceAbove: VARIANT_BOOL,
        SpliceHeight: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetStories(
        StoryNames: SAFEARRAY,
        StoryElevations: SAFEARRAY,
        StoryHeights: SAFEARRAY,
        IsMasterStory: SAFEARRAY,
        SimilarToStory: SAFEARRAY,
        SpliceAbove: SAFEARRAY,
        SpliceHeight: SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetStories_2(
        BaseElevation: *mut f64,
        NumberStories: *mut i32,
        StoryNames: *mut SAFEARRAY,
        StoryElevations: *mut SAFEARRAY,
        StoryHeights: *mut SAFEARRAY,
        IsMasterStory: *mut SAFEARRAY,
        SimilarToStory: *mut SAFEARRAY,
        SpliceAbove: *mut SAFEARRAY,
        SpliceHeight: *mut SAFEARRAY,
        color: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetStories_2(
        BaseElevation: f64,
        NumberStories: i32,
        StoryNames: *mut SAFEARRAY,
        StoryHeights: *mut SAFEARRAY,
        IsMasterStory: *mut SAFEARRAY,
        SimilarToStory: *mut SAFEARRAY,
        SpliceAbove: *mut SAFEARRAY,
        SpliceHeight: *mut SAFEARRAY,
        color: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xa7358245, 0x1148, 0x4351, 0xbb, 0xea, 0xb8, 0xc4, 0x67, 0x81, 0xd7, 0xdd)]
interface cCombo(cComboVtbl): IDispatch(IDispatchVtbl) {
    fn Add(
        Name: BSTR,
        ComboType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AddDesignDefaultCombos(
        DesignSteel: VARIANT_BOOL,
        DesignConcrete: VARIANT_BOOL,
        DesignAluminum: VARIANT_BOOL,
        DesignColdFormed: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteCase(
        Name: BSTR,
        CNameType: eCNameType,
        CName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCaseList(
        Name: BSTR,
        NumberItems: *mut i32,
        CNameType: *mut SAFEARRAY,
        CName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCaseList(
        Name: BSTR,
        CNameType: *mut eCNameType,
        CName: BSTR,
        SF: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        ComboType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCaseList_1(
        Name: BSTR,
        NumberItems: *mut i32,
        CNameType: *mut SAFEARRAY,
        CName: *mut SAFEARRAY,
        ModeNumber: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCaseList_1(
        Name: BSTR,
        CNameType: *mut eCNameType,
        CName: BSTR,
        ModeNumber: i32,
        SF: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeCombo(
        Name: BSTR,
        ComboType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x99156786, 0x2a94, 0x4cad, 0x81, 0x9f, 0xe9, 0x1d, 0x16, 0x35, 0xd9, 0x6b)]
interface cConstraint(cConstraintVtbl): IDispatch(IDispatchVtbl) {
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDiaphragm(
        Name: BSTR,
        Axis: *mut eConstraintAxis,
        CSys: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDiaphragm(
        Name: BSTR,
        Axis: eConstraintAxis,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x8a69b84b, 0x5e5b, 0x4f2c, 0xbf, 0xa9, 0xb7, 0xa5, 0x58, 0xa9, 0xd3, 0x10)]
interface cGenDispl(cGenDisplVtbl): IDispatch(IDispatchVtbl) {
    fn Add(
        Name: BSTR,
        MyType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountPoint(
        Name: BSTR,
        Count: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeletePoint(
        Name: BSTR,
        PointName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPoint(
        Name: BSTR,
        NumberItems: *mut i32,
        PointName: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        MyType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPoint(
        Name: BSTR,
        PointName: BSTR,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetType(
        Name: BSTR,
        MyType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTypeOAPI(
        Name: BSTR,
        MyType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeGenDispl(
        Name: BSTR,
        MyType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf6cfa75c, 0x835a, 0x4e25, 0x8f, 0x72, 0xa6, 0x02, 0x27, 0xd4, 0xa9, 0x75)]
interface cGroup(cGroupVtbl): IDispatch(IDispatchVtbl) {
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAssignments(
        Name: BSTR,
        NumberItems: *mut i32,
        ObjectType: *mut SAFEARRAY,
        ObjectName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroup(
        Name: BSTR,
        color: *mut i32,
        SpecifiedForSelection: *mut VARIANT_BOOL,
        SpecifiedForSectionCutDefinition: *mut VARIANT_BOOL,
        SpecifiedForSteelDesign: *mut VARIANT_BOOL,
        SpecifiedForConcreteDesign: *mut VARIANT_BOOL,
        SpecifiedForAluminumDesign: *mut VARIANT_BOOL,
        SpecifiedForColdFormedDesign: *mut VARIANT_BOOL,
        SpecifiedForStaticNLActiveStage: *mut VARIANT_BOOL,
        SpecifiedForBridgeResponseOutput: *mut VARIANT_BOOL,
        SpecifiedForAutoSeismicOutput: *mut VARIANT_BOOL,
        SpecifiedForAutoWindOutput: *mut VARIANT_BOOL,
        SpecifiedForMassAndWeight: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroup(
        Name: BSTR,
        color: i32,
        SpecifiedForSelection: VARIANT_BOOL,
        SpecifiedForSectionCutDefinition: VARIANT_BOOL,
        SpecifiedForSteelDesign: VARIANT_BOOL,
        SpecifiedForConcreteDesign: VARIANT_BOOL,
        SpecifiedForAluminumDesign: VARIANT_BOOL,
        SpecifiedForColdFormedDesign: VARIANT_BOOL,
        SpecifiedForStaticNLActiveStage: VARIANT_BOOL,
        SpecifiedForBridgeResponseOutput: VARIANT_BOOL,
        SpecifiedForAutoSeismicOutput: VARIANT_BOOL,
        SpecifiedForAutoWindOutput: VARIANT_BOOL,
        SpecifiedForMassAndWeight: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroup_1(
        Name: BSTR,
        color: *mut i32,
        SpecifiedForSelection: *mut VARIANT_BOOL,
        SpecifiedForSectionCutDefinition: *mut VARIANT_BOOL,
        SpecifiedForSteelDesign: *mut VARIANT_BOOL,
        SpecifiedForConcreteDesign: *mut VARIANT_BOOL,
        SpecifiedForAluminumDesign: *mut VARIANT_BOOL,
        SpecifiedForStaticNLActiveStage: *mut VARIANT_BOOL,
        SpecifiedForAutoSeismicOutput: *mut VARIANT_BOOL,
        SpecifiedForAutoWindOutput: *mut VARIANT_BOOL,
        SpecifiedForMassAndWeight: *mut VARIANT_BOOL,
        SpecifiedForSteelJoistDesign: *mut VARIANT_BOOL,
        SpecifiedForWallDesign: *mut VARIANT_BOOL,
        SpecifiedForBasePlateDesign: *mut VARIANT_BOOL,
        SpecifiedForConnectionDesign: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroup_1(
        Name: BSTR,
        color: i32,
        SpecifiedForSelection: VARIANT_BOOL,
        SpecifiedForSectionCutDefinition: VARIANT_BOOL,
        SpecifiedForSteelDesign: VARIANT_BOOL,
        SpecifiedForConcreteDesign: VARIANT_BOOL,
        SpecifiedForAluminumDesign: VARIANT_BOOL,
        SpecifiedForStaticNLActiveStage: VARIANT_BOOL,
        SpecifiedForAutoSeismicOutput: VARIANT_BOOL,
        SpecifiedForAutoWindOutput: VARIANT_BOOL,
        SpecifiedForMassAndWeight: VARIANT_BOOL,
        SpecifiedForSteelJoistDesign: VARIANT_BOOL,
        SpecifiedForWallDesign: VARIANT_BOOL,
        SpecifiedForBasePlateDesign: VARIANT_BOOL,
        SpecifiedForConnectionDesign: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x974a9f01, 0xaa67, 0x402c, 0xb9, 0x5d, 0xec, 0x38, 0x92, 0xab, 0x31, 0x7c)]
interface cPattern(cPatternVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0xb81c2252, 0x779b, 0x4228, 0xb5, 0xf4, 0xf9, 0x79, 0x43, 0x4b, 0xb6, 0x92)]
interface cTower(cTowerVtbl): IDispatch(IDispatchVtbl) {
    fn AddCopyOfTower(
        TowerName: BSTR,
        NewTowerName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AddNewTower(
        TowerName: BSTR,
        NumberStories: i32,
        TypicalStoryHeight: f64,
        BotttomStoryHeight: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AllowMultipleTowers(
        AllowMultTowers: VARIANT_BOOL,
        RetainedTower: BSTR,
        Combine: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteTower(
        TowerName: BSTR,
        Associate: VARIANT_BOOL,
        AssocWithTower: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetActiveTower(
        TowerName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn RenameTower(
        TowerName: BSTR,
        NewTowerName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetActiveTower(
        TowerName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x36b7c3db, 0x1a91, 0x41ed, 0xb4, 0x43, 0x1a, 0x10, 0x23, 0x83, 0xb7, 0x31)]
interface cFunction(cFunctionVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ConvertToUser(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        FuncType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_FuncRS(
        pRetVal: *mut *mut cFunctionRS,
    ) -> HRESULT,
    fn get_FuncTH(
        pRetVal: *mut *mut cFunctionTH,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        FuncType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        FuncType: *mut i32,
        AddType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetValues(
        Name: BSTR,
        NumberItems: *mut i32,
        MyTime: *mut SAFEARRAY,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf4ea1f46, 0xb9c3, 0x4d4b, 0xad, 0x95, 0xc9, 0x51, 0xd9, 0x19, 0xa2, 0x6e)]
interface cFunctionRS(cFunctionRSVtbl): IDispatch(IDispatchVtbl) {
    fn GetNTC2008(
        Name: BSTR,
        ParamsOption: *mut i32,
        Latitude: *mut f64,
        Longitude: *mut f64,
        Island: *mut i32,
        LimitState: *mut i32,
        UsageClass: *mut i32,
        NomLife: *mut f64,
        PeakAccel: *mut f64,
        F0: *mut f64,
        Tcs: *mut f64,
        SpecType: *mut i32,
        SoilType: *mut i32,
        Topography: *mut i32,
        hRatio: *mut f64,
        Damping: *mut f64,
        q: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetNTC2008(
        Name: BSTR,
        ParamsOption: i32,
        Latitude: f64,
        Longitude: f64,
        Island: i32,
        LimitState: i32,
        UsageClass: i32,
        NomLife: f64,
        PeakAccel: f64,
        F0: f64,
        Tcs: f64,
        SpecType: i32,
        SoilType: i32,
        Topography: i32,
        hRatio: f64,
        Damping: f64,
        q: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNTC2018(
        Name: BSTR,
        ParamsOption: *mut i32,
        Latitude: *mut f64,
        Longitude: *mut f64,
        Island: *mut i32,
        LimitState: *mut i32,
        UsageClass: *mut i32,
        NomLife: *mut f64,
        PeakAccel: *mut f64,
        F0: *mut f64,
        Tcs: *mut f64,
        SpecType: *mut i32,
        SoilType: *mut i32,
        Topography: *mut i32,
        hRatio: *mut f64,
        Damping: *mut f64,
        q: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetNTC2018(
        Name: BSTR,
        ParamsOption: i32,
        Latitude: f64,
        Longitude: f64,
        Island: i32,
        LimitState: i32,
        UsageClass: i32,
        NomLife: f64,
        PeakAccel: f64,
        F0: f64,
        Tcs: f64,
        SpecType: i32,
        SoilType: i32,
        Topography: i32,
        hRatio: f64,
        Damping: f64,
        q: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x618c5ad5, 0x5e03, 0x4972, 0x92, 0x62, 0x38, 0x0e, 0xc3, 0xfe, 0xcb, 0x87)]
interface cFunctionTH(cFunctionTHVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0xd67f622b, 0xdea3, 0x4618, 0xaa, 0xd2, 0x99, 0x4b, 0xd3, 0x46, 0x0f, 0x7d)]
interface cCaseBuckling(cCaseBucklingVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0xb1ec6f45, 0xf1e3, 0x4489, 0xa9, 0xb5, 0x5b, 0xaa, 0x3f, 0x6f, 0xf9, 0x57)]
interface cCaseDirectHistoryLinear(cCaseDirectHistoryLinearVtbl): IDispatch(IDispatchVtbl) {
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        Func: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        Tf: *mut SAFEARRAY,
        At: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Ang: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x961a9e5b, 0xb81e, 0x4b18, 0x92, 0xf2, 0xb4, 0x25, 0x93, 0x55, 0x08, 0x90)]
interface cCaseDirectHistoryNonlinear(cCaseDirectHistoryNonlinearVtbl): IDispatch(IDispatchVtbl) {
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        Func: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        Tf: *mut SAFEARRAY,
        At: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Ang: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x9759bdde, 0x079e, 0x4331, 0x9e, 0xca, 0xfc, 0xc2, 0x94, 0xdc, 0xd0, 0x9f)]
interface cCaseHyperStatic(cCaseHyperStaticVtbl): IDispatch(IDispatchVtbl) {
    fn GetBaseCase(
        Name: BSTR,
        HyperStaticCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetBaseCase(
        Name: BSTR,
        HyperStaticCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCase(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x99cebb74, 0xfd82, 0x404b, 0x9b, 0x24, 0x86, 0x79, 0xee, 0x4b, 0xf5, 0xc2)]
interface cCaseModalEigen(cCaseModalEigenVtbl): IDispatch(IDispatchVtbl) {
    fn GetInitialCase(
        Name: BSTR,
        InitialCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        TargetPar: *mut SAFEARRAY,
        StaticCorrect: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNumberModes(
        Name: BSTR,
        MaxModes: *mut i32,
        MinModes: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetParameters(
        Name: BSTR,
        EigenShiftFreq: *mut f64,
        EigenCutOff: *mut f64,
        EigenTol: *mut f64,
        AllowAutoFreqShift: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCase(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetInitialCase(
        Name: BSTR,
        InitialCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoads(
        Name: BSTR,
        NumberLoads: i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        TargetPar: *mut SAFEARRAY,
        StaticCorrect: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetNumberModes(
        Name: BSTR,
        MaxModes: i32,
        MinModes: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetParameters(
        Name: BSTR,
        EigenShiftFreq: f64,
        EigenCutOff: f64,
        EigenTol: f64,
        AllowAutoFreqShift: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x89d6da7f, 0x45b2, 0x4c28, 0x81, 0xe8, 0x77, 0xdb, 0x81, 0x7f, 0xdb, 0x9c)]
interface cCaseModalHistoryLinear(cCaseModalHistoryLinearVtbl): IDispatch(IDispatchVtbl) {
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        Func: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        Tf: *mut SAFEARRAY,
        At: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Ang: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCase(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoads(
        Name: BSTR,
        NumberLoads: i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        Func: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        Tf: *mut SAFEARRAY,
        At: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Ang: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x81ffbed7, 0x4cf9, 0x44b0, 0xbe, 0xde, 0x38, 0x19, 0x5e, 0x5c, 0x6b, 0x52)]
interface cCaseModalHistoryNonlinear(cCaseModalHistoryNonlinearVtbl): IDispatch(IDispatchVtbl) {
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        Func: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        Tf: *mut SAFEARRAY,
        At: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Ang: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xbc3315e4, 0x2774, 0x497e, 0x97, 0xb0, 0xe5, 0x86, 0x1d, 0x0c, 0xee, 0x16)]
interface cCaseModalRitz(cCaseModalRitzVtbl): IDispatch(IDispatchVtbl) {
    fn GetInitialCase(
        Name: BSTR,
        InitialCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        RitzMaxCyc: *mut SAFEARRAY,
        TargetPar: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNumberModes(
        Name: BSTR,
        MaxModes: *mut i32,
        MinModes: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCase(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetInitialCase(
        Name: BSTR,
        InitialCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoads(
        Name: BSTR,
        NumberLoads: i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        RitzMaxCyc: *mut SAFEARRAY,
        TargetPar: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetNumberModes(
        Name: BSTR,
        MaxModes: i32,
        MinModes: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xcdaad35b, 0x4090, 0x4499, 0xaa, 0x8b, 0x61, 0x5a, 0xf5, 0xaa, 0x2b, 0x0d)]
interface cCaseResponseSpectrum(cCaseResponseSpectrumVtbl): IDispatch(IDispatchVtbl) {
    fn GetDampConstant(
        Name: BSTR,
        Damp: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDampInterpolated(
        Name: BSTR,
        DampType: *mut i32,
        NumberItems: *mut i32,
        Time: *mut SAFEARRAY,
        Damp: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDampOverrides(
        Name: BSTR,
        NumberItems: *mut i32,
        Mode: *mut SAFEARRAY,
        Damp: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDampProportional(
        Name: BSTR,
        DampType: *mut i32,
        DampA: *mut f64,
        DampB: *mut f64,
        DampF1: *mut f64,
        DampF2: *mut f64,
        DampD1: *mut f64,
        DampD2: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDampType(
        Name: BSTR,
        DampType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDiaphragmEccentricityOverride(
        Name: BSTR,
        Num: *mut i32,
        Diaph: *mut SAFEARRAY,
        Eccen: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDirComb(
        Name: BSTR,
        MyType: *mut i32,
        SF: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetEccentricity(
        Name: BSTR,
        Eccen: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadName: *mut SAFEARRAY,
        Func: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Ang: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModalCase(
        Name: BSTR,
        ModalCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModalComb(
        Name: BSTR,
        MyType: *mut i32,
        F1: *mut f64,
        F2: *mut f64,
        Td: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModalComb_1(
        Name: BSTR,
        MyType: *mut i32,
        F1: *mut f64,
        F2: *mut f64,
        PeriodicRigidCombType: *mut i32,
        Td: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCase(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetEccentricity(
        Name: BSTR,
        Eccen: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoads(
        Name: BSTR,
        NumberLoads: i32,
        LoadName: *mut SAFEARRAY,
        Func: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Ang: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetModalCase(
        Name: BSTR,
        ModalCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xae73755e, 0x671c, 0x4fb1, 0x87, 0x78, 0x41, 0x91, 0x65, 0x4f, 0x5c, 0xde)]
interface cCaseStaticLinear(cCaseStaticLinearVtbl): IDispatch(IDispatchVtbl) {
    fn GetInitialCase(
        Name: BSTR,
        InitialCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCase(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetInitialCase(
        Name: BSTR,
        InitialCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoads(
        Name: BSTR,
        NumberLoads: i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xadab597e, 0xec5a, 0x43c6, 0x99, 0x10, 0x1c, 0x70, 0x91, 0x27, 0x66, 0xf6)]
interface cCaseStaticNonlinear(cCaseStaticNonlinearVtbl): IDispatch(IDispatchVtbl) {
    fn GetGeometricNonlinearity(
        Name: BSTR,
        NLGeomType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetHingeUnloading(
        Name: BSTR,
        UnloadType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetInitialCase(
        Name: BSTR,
        InitialCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadApplication(
        Name: BSTR,
        LoadControl: *mut i32,
        DispType: *mut i32,
        Displ: *mut f64,
        Monitor: *mut i32,
        DOF: *mut i32,
        PointName: *mut BSTR,
        GDispl: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoads(
        Name: BSTR,
        NumberLoads: *mut i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModalCase(
        Name: BSTR,
        ModalCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetResultsSaved(
        Name: BSTR,
        SaveMultipleSteps: *mut VARIANT_BOOL,
        MinSavedStates: *mut i32,
        MaxSavedStates: *mut i32,
        PositiveOnly: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSolControlParameters(
        Name: BSTR,
        MaxTotalSteps: *mut i32,
        MaxFailedSubSteps: *mut i32,
        MaxIterCS: *mut i32,
        MaxIterNR: *mut i32,
        TolConvD: *mut f64,
        UseEventStepping: *mut VARIANT_BOOL,
        TolEventD: *mut f64,
        MaxLineSearchPerIter: *mut i32,
        TolLineSearch: *mut f64,
        LineSearchStepFact: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTargetForceParameters(
        Name: BSTR,
        TolConvF: *mut f64,
        MaxIter: *mut i32,
        AccelFact: *mut f64,
        NoStop: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCase(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGeometricNonlinearity(
        Name: BSTR,
        NLGeomType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetHingeUnloading(
        Name: BSTR,
        UnloadType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetInitialCase(
        Name: BSTR,
        InitialCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadApplication(
        Name: BSTR,
        LoadControl: i32,
        DispType: i32,
        Displ: f64,
        Monitor: i32,
        DOF: i32,
        PointName: BSTR,
        GDispl: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoads(
        Name: BSTR,
        NumberLoads: i32,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetModalCase(
        Name: BSTR,
        ModalCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetResultsSaved(
        Name: BSTR,
        SaveMultipleSteps: VARIANT_BOOL,
        MinSavedStates: i32,
        MaxSavedStates: i32,
        PositiveOnly: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSolControlParameters(
        Name: BSTR,
        MaxTotalSteps: i32,
        MaxFailedSubSteps: i32,
        MaxIterCS: i32,
        MaxIterNR: i32,
        TolConvD: f64,
        UseEventStepping: VARIANT_BOOL,
        TolEventD: f64,
        MaxLineSearchPerIter: i32,
        TolLineSearch: f64,
        LineSearchStepFact: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTargetForceParameters(
        Name: BSTR,
        TolConvF: f64,
        MaxIter: i32,
        AccelFact: f64,
        NoStop: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMassSource(
        Name: BSTR,
        mSource: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMassSource(
        Name: BSTR,
        mSource: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x2cb60d1d, 0xaf61, 0x4e6c, 0x98, 0x59, 0xf1, 0x9c, 0x58, 0xdf, 0x49, 0x01)]
interface cCaseStaticNonlinearStaged(cCaseStaticNonlinearStagedVtbl): IDispatch(IDispatchVtbl) {
    fn GetGeometricNonlinearity(
        Name: BSTR,
        NLGeomType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetHingeUnloading(
        Name: BSTR,
        UnloadType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetInitialCase(
        Name: BSTR,
        InitialCase: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMaterialNonlinearity(
        Name: BSTR,
        TimeDepMatProp: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetResultsSaved(
        Name: BSTR,
        StagedSaveOption: *mut i32,
        StagedMinSteps: *mut i32,
        StagedMinStepsTD: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSolControlParameters(
        Name: BSTR,
        MaxTotalSteps: *mut i32,
        MaxFailedSubSteps: *mut i32,
        MaxIterCS: *mut i32,
        MaxIterNR: *mut i32,
        TolConvD: *mut f64,
        UseEventStepping: *mut VARIANT_BOOL,
        TolEventD: *mut f64,
        MaxLineSearchPerIter: *mut i32,
        TolLineSearch: *mut f64,
        LineSearchStepFact: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetStageData(
        Name: BSTR,
        Stage: *mut i32,
        NumberOperations: *mut i32,
        operation: *mut SAFEARRAY,
        GroupName: *mut SAFEARRAY,
        Age: *mut SAFEARRAY,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetStageData_1(
        Name: BSTR,
        Stage: *mut i32,
        NumberOperations: *mut i32,
        operation: *mut SAFEARRAY,
        ObjectType: *mut SAFEARRAY,
        ObjectName: *mut SAFEARRAY,
        Age: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        MyName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetStageDefinitions(
        Name: BSTR,
        NumberStages: *mut i32,
        Duration: *mut SAFEARRAY,
        Comment: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetStageDefinitions_1(
        Name: BSTR,
        NumberStages: *mut i32,
        Duration: *mut SAFEARRAY,
        Output: *mut SAFEARRAY,
        OutputName: *mut SAFEARRAY,
        Comment: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTargetForceParameters(
        Name: BSTR,
        TolConvF: *mut f64,
        MaxIter: *mut i32,
        AccelFact: *mut f64,
        NoStop: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCase(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGeometricNonlinearity(
        Name: BSTR,
        NLGeomType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetHingeUnloading(
        Name: BSTR,
        UnloadType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetInitialCase(
        Name: BSTR,
        InitialCase: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMaterialNonlinearity(
        Name: BSTR,
        TimeDepMatProp: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetResultsSaved(
        Name: BSTR,
        StagedSaveOption: i32,
        StagedMinSteps: i32,
        StagedMinStepsTD: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSolControlParameters(
        Name: BSTR,
        MaxTotalSteps: i32,
        MaxFailedSubSteps: i32,
        MaxIterCS: i32,
        MaxIterNR: i32,
        TolConvD: f64,
        UseEventStepping: VARIANT_BOOL,
        TolEventD: f64,
        MaxLineSearchPerIter: i32,
        TolLineSearch: f64,
        LineSearchStepFact: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetStageData(
        Name: BSTR,
        Stage: i32,
        NumberOperations: i32,
        operation: *mut SAFEARRAY,
        GroupName: *mut SAFEARRAY,
        Age: *mut SAFEARRAY,
        LoadType: *mut SAFEARRAY,
        LoadName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetStageData_1(
        Name: BSTR,
        Stage: i32,
        NumberOperations: i32,
        operation: *mut SAFEARRAY,
        ObjectType: *mut SAFEARRAY,
        ObjectName: *mut SAFEARRAY,
        Age: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        MyName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetStageDefinitions(
        Name: BSTR,
        NumberStages: i32,
        Duration: *mut SAFEARRAY,
        Comment: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetStageDefinitions_1(
        Name: BSTR,
        NumberStages: i32,
        Duration: *mut SAFEARRAY,
        Output: *mut SAFEARRAY,
        OutputName: *mut SAFEARRAY,
        Comment: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTargetForceParameters(
        Name: BSTR,
        TolConvF: f64,
        MaxIter: i32,
        AccelFact: f64,
        NoStop: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMassSource(
        Name: BSTR,
        mSource: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMassSource(
        Name: BSTR,
        mSource: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetStageData_2(
        Name: BSTR,
        Stage: *mut i32,
        NumberOperations: *mut i32,
        operation: *mut SAFEARRAY,
        ObjectType: *mut SAFEARRAY,
        ObjectName: *mut SAFEARRAY,
        Age: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        MyName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetStageDefinitions_2(
        Name: BSTR,
        NumberStages: *mut i32,
        Duration: *mut SAFEARRAY,
        Output: *mut SAFEARRAY,
        OutputName: *mut SAFEARRAY,
        Comment: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetStageData_2(
        Name: BSTR,
        Stage: i32,
        NumberOperations: i32,
        operation: *mut SAFEARRAY,
        ObjectType: *mut SAFEARRAY,
        ObjectName: *mut SAFEARRAY,
        Age: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        MyName: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetStageDefinitions_2(
        Name: BSTR,
        NumberStages: i32,
        Duration: *mut SAFEARRAY,
        Output: *mut SAFEARRAY,
        OutputName: *mut SAFEARRAY,
        Comment: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x2c074d0a, 0x041a, 0x4a19, 0xa0, 0x68, 0x0f, 0x94, 0x7d, 0xe8, 0x90, 0x54)]
interface cLoadCases(cLoadCasesVtbl): IDispatch(IDispatchVtbl) {
    fn get_Buckling(
        pRetVal: *mut *mut cCaseBuckling,
    ) -> HRESULT,
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        CaseType: eLoadCaseType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_DirHistLinear(
        pRetVal: *mut *mut cCaseDirectHistoryLinear,
    ) -> HRESULT,
    fn get_DirHistNonlinear(
        pRetVal: *mut *mut cCaseDirectHistoryNonlinear,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        CaseType: eLoadCaseType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI_1(
        Name: BSTR,
        CaseType: *mut eLoadCaseType,
        SubType: *mut i32,
        DesignType: *mut eLoadPatternType,
        DesignTypeOption: *mut i32,
        Auto: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_HyperStatic(
        pRetVal: *mut *mut cCaseHyperStatic,
    ) -> HRESULT,
    fn get_ModalEigen(
        pRetVal: *mut *mut cCaseModalEigen,
    ) -> HRESULT,
    fn get_ModalRitz(
        pRetVal: *mut *mut cCaseModalRitz,
    ) -> HRESULT,
    fn get_ModHistLinear(
        pRetVal: *mut *mut cCaseModalHistoryLinear,
    ) -> HRESULT,
    fn get_ModHistNonlinear(
        pRetVal: *mut *mut cCaseModalHistoryNonlinear,
    ) -> HRESULT,
    fn get_ResponseSpectrum(
        pRetVal: *mut *mut cCaseResponseSpectrum,
    ) -> HRESULT,
    fn SetDesignType(
        Name: BSTR,
        DesignTypeOption: i32,
        DesignType: eLoadPatternType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_StaticLinear(
        pRetVal: *mut *mut cCaseStaticLinear,
    ) -> HRESULT,
    fn get_StaticNonlinear(
        pRetVal: *mut *mut cCaseStaticNonlinear,
    ) -> HRESULT,
    fn get_StaticNonlinearStaged(
        pRetVal: *mut *mut cCaseStaticNonlinearStaged,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        CaseType: *mut eLoadCaseType,
        SubType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x362839c9, 0x6ee2, 0x45d5, 0x80, 0x88, 0xe5, 0xff, 0x38, 0x88, 0xcc, 0xa6)]
interface cAutoSeismic(cAutoSeismicVtbl): IDispatch(IDispatchVtbl) {
    fn GetIBC2006(
        Name: BSTR,
        DirFlag: *mut i32,
        Eccen: *mut f64,
        PeriodFlag: *mut i32,
        CtType: *mut i32,
        UserT: *mut f64,
        UserZ: *mut VARIANT_BOOL,
        TopZ: *mut f64,
        BottomZ: *mut f64,
        R: *mut f64,
        Omega: *mut f64,
        Cd: *mut f64,
        I: *mut f64,
        IBC2006Option: *mut i32,
        Latitude: *mut f64,
        Longitude: *mut f64,
        ZipCode: *mut BSTR,
        Ss: *mut f64,
        S1: *mut f64,
        Tl: *mut f64,
        SiteClass: *mut i32,
        Fa: *mut f64,
        Fv: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetIBC2006(
        Name: BSTR,
        DirFlag: i32,
        Eccen: f64,
        PeriodFlag: i32,
        CtType: i32,
        UserT: f64,
        UserZ: VARIANT_BOOL,
        TopZ: f64,
        BottomZ: f64,
        R: f64,
        Omega: f64,
        Cd: f64,
        I: f64,
        IBC2006Option: i32,
        Latitude: f64,
        Longitude: f64,
        ZipCode: BSTR,
        Ss: f64,
        S1: f64,
        Tl: f64,
        SiteClass: i32,
        Fa: f64,
        Fv: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetASCE716(
        Name: BSTR,
        nDir: *mut SAFEARRAY,
        Eccen: *mut f64,
        PeriodFlag: *mut i32,
        CtType: *mut i32,
        UserT: *mut f64,
        UserZ: *mut VARIANT_BOOL,
        TopZ: *mut f64,
        BottomZ: *mut f64,
        R: *mut f64,
        Omega: *mut f64,
        Cd: *mut f64,
        I: *mut f64,
        Ss: *mut f64,
        S1: *mut f64,
        Tl: *mut f64,
        SiteClass: *mut i32,
        Fa: *mut f64,
        Fv: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetASCE716(
        Name: BSTR,
        nDir: *mut SAFEARRAY,
        Eccen: f64,
        PeriodFlag: i32,
        CtType: i32,
        UserT: f64,
        UserZ: VARIANT_BOOL,
        TopZ: f64,
        BottomZ: f64,
        R: f64,
        Omega: f64,
        Cd: f64,
        I: f64,
        Ss: f64,
        S1: f64,
        Tl: f64,
        SiteClass: i32,
        Fa: f64,
        Fv: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xec6bb373, 0xd00e, 0x4c90, 0xb1, 0x3c, 0x4c, 0x16, 0xef, 0x7d, 0xbb, 0x90)]
interface cAutoWind(cAutoWindVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0x70cd0e19, 0x584f, 0x458d, 0xae, 0x92, 0x82, 0x4f, 0x10, 0x01, 0x9c, 0xa7)]
interface cAutoWindBridge(cAutoWindBridgeVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0x0fa969b9, 0x7001, 0x4341, 0x92, 0x13, 0x15, 0x17, 0x78, 0xd7, 0x92, 0x21)]
interface cLoadPatterns(cLoadPatternsVtbl): IDispatch(IDispatchVtbl) {
    fn Add(
        Name: BSTR,
        MyType: eLoadPatternType,
        SelfWTMultiplier: f64,
        AddAnalysisCase: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_AutoSeismic(
        pRetVal: *mut *mut cAutoSeismic,
    ) -> HRESULT,
    fn get_AutoWind(
        pRetVal: *mut *mut cAutoWind,
    ) -> HRESULT,
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAutoSeismicCode(
        Name: BSTR,
        CodeName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAutoWindCode(
        Name: BSTR,
        CodeName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadType(
        Name: BSTR,
        MyType: *mut eLoadPatternType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSelfWTMultiplier(
        Name: BSTR,
        SelfWTMultiplier: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadType(
        Name: BSTR,
        MyType: eLoadPatternType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSelfWTMultiplier(
        Name: BSTR,
        SelfWTMultiplier: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xd5999846, 0xbc7a, 0x4f31, 0x9d, 0x16, 0x52, 0x6f, 0x5d, 0x5a, 0x69, 0x45)]
interface cPropArea(cPropAreaVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        PropType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        PropType: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetShellDesign(
        Name: BSTR,
        MatProp: *mut BSTR,
        SteelLayoutOption: *mut i32,
        DesignCoverTopDir1: *mut f64,
        DesignCoverTopDir2: *mut f64,
        DesignCoverBotDir1: *mut f64,
        DesignCoverBotDir2: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetShellLayer(
        Name: BSTR,
        NumberLayers: *mut i32,
        LayerName: *mut SAFEARRAY,
        Dist: *mut SAFEARRAY,
        Thickness: *mut SAFEARRAY,
        MatProp: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        MatAng: *mut SAFEARRAY,
        NumIntegrationPts: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetShellLayer_1(
        Name: BSTR,
        NumberLayers: *mut i32,
        LayerName: *mut SAFEARRAY,
        Dist: *mut SAFEARRAY,
        Thickness: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        NumIntegrationPts: *mut SAFEARRAY,
        MatProp: *mut SAFEARRAY,
        MatAng: *mut SAFEARRAY,
        S11Type: *mut SAFEARRAY,
        S22Type: *mut SAFEARRAY,
        S12Type: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetShellLayer_2(
        Name: BSTR,
        NumberLayers: *mut i32,
        LayerName: *mut SAFEARRAY,
        Dist: *mut SAFEARRAY,
        Thickness: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        NumIntegrationPts: *mut SAFEARRAY,
        MatProp: *mut SAFEARRAY,
        MatAng: *mut SAFEARRAY,
        MatBehavior: *mut SAFEARRAY,
        S11Type: *mut SAFEARRAY,
        S22Type: *mut SAFEARRAY,
        S12Type: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        PropType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetShellDesign(
        Name: BSTR,
        MatProp: BSTR,
        SteelLayoutOption: i32,
        DesignCoverTopDir1: f64,
        DesignCoverTopDir2: f64,
        DesignCoverBotDir1: f64,
        DesignCoverBotDir2: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetShellLayer(
        Name: BSTR,
        NumberLayers: i32,
        LayerName: *mut SAFEARRAY,
        Dist: *mut SAFEARRAY,
        Thickness: *mut SAFEARRAY,
        MatProp: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        MatAng: *mut SAFEARRAY,
        NumIntegrationPts: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetShellLayer_1(
        Name: BSTR,
        NumberLayers: *mut i32,
        LayerName: *mut SAFEARRAY,
        Dist: *mut SAFEARRAY,
        Thickness: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        NumIntegrationPts: *mut SAFEARRAY,
        MatProp: *mut SAFEARRAY,
        MatAng: *mut SAFEARRAY,
        S11Type: *mut SAFEARRAY,
        S22Type: *mut SAFEARRAY,
        S12Type: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetShellLayer_2(
        Name: BSTR,
        NumberLayers: *mut i32,
        LayerName: *mut SAFEARRAY,
        Dist: *mut SAFEARRAY,
        Thickness: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        NumIntegrationPts: *mut SAFEARRAY,
        MatProp: *mut SAFEARRAY,
        MatAng: *mut SAFEARRAY,
        MatBehavior: *mut SAFEARRAY,
        S11Type: *mut SAFEARRAY,
        S22Type: *mut SAFEARRAY,
        S12Type: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDeck(
        Name: BSTR,
        DeckType: *mut eDeckType,
        ShellType: *mut eShellType,
        MatProp: *mut BSTR,
        Thickness: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDeckFilled(
        Name: BSTR,
        SlabDepth: *mut f64,
        RibDepth: *mut f64,
        RibWidthTop: *mut f64,
        RibWidthBot: *mut f64,
        RibSpacing: *mut f64,
        ShearThickness: *mut f64,
        UnitWeight: *mut f64,
        ShearStudDia: *mut f64,
        ShearStudHt: *mut f64,
        ShearStudFu: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDeckSolidSlab(
        Name: BSTR,
        SlabDepth: *mut f64,
        ShearStudDia: *mut f64,
        ShearStudHt: *mut f64,
        ShearStudFu: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDeckUnfilled(
        Name: BSTR,
        RibDepth: *mut f64,
        RibWidthTop: *mut f64,
        RibWidthBot: *mut f64,
        RibSpacing: *mut f64,
        ShearThickness: *mut f64,
        UnitWeight: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSlab(
        Name: BSTR,
        SlabType: *mut eSlabType,
        ShellType: *mut eShellType,
        MatProp: *mut BSTR,
        Thickness: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSlabRibbed(
        Name: BSTR,
        OverallDepth: *mut f64,
        SlabThickness: *mut f64,
        StemWidthTop: *mut f64,
        StemWidthBot: *mut f64,
        RibSpacing: *mut f64,
        RibsParallelTo: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSlabWaffle(
        Name: BSTR,
        OverallDepth: *mut f64,
        SlabThickness: *mut f64,
        StemWidthTop: *mut f64,
        StemWidthBot: *mut f64,
        RibSpacingDir1: *mut f64,
        RibSpacingDir2: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetWall(
        Name: BSTR,
        WallPropType: *mut eWallPropType,
        ShellType: *mut eShellType,
        MatProp: *mut BSTR,
        Thickness: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetWallAutoSelectList(
        Name: BSTR,
        AutoSelectList: *mut SAFEARRAY,
        StartingProperty: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDeck(
        Name: BSTR,
        DeckType: eDeckType,
        ShellType: eShellType,
        MatProp: BSTR,
        Thickness: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDeckFilled(
        Name: BSTR,
        SlabDepth: f64,
        RibDepth: f64,
        RibWidthTop: f64,
        RibWidthBot: f64,
        RibSpacing: f64,
        ShearThickness: f64,
        UnitWeight: f64,
        ShearStudDia: f64,
        ShearStudHt: f64,
        ShearStudFu: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDeckSolidSlab(
        Name: BSTR,
        SlabDepth: f64,
        ShearStudDia: f64,
        ShearStudHt: f64,
        ShearStudFu: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDeckUnfilled(
        Name: BSTR,
        RibDepth: f64,
        RibWidthTop: f64,
        RibWidthBot: f64,
        RibSpacing: f64,
        ShearThickness: f64,
        UnitWeight: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSlab(
        Name: BSTR,
        SlabType: eSlabType,
        ShellType: eShellType,
        MatProp: BSTR,
        Thickness: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSlabRibbed(
        Name: BSTR,
        OverallDepth: f64,
        SlabThickness: f64,
        StemWidthTop: f64,
        StemWidthBot: f64,
        RibSpacing: f64,
        RibsParallelTo: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSlabWaffle(
        Name: BSTR,
        OverallDepth: f64,
        SlabThickness: f64,
        StemWidthTop: f64,
        StemWidthBot: f64,
        RibSpacingDir1: f64,
        RibSpacingDir2: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetWall(
        Name: BSTR,
        WallPropType: eWallPropType,
        ShellType: eShellType,
        MatProp: BSTR,
        Thickness: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetWallAutoSelectList(
        Name: BSTR,
        AutoSelectList: SAFEARRAY,
        StartingProperty: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDeck_1(
        Name: BSTR,
        DeckType: *mut eDeckType,
        SlabFillMatProp: *mut BSTR,
        DeckMatProp: *mut BSTR,
        SlabDepth: *mut f64,
        RibDepth: *mut f64,
        RibWidthTop: *mut f64,
        RibWidthBot: *mut f64,
        RibSpacing: *mut f64,
        DeckShearThickness: *mut f64,
        DeckUnitWeight: *mut f64,
        ShearStudDia: *mut f64,
        ShearStudHs: *mut f64,
        ShearStudFu: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDeck_1(
        Name: BSTR,
        DeckType: eDeckType,
        SlabFillMatProp: BSTR,
        DeckMatProp: BSTR,
        SlabDepth: f64,
        RibDepth: f64,
        RibWidthTop: f64,
        RibWidthBot: f64,
        RibSpacing: f64,
        DeckShearThickness: f64,
        DeckUnitWeight: f64,
        ShearStudDia: f64,
        ShearStudHs: f64,
        ShearStudFu: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xce5498cb, 0xf332, 0x4978, 0xb0, 0xa4, 0x44, 0x3d, 0x30, 0x77, 0x8b, 0xa6)]
interface cPropLink(cPropLinkVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        PropType: eLinkPropType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDamper(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        C: *mut SAFEARRAY,
        CExp: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetFrictionIsolator(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Slow: *mut SAFEARRAY,
        Fast: *mut SAFEARRAY,
        Rate: *mut SAFEARRAY,
        Radius: *mut SAFEARRAY,
        Damping: *mut f64,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGap(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Dis: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetHook(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Dis: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLinear(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        KeCoupled: *mut VARIANT_BOOL,
        CeCoupled: *mut VARIANT_BOOL,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMultiLinearElastic(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMultiLinearPlastic(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMultiLinearPoints(
        Name: BSTR,
        DOF: i32,
        NumberPoints: *mut i32,
        F: *mut SAFEARRAY,
        D: *mut SAFEARRAY,
        MyType: *mut i32,
        A1: *mut f64,
        A2: *mut f64,
        B1: *mut f64,
        B2: *mut f64,
        Eta: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        PropType: eLinkPropType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPDelta(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPlasticWen(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Yield: *mut SAFEARRAY,
        Ratio: *mut SAFEARRAY,
        Exp: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRubberIsolator(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Yield: *mut SAFEARRAY,
        Ratio: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpringData(
        Name: BSTR,
        DefinedForThisLength: *mut f64,
        DefinedForThisArea: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTCFrictionIsolator(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Slow: *mut SAFEARRAY,
        Fast: *mut SAFEARRAY,
        Rate: *mut SAFEARRAY,
        Radius: *mut SAFEARRAY,
        SlowT: *mut SAFEARRAY,
        FastT: *mut SAFEARRAY,
        RateT: *mut SAFEARRAY,
        Kt: *mut f64,
        Dis: *mut f64,
        Dist: *mut f64,
        Damping: *mut f64,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        PropType: *mut eLinkPropType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetWeightAndMass(
        Name: BSTR,
        W: *mut f64,
        M: *mut f64,
        R1: *mut f64,
        R2: *mut f64,
        R3: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDamper(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        C: *mut SAFEARRAY,
        CExp: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetFrictionIsolator(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Slow: *mut SAFEARRAY,
        Fast: *mut SAFEARRAY,
        Rate: *mut SAFEARRAY,
        Radius: *mut SAFEARRAY,
        Damping: f64,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGap(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Dis: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetHook(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Dis: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLinear(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        KeCoupled: VARIANT_BOOL,
        CeCoupled: VARIANT_BOOL,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMultiLinearElastic(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMultiLinearPlastic(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMultiLinearPoints(
        Name: BSTR,
        DOF: i32,
        NumberPoints: i32,
        F: *mut SAFEARRAY,
        D: *mut SAFEARRAY,
        MyType: i32,
        A1: f64,
        A2: f64,
        B1: f64,
        B2: f64,
        Eta: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPDelta(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPlasticWen(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Yield: *mut SAFEARRAY,
        Ratio: *mut SAFEARRAY,
        Exp: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetRubberIsolator(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Yield: *mut SAFEARRAY,
        Ratio: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpringData(
        Name: BSTR,
        DefinedForThisLength: f64,
        DefinedForThisArea: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTCFrictionIsolator(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        Slow: *mut SAFEARRAY,
        Fast: *mut SAFEARRAY,
        Rate: *mut SAFEARRAY,
        Radius: *mut SAFEARRAY,
        SlowT: *mut SAFEARRAY,
        FastT: *mut SAFEARRAY,
        RateT: *mut SAFEARRAY,
        Kt: f64,
        Dis: f64,
        Dist: f64,
        Damping: f64,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetWeightAndMass(
        Name: BSTR,
        W: f64,
        M: f64,
        R1: f64,
        R2: f64,
        R3: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDamperBilinear(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        C: *mut SAFEARRAY,
        CY: *mut SAFEARRAY,
        ForceLimit: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDamperFrictionSpring(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        K1: *mut SAFEARRAY,
        K2: *mut SAFEARRAY,
        u0: *mut SAFEARRAY,
        us: *mut SAFEARRAY,
        Direction: *mut SAFEARRAY,
        DJ2: *mut f64,
        DJ3: *mut f64,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDamperBilinear(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        C: *mut SAFEARRAY,
        CY: *mut SAFEARRAY,
        ForceLimit: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDamperFrictionSpring(
        Name: BSTR,
        DOF: *mut SAFEARRAY,
        Fixed: *mut SAFEARRAY,
        Nonlinear: *mut SAFEARRAY,
        Ke: *mut SAFEARRAY,
        Ce: *mut SAFEARRAY,
        K: *mut SAFEARRAY,
        K1: *mut SAFEARRAY,
        K2: *mut SAFEARRAY,
        u0: *mut SAFEARRAY,
        us: *mut SAFEARRAY,
        Direction: *mut SAFEARRAY,
        DJ2: f64,
        DJ3: f64,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAcceptanceCriteria(
        Name: BSTR,
        AcceptanceType: *mut i32,
        Symmetric: *mut VARIANT_BOOL,
        Active: *mut SAFEARRAY,
        IOPos: *mut SAFEARRAY,
        LSPos: *mut SAFEARRAY,
        CPPos: *mut SAFEARRAY,
        IONeg: *mut SAFEARRAY,
        LSNeg: *mut SAFEARRAY,
        CPNeg: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetAcceptanceCriteria(
        Name: BSTR,
        AcceptanceType: i32,
        Symmetric: VARIANT_BOOL,
        Active: *mut SAFEARRAY,
        IOPos: *mut SAFEARRAY,
        LSPos: *mut SAFEARRAY,
        CPPos: *mut SAFEARRAY,
        IONeg: *mut SAFEARRAY,
        LSNeg: *mut SAFEARRAY,
        CPNeg: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x75b06d0e, 0xa03b, 0x4e17, 0x98, 0xd5, 0x02, 0xd0, 0xc5, 0xf9, 0x06, 0x38)]
interface cPropRebar(cPropRebarVtbl): IDispatch(IDispatchVtbl) {
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarProps(
        Name: BSTR,
        Area: *mut f64,
        Diameter: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarPropsWithGUID(
        Name: BSTR,
        Area: *mut f64,
        Diameter: *mut f64,
        MyGUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameListWithData(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        Areas: *mut SAFEARRAY,
        Diameters: *mut SAFEARRAY,
        MyGUID: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x6c67f913, 0x98c9, 0x4236, 0xac, 0xe6, 0x94, 0x1d, 0x6b, 0x65, 0x71, 0xf6)]
interface cPropTendon(cPropTendonVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetProp(
        Name: BSTR,
        MatProp: *mut BSTR,
        ModelingOption: *mut i32,
        Area: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetProp(
        Name: BSTR,
        MatProp: BSTR,
        ModelingOption: i32,
        Area: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x88aafe1e, 0x4f8c, 0x43ee, 0xb0, 0xbd, 0x3c, 0xd2, 0x8e, 0x64, 0xd7, 0xf8)]
interface cPropFrame(cPropFrameVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        PropType: eFramePropType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAngle(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAutoSelectSteel(
        Name: BSTR,
        NumberItems: *mut i32,
        SectName: *mut SAFEARRAY,
        AutoStartSection: *mut BSTR,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetChannel(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCircle(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCoverPlatedI(
        Name: BSTR,
        SectName: *mut BSTR,
        FyTopFlange: *mut f64,
        FyWeb: *mut f64,
        FyBotFlange: *mut f64,
        Tc: *mut f64,
        Bc: *mut f64,
        MatPropTop: *mut BSTR,
        Tcb: *mut f64,
        Bcb: *mut f64,
        MatPropBot: *mut BSTR,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDblAngle(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Dis: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDblChannel(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Dis: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGeneral(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Area: *mut f64,
        As2: *mut f64,
        As3: *mut f64,
        Torsion: *mut f64,
        I22: *mut f64,
        I33: *mut f64,
        S22: *mut f64,
        S33: *mut f64,
        Z22: *mut f64,
        Z33: *mut f64,
        R22: *mut f64,
        R33: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetISection(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        T2b: *mut f64,
        Tfb: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameInPropFile(
        Name: BSTR,
        NameInFile: *mut BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        PropType: *mut eFramePropType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        PropType: eFramePropType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNonPrismatic(
        Name: BSTR,
        NumberItems: *mut i32,
        StartSec: *mut SAFEARRAY,
        EndSec: *mut SAFEARRAY,
        MyLength: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        EI33: *mut SAFEARRAY,
        EI22: *mut SAFEARRAY,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPipe(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        Tw: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPropFileNameList(
        FileName: BSTR,
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        MyPropType: *mut SAFEARRAY,
        PropType: eFramePropType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarBeam(
        Name: BSTR,
        MatPropLong: *mut BSTR,
        MatPropConfine: *mut BSTR,
        CoverTop: *mut f64,
        CoverBot: *mut f64,
        TopLeftArea: *mut f64,
        TopRightArea: *mut f64,
        BotLeftArea: *mut f64,
        BotRightArea: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarColumn(
        Name: BSTR,
        MatPropLong: *mut BSTR,
        MatPropConfine: *mut BSTR,
        Pattern: *mut i32,
        ConfineType: *mut i32,
        Cover: *mut f64,
        NumberCBars: *mut i32,
        NumberR3Bars: *mut i32,
        NumberR2Bars: *mut i32,
        RebarSize: *mut BSTR,
        TieSize: *mut BSTR,
        TieSpacingLongit: *mut f64,
        Number2DirTieBars: *mut i32,
        Number3DirTieBars: *mut i32,
        ToBeDesigned: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRectangle(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSectProps(
        Name: BSTR,
        Area: *mut f64,
        As2: *mut f64,
        As3: *mut f64,
        Torsion: *mut f64,
        I22: *mut f64,
        I33: *mut f64,
        S22: *mut f64,
        S33: *mut f64,
        Z22: *mut f64,
        Z33: *mut f64,
        R22: *mut f64,
        R33: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTee(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTube(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        PropType: *mut eFramePropType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeRebar(
        Name: BSTR,
        MyType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ImportProp(
        Name: BSTR,
        MatProp: BSTR,
        FileName: BSTR,
        PropName: BSTR,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_SDShape(
        pRetVal: *mut *mut cPropFrameSDShape,
    ) -> HRESULT,
    fn SetAngle(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetAutoSelectSteel(
        Name: BSTR,
        NumberItems: i32,
        SectName: *mut SAFEARRAY,
        AutoStartSection: BSTR,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetChannel(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCircle(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCoverPlatedI(
        Name: BSTR,
        SectName: BSTR,
        FyTopFlange: f64,
        FyWeb: f64,
        FyBotFlange: f64,
        Tc: f64,
        Bc: f64,
        MatPropTop: BSTR,
        Tcb: f64,
        Bcb: f64,
        MatPropBot: BSTR,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDblAngle(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        Dis: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDblChannel(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        Dis: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGeneral(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Area: f64,
        As2: f64,
        As3: f64,
        Torsion: f64,
        I22: f64,
        I33: f64,
        S22: f64,
        S33: f64,
        Z22: f64,
        Z33: f64,
        R22: f64,
        R33: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetISection(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        T2b: f64,
        Tfb: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetNonPrismatic(
        Name: BSTR,
        NumberItems: i32,
        StartSec: *mut SAFEARRAY,
        EndSec: *mut SAFEARRAY,
        MyLength: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        EI33: *mut SAFEARRAY,
        EI22: *mut SAFEARRAY,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPipe(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        Tw: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetRebarBeam(
        Name: BSTR,
        MatPropLong: BSTR,
        MatPropConfine: BSTR,
        CoverTop: f64,
        CoverBot: f64,
        TopLeftArea: f64,
        TopRightArea: f64,
        BotLeftArea: f64,
        BotRightArea: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetRebarColumn(
        Name: BSTR,
        MatPropLong: BSTR,
        MatPropConfine: BSTR,
        Pattern: i32,
        ConfineType: i32,
        Cover: f64,
        NumberCBars: i32,
        NumberR3Bars: i32,
        NumberR2Bars: i32,
        RebarSize: BSTR,
        TieSize: BSTR,
        TieSpacingLongit: f64,
        Number2DirTieBars: i32,
        Number3DirTieBars: i32,
        ToBeDesigned: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetRectangle(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTee(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTube(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSDSection(
        Name: BSTR,
        MatProp: *mut BSTR,
        NumberItems: *mut i32,
        ShapeName: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        DesignType: *mut i32,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSDSection(
        Name: BSTR,
        MatProp: BSTR,
        DesignType: i32,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColdC(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Thickness: *mut f64,
        Radius: *mut f64,
        LipDepth: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColdHat(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Thickness: *mut f64,
        Radius: *mut f64,
        LipDepth: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColdZ(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Thickness: *mut f64,
        Radius: *mut f64,
        LipDepth: *mut f64,
        LipAngle: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPrecastI(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        B: *mut SAFEARRAY,
        D: *mut SAFEARRAY,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetColdC(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Thickness: f64,
        Radius: f64,
        LipDepth: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetColdHat(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Thickness: f64,
        Radius: f64,
        LipDepth: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetColdZ(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Thickness: f64,
        Radius: f64,
        LipDepth: f64,
        LipAngle: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPrecastI(
        Name: BSTR,
        MatProp: BSTR,
        B: *mut SAFEARRAY,
        D: *mut SAFEARRAY,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMaterial(
        Name: BSTR,
        MatProp: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMaterial(
        Name: BSTR,
        MatProp: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTrapezoidal(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        T2b: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTrapezoidal(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        T2b: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTube_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Radius: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTube_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        Radius: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAngle_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        FilletRadius: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetAngle_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        FilletRadius: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetChannel_2(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        FilletRadius: *mut f64,
        MirrorAbout2: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetChannel_2(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        FilletRadius: f64,
        MirrorAbout2: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDblAngle_2(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Dis: *mut f64,
        FilletRadius: *mut f64,
        MirrorAbout3: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDblAngle_2(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        Dis: f64,
        FilletRadius: f64,
        MirrorAbout3: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDblChannel_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Dis: *mut f64,
        FilletRadius: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDblChannel_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        Dis: f64,
        FilletRadius: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetISection_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        T2b: *mut f64,
        Tfb: *mut f64,
        FilletRadius: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetISection_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        T2b: f64,
        Tfb: f64,
        FilletRadius: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTee_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        FilletRadius: *mut f64,
        MirrorAbout3: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTee_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        FilletRadius: f64,
        MirrorAbout3: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConcreteL(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        TwC: *mut f64,
        TwT: *mut f64,
        MirrorAbout2: *mut VARIANT_BOOL,
        MirrorAbout3: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConcreteTee(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        TwF: *mut f64,
        TwT: *mut f64,
        MirrorAbout3: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPlate(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRod(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSteelAngle(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        R: *mut f64,
        MirrorAbout2: *mut VARIANT_BOOL,
        MirrorAbout3: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSteelTee(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        R: *mut f64,
        MirrorAbout3: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetConcreteL(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        TwC: f64,
        TwT: f64,
        MirrorAbout2: VARIANT_BOOL,
        MirrorAbout3: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetConcreteTee(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        TwF: f64,
        TwT: f64,
        MirrorAbout3: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPlate(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetRod(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSteelAngle(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        R: f64,
        MirrorAbout2: VARIANT_BOOL,
        MirrorAbout3: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSteelTee(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        R: f64,
        MirrorAbout3: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAllFrameProperties(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        PropType: *mut SAFEARRAY,
        T3: *mut SAFEARRAY,
        T2: *mut SAFEARRAY,
        Tf: *mut SAFEARRAY,
        Tw: *mut SAFEARRAY,
        T2b: *mut SAFEARRAY,
        Tfb: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAllFrameProperties_2(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        PropType: *mut SAFEARRAY,
        T3: *mut SAFEARRAY,
        T2: *mut SAFEARRAY,
        Tf: *mut SAFEARRAY,
        Tw: *mut SAFEARRAY,
        T2b: *mut SAFEARRAY,
        Tfb: *mut SAFEARRAY,
        Area: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarColumn_1(
        Name: BSTR,
        MatPropLong: *mut BSTR,
        MatPropConfine: *mut BSTR,
        Pattern: *mut i32,
        ConfineType: *mut i32,
        Cover: *mut f64,
        NumberCBars: *mut i32,
        NumberR3Bars: *mut i32,
        NumberR2Bars: *mut i32,
        RebarSize: *mut BSTR,
        TieSize: *mut BSTR,
        TieSpacingLongit: *mut f64,
        Number2DirTieBars: *mut i32,
        Number3DirTieBars: *mut i32,
        ToBeDesigned: *mut VARIANT_BOOL,
        LongitCornerRebarSize: *mut BSTR,
        LongitRebarArea: *mut f64,
        LongitCornerRebarArea: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConcreteBox(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetConcreteBox(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConcreteCross(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetConcreteCross(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConcretePipe(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        Diameter: *mut f64,
        Tw: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetConcretePipe(
        Name: BSTR,
        MatProp: BSTR,
        Diameter: f64,
        Tw: f64,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDblAngle_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Dis: *mut f64,
        MirrorAbout3: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDblAngle_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        Dis: f64,
        MirrorAbout3: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetChannel_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        MirrorAbout2: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetChannel_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Tf: f64,
        Tw: f64,
        MirrorAbout2: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColdC_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Thickness: *mut f64,
        Radius: *mut f64,
        LipDepth: *mut f64,
        MirrorAbout2: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetColdC_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Thickness: f64,
        Radius: f64,
        LipDepth: f64,
        MirrorAbout2: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColdHat_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Thickness: *mut f64,
        Radius: *mut f64,
        LipDepth: *mut f64,
        MirrorAbout2: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetColdHat_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Thickness: f64,
        Radius: f64,
        LipDepth: f64,
        MirrorAbout2: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColdZ_1(
        Name: BSTR,
        FileName: *mut BSTR,
        MatProp: *mut BSTR,
        T3: *mut f64,
        T2: *mut f64,
        Thickness: *mut f64,
        Radius: *mut f64,
        LipDepth: *mut f64,
        LipAngle: *mut f64,
        MirrorAbout2: *mut VARIANT_BOOL,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetColdZ_1(
        Name: BSTR,
        MatProp: BSTR,
        T3: f64,
        T2: f64,
        Thickness: f64,
        Radius: f64,
        LipDepth: f64,
        LipAngle: f64,
        MirrorAbout2: VARIANT_BOOL,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x38fd28c3, 0xb05b, 0x43f0, 0xa3, 0x14, 0x5d, 0x06, 0xd2, 0x26, 0x88, 0xc7)]
interface cPropFrameSDShape(cPropFrameSDShapeVtbl): IDispatch(IDispatchVtbl) {
    fn GetAngle(
        Name: BSTR,
        ShapeName: BSTR,
        MatProp: *mut BSTR,
        PropName: *mut BSTR,
        color: *mut i32,
        XCenter: *mut f64,
        YCenter: *mut f64,
        H: *mut f64,
        Bf: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Rotation: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetISection(
        Name: BSTR,
        ShapeName: BSTR,
        MatProp: *mut BSTR,
        PropName: *mut BSTR,
        color: *mut i32,
        XCenter: *mut f64,
        YCenter: *mut f64,
        H: *mut f64,
        Bf: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Bfb: *mut f64,
        Tfb: *mut f64,
        Rotation: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetReinfCircle(
        Name: BSTR,
        ShapeName: BSTR,
        XCenter: *mut f64,
        YCenter: *mut f64,
        Diameter: *mut f64,
        NumBars: *mut i32,
        Rotation: *mut f64,
        RebarSize: *mut BSTR,
        MatRebar: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetReinfCorner(
        Name: BSTR,
        ShapeName: BSTR,
        NumberItems: *mut i32,
        PointNum: *mut SAFEARRAY,
        RebarSize: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetReinfEdge(
        Name: BSTR,
        ShapeName: BSTR,
        NumberItems: *mut i32,
        EdgeNum: *mut SAFEARRAY,
        RebarSize: *mut SAFEARRAY,
        Spacing: *mut SAFEARRAY,
        Cover: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetReinfLine(
        Name: BSTR,
        ShapeName: BSTR,
        X1: *mut f64,
        Y1: *mut f64,
        X2: *mut f64,
        Y2: *mut f64,
        Spacing: *mut f64,
        RebarSize: *mut BSTR,
        EndBars: *mut VARIANT_BOOL,
        MatRebar: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetReinfRectangular(
        Name: BSTR,
        ShapeName: BSTR,
        XCenter: *mut f64,
        YCenter: *mut f64,
        H: *mut f64,
        W: *mut f64,
        Rotation: *mut f64,
        MatRebar: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetReinfSingle(
        Name: BSTR,
        ShapeName: BSTR,
        XCenter: *mut f64,
        YCenter: *mut f64,
        RebarSize: *mut BSTR,
        MatRebar: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSolidCircle(
        Name: BSTR,
        ShapeName: BSTR,
        MatProp: *mut BSTR,
        SSOverwrite: *mut BSTR,
        color: *mut i32,
        XCenter: *mut f64,
        YCenter: *mut f64,
        Diameter: *mut f64,
        Reinf: *mut VARIANT_BOOL,
        NumberBars: *mut i32,
        Rotation: *mut f64,
        Cover: *mut f64,
        RebarSize: *mut BSTR,
        MatRebar: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSolidRect(
        Name: BSTR,
        ShapeName: BSTR,
        MatProp: *mut BSTR,
        SSOverwrite: *mut BSTR,
        color: *mut i32,
        XCenter: *mut f64,
        YCenter: *mut f64,
        H: *mut f64,
        W: *mut f64,
        Rotation: *mut f64,
        Reinf: *mut VARIANT_BOOL,
        MatRebar: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTee(
        Name: BSTR,
        ShapeName: BSTR,
        MatProp: *mut BSTR,
        PropName: *mut BSTR,
        color: *mut i32,
        XCenter: *mut f64,
        YCenter: *mut f64,
        H: *mut f64,
        Bf: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Rotation: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConcreteL(
        Name: BSTR,
        ShapeName: BSTR,
        MatProp: *mut BSTR,
        PropName: *mut BSTR,
        color: *mut i32,
        XCenter: *mut f64,
        YCenter: *mut f64,
        H: *mut f64,
        Bf: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Rotation: *mut f64,
        MirrorAbout2: *mut VARIANT_BOOL,
        MirrorAbout3: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConcreteTee(
        Name: BSTR,
        ShapeName: BSTR,
        MatProp: *mut BSTR,
        PropName: *mut BSTR,
        color: *mut i32,
        XCenter: *mut f64,
        YCenter: *mut f64,
        H: *mut f64,
        Bf: *mut f64,
        Tf: *mut f64,
        Tw: *mut f64,
        Rotation: *mut f64,
        MirrorAbout3: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x47ec79c1, 0xae4a, 0x4684, 0xbf, 0x82, 0x2c, 0xd5, 0xdc, 0x81, 0x73, 0x41)]
interface cPropMaterial(cPropMaterialVtbl): IDispatch(IDispatchVtbl) {
    fn AddMaterial(
        Name: *mut BSTR,
        MatType: eMatType,
        Region: BSTR,
        Standard: BSTR,
        Grade: BSTR,
        UserName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        MatType: eMatType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDamping(
        Name: BSTR,
        ModalRatio: *mut f64,
        ViscousMassCoeff: *mut f64,
        ViscousStiffCoeff: *mut f64,
        HystereticMassCoeff: *mut f64,
        HystereticStiffCoeff: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMassSource(
        MyOption: *mut i32,
        NumberLoads: *mut i32,
        LoadPat: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMaterial(
        Name: BSTR,
        MatType: *mut eMatType,
        color: *mut i32,
        notes: *mut BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMPAnisotropic(
        Name: BSTR,
        E: *mut SAFEARRAY,
        U: *mut SAFEARRAY,
        A: *mut SAFEARRAY,
        G: *mut SAFEARRAY,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMPIsotropic(
        Name: BSTR,
        E: *mut f64,
        U: *mut f64,
        A: *mut f64,
        G: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMPOrthotropic(
        Name: BSTR,
        E: *mut SAFEARRAY,
        U: *mut SAFEARRAY,
        A: *mut SAFEARRAY,
        G: *mut SAFEARRAY,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMPUniaxial(
        Name: BSTR,
        E: *mut f64,
        A: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        MatType: eMatType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOConcrete(
        Name: BSTR,
        Fc: *mut f64,
        IsLightweight: *mut VARIANT_BOOL,
        FcsFactor: *mut f64,
        SSType: *mut i32,
        SSHysType: *mut i32,
        StrainAtFc: *mut f64,
        StrainUltimate: *mut f64,
        FrictionAngle: *mut f64,
        DilatationalAngle: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOConcrete_1(
        Name: BSTR,
        Fc: *mut f64,
        IsLightweight: *mut VARIANT_BOOL,
        FcsFactor: *mut f64,
        SSType: *mut i32,
        SSHysType: *mut i32,
        StrainAtFc: *mut f64,
        StrainUltimate: *mut f64,
        FinalSlope: *mut f64,
        FrictionAngle: *mut f64,
        DilatationalAngle: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetONoDesign(
        Name: BSTR,
        FrictionAngle: *mut f64,
        DilatationalAngle: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetORebar(
        Name: BSTR,
        FY: *mut f64,
        Fu: *mut f64,
        EFy: *mut f64,
        EFu: *mut f64,
        SSType: *mut i32,
        SSHysType: *mut i32,
        StrainAtHardening: *mut f64,
        StrainUltimate: *mut f64,
        UseCaltransSSDefaults: *mut VARIANT_BOOL,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetORebar_1(
        Name: BSTR,
        FY: *mut f64,
        Fu: *mut f64,
        EFy: *mut f64,
        EFu: *mut f64,
        SSType: *mut i32,
        SSHysType: *mut i32,
        StrainAtHardening: *mut f64,
        StrainUltimate: *mut f64,
        FinalSlope: *mut f64,
        UseCaltransSSDefaults: *mut VARIANT_BOOL,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOSteel(
        Name: BSTR,
        FY: *mut f64,
        Fu: *mut f64,
        EFy: *mut f64,
        EFu: *mut f64,
        SSType: *mut i32,
        SSHysType: *mut i32,
        StrainAtHardening: *mut f64,
        StrainAtMaxStress: *mut f64,
        StrainAtRupture: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOSteel_1(
        Name: BSTR,
        FY: *mut f64,
        Fu: *mut f64,
        EFy: *mut f64,
        EFu: *mut f64,
        SSType: *mut i32,
        SSHysType: *mut i32,
        StrainAtHardening: *mut f64,
        StrainAtMaxStress: *mut f64,
        StrainAtRupture: *mut f64,
        FinalSlope: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOTendon(
        Name: BSTR,
        FY: *mut f64,
        Fu: *mut f64,
        SSType: *mut i32,
        SSHysType: *mut i32,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOTendon_1(
        Name: BSTR,
        FY: *mut f64,
        Fu: *mut f64,
        SSType: *mut i32,
        SSHysType: *mut i32,
        FinalSlope: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSSCurve(
        Name: BSTR,
        NumberPoints: *mut i32,
        PointID: *mut SAFEARRAY,
        Strain: *mut SAFEARRAY,
        Stress: *mut SAFEARRAY,
        SectName: BSTR,
        RebarArea: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTemp(
        Name: BSTR,
        NumberItems: *mut i32,
        Temp: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        MatType: *mut eMatType,
        SymType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetWeightAndMass(
        Name: BSTR,
        W: *mut f64,
        M: *mut f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDamping(
        Name: BSTR,
        ModalRatio: f64,
        ViscousMassCoeff: f64,
        ViscousStiffCoeff: f64,
        HystereticMassCoeff: f64,
        HystereticStiffCoeff: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMassSource(
        MyOption: i32,
        NumberLoads: i32,
        LoadPat: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMaterial(
        Name: BSTR,
        MatType: eMatType,
        color: i32,
        notes: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMPAnisotropic(
        Name: BSTR,
        E: *mut SAFEARRAY,
        U: *mut SAFEARRAY,
        A: *mut SAFEARRAY,
        G: *mut SAFEARRAY,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMPIsotropic(
        Name: BSTR,
        E: f64,
        U: f64,
        A: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMPOrthotropic(
        Name: BSTR,
        E: *mut SAFEARRAY,
        U: *mut SAFEARRAY,
        A: *mut SAFEARRAY,
        G: *mut SAFEARRAY,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMPUniaxial(
        Name: BSTR,
        E: f64,
        A: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOConcrete(
        Name: BSTR,
        Fc: f64,
        IsLightweight: VARIANT_BOOL,
        FcsFactor: f64,
        SSType: i32,
        SSHysType: i32,
        StrainAtFc: f64,
        StrainUltimate: f64,
        FrictionAngle: f64,
        DilatationalAngle: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOConcrete_1(
        Name: BSTR,
        Fc: f64,
        IsLightweight: VARIANT_BOOL,
        FcsFactor: f64,
        SSType: i32,
        SSHysType: i32,
        StrainAtFc: f64,
        StrainUltimate: f64,
        FinalSlope: f64,
        FrictionAngle: f64,
        DilatationalAngle: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetONoDesign(
        Name: BSTR,
        FrictionAngle: f64,
        DilatationalAngle: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetORebar(
        Name: BSTR,
        FY: f64,
        Fu: f64,
        EFy: f64,
        EFu: f64,
        SSType: i32,
        SSHysType: i32,
        StrainAtHardening: f64,
        StrainUltimate: f64,
        UseCaltransSSDefaults: VARIANT_BOOL,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetORebar_1(
        Name: BSTR,
        FY: f64,
        Fu: f64,
        EFy: f64,
        EFu: f64,
        SSType: i32,
        SSHysType: i32,
        StrainAtHardening: f64,
        StrainUltimate: f64,
        FinalSlope: f64,
        UseCaltransSSDefaults: VARIANT_BOOL,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOSteel(
        Name: BSTR,
        FY: f64,
        Fu: f64,
        EFy: f64,
        EFu: f64,
        SSType: i32,
        SSHysType: i32,
        StrainAtHardening: f64,
        StrainAtMaxStress: f64,
        StrainAtRupture: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOSteel_1(
        Name: BSTR,
        FY: f64,
        Fu: f64,
        EFy: f64,
        EFu: f64,
        SSType: i32,
        SSHysType: i32,
        StrainAtHardening: f64,
        StrainAtMaxStress: f64,
        StrainAtRupture: f64,
        FinalSlope: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOTendon(
        Name: BSTR,
        FY: f64,
        Fu: f64,
        SSType: i32,
        SSHysType: i32,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOTendon_1(
        Name: BSTR,
        FY: f64,
        Fu: f64,
        SSType: i32,
        SSHysType: i32,
        FinalSlope: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSSCurve(
        Name: BSTR,
        NumberPoints: i32,
        PointID: *mut SAFEARRAY,
        Strain: *mut SAFEARRAY,
        Stress: *mut SAFEARRAY,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTemp(
        Name: BSTR,
        NumberItems: i32,
        Temp: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetWeightAndMass(
        Name: BSTR,
        MyOption: i32,
        Value: f64,
        Temp: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_TimeDep(
        pRetVal: *mut *mut cPropMaterialTD,
    ) -> HRESULT,
    fn GetMassSource_1(
        IncludeElements: *mut VARIANT_BOOL,
        IncludeAddedMass: *mut VARIANT_BOOL,
        IncludeLoads: *mut VARIANT_BOOL,
        NumberLoads: *mut i32,
        LoadPat: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMassSource_1(
        IncludeElements: *mut VARIANT_BOOL,
        IncludeAddedMass: *mut VARIANT_BOOL,
        IncludeLoads: *mut VARIANT_BOOL,
        NumberLoads: i32,
        LoadPat: *mut SAFEARRAY,
        SF: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x61da0018, 0x41bf, 0x4d20, 0x97, 0x7e, 0x83, 0xeb, 0xe8, 0xe5, 0xad, 0x21)]
interface cPropMaterialTD(cPropMaterialTDVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0x47bce5be, 0x8de6, 0x4171, 0xb5, 0x93, 0x2e, 0x56, 0x2e, 0xdb, 0x7b, 0x45)]
interface cPropAreaSpring(cPropAreaSpringVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAreaSpringProp(
        Name: BSTR,
        U1: *mut f64,
        U2: *mut f64,
        U3: *mut f64,
        NonlinearOption3: *mut i32,
        SpringOption: *mut i32,
        SoilProfile: *mut BSTR,
        EndLengthRatio: *mut f64,
        Period: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        iGUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetAreaSpringProp(
        Name: BSTR,
        U1: f64,
        U2: f64,
        U3: f64,
        NonlinearOption3: i32,
        SpringOption: i32,
        SoilProfile: BSTR,
        EndLengthRatio: f64,
        Period: f64,
        color: i32,
        notes: BSTR,
        iGUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xd2fef8a2, 0x57aa, 0x46cf, 0xb2, 0x87, 0xf4, 0x5e, 0xb0, 0x83, 0x2b, 0x3a)]
interface cPropLineSpring(cPropLineSpringVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLineSpringProp(
        Name: BSTR,
        U1: *mut f64,
        U2: *mut f64,
        U3: *mut f64,
        R1: *mut f64,
        NonlinearOption2: *mut i32,
        NonlinearOption3: *mut i32,
        color: *mut i32,
        notes: *mut BSTR,
        iGUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLineSpringProp(
        Name: BSTR,
        U1: f64,
        U2: f64,
        U3: f64,
        R1: f64,
        NonlinearOption2: i32,
        NonlinearOption3: i32,
        color: i32,
        notes: BSTR,
        iGUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x3e4a7586, 0xd43f, 0x4ce5, 0x8b, 0xe3, 0x42, 0x73, 0x39, 0x3f, 0xc5, 0x42)]
interface cPropPointSpring(cPropPointSpringVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLinks(
        Name: BSTR,
        NumberLinks: *mut i32,
        LinkNames: *mut SAFEARRAY,
        LinkAxialDirs: *mut SAFEARRAY,
        LinkAngles: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPointSpringProp(
        Name: BSTR,
        SpringOption: *mut i32,
        K: *mut SAFEARRAY,
        CSys: *mut BSTR,
        SoilProfile: *mut BSTR,
        Footing: *mut BSTR,
        Period: *mut f64,
        color: *mut i32,
        notes: *mut BSTR,
        iGUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLinks(
        Name: BSTR,
        NumberLinks: i32,
        LinkNames: *mut SAFEARRAY,
        LinkAxialDirs: *mut SAFEARRAY,
        LinkAngles: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPointSpringProp(
        Name: BSTR,
        SpringOption: i32,
        K: *mut SAFEARRAY,
        CSys: BSTR,
        SoilProfile: BSTR,
        Footing: BSTR,
        Period: f64,
        color: i32,
        notes: BSTR,
        iGUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf7469045, 0xda52, 0x414a, 0xb5, 0x43, 0xfd, 0x34, 0xee, 0x6e, 0xc5, 0x4f)]
interface cDesignForces(cDesignForcesVtbl): IDispatch(IDispatchVtbl) {
    fn BeamDesignForces(
        Name: BSTR,
        NumberResults: *mut i32,
        FrameName: *mut SAFEARRAY,
        ComboName: *mut SAFEARRAY,
        Station: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn BraceDesignForces(
        Name: BSTR,
        NumberResults: *mut i32,
        FrameName: *mut SAFEARRAY,
        ComboName: *mut SAFEARRAY,
        Station: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ColumnDesignForces(
        Name: BSTR,
        NumberResults: *mut i32,
        FrameName: *mut SAFEARRAY,
        ComboName: *mut SAFEARRAY,
        Station: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn PierDesignForces(
        InputPierLabel: BSTR,
        InputStoryName: BSTR,
        NumberResults: *mut i32,
        Story: *mut SAFEARRAY,
        PierLabel: *mut SAFEARRAY,
        ComboName: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SpandrelDesignForces(
        InputSpandrelLabel: BSTR,
        InputStoryName: BSTR,
        NumberResults: *mut i32,
        Story: *mut SAFEARRAY,
        SpandrelLabel: *mut SAFEARRAY,
        ComboName: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        P: *mut SAFEARRAY,
        V2: *mut SAFEARRAY,
        V3: *mut SAFEARRAY,
        T: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x965fb3a1, 0x8abf, 0x4b3a, 0x95, 0x18, 0x5e, 0xfa, 0x25, 0x68, 0x16, 0x06)]
interface cDesignResults(cDesignResultsVtbl): IDispatch(IDispatchVtbl) {
    fn get_DesignForces(
        pRetVal: *mut *mut cDesignForces,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xb80fc69c, 0xd3b1, 0x4b01, 0x9e, 0x15, 0xcf, 0x7d, 0x14, 0xdf, 0x8a, 0x38)]
interface cDesignCompositeBeam(cDesignCompositeBeamVtbl): IDispatch(IDispatchVtbl) {
    fn DeleteResults(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCode(
        CodeName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetComboDeflection(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetComboStrength(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignSection(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroup(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetResultsAvailable(
        pRetVal: *mut VARIANT_BOOL,
    ) -> HRESULT,
    fn GetSummaryResults(
        Name: BSTR,
        NumberItems: *mut i32,
        DesignSect: *mut SAFEARRAY,
        BeamFy: *mut SAFEARRAY,
        StudDia: *mut SAFEARRAY,
        StudLayout: *mut SAFEARRAY,
        BeamShored: *mut SAFEARRAY,
        BeamCamber: *mut SAFEARRAY,
        PassFail: *mut SAFEARRAY,
        ReacLeft: *mut SAFEARRAY,
        ReacRt: *mut SAFEARRAY,
        MMaxNeg: *mut SAFEARRAY,
        MMaxPos: *mut SAFEARRAY,
        PCC: *mut SAFEARRAY,
        OverallRatio: *mut SAFEARRAY,
        StudRatio: *mut SAFEARRAY,
        StrPMRat: *mut SAFEARRAY,
        ConstPMRat: *mut SAFEARRAY,
        StrShrRat: *mut SAFEARRAY,
        ConShrRat: *mut SAFEARRAY,
        PCDLDfRat: *mut SAFEARRAY,
        SDLDfRat: *mut SAFEARRAY,
        LLDfRat: *mut SAFEARRAY,
        TotCamDfRat: *mut SAFEARRAY,
        FreqRat: *mut SAFEARRAY,
        MDampRat: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTargetDispl(
        NumberItems: *mut i32,
        LoadCase: *mut SAFEARRAY,
        Point: *mut SAFEARRAY,
        Displ: *mut SAFEARRAY,
        Active: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTargetPeriod(
        NumberItems: *mut i32,
        ModalCase: *mut BSTR,
        Mode: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        Active: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ResetOverwrites(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetAutoSelectNull(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCode(
        CodeName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetComboDeflection(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetComboStrength(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDesignSection(
        Name: BSTR,
        PropName: BSTR,
        LastAnalysis: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroup(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTargetDispl(
        NumberItems: i32,
        LoadCase: *mut SAFEARRAY,
        Point: *mut SAFEARRAY,
        Displ: *mut SAFEARRAY,
        Active: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTargetPeriod(
        NumberItems: i32,
        ModalCase: BSTR,
        Mode: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        Active: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn StartDesign(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn VerifyPassed(
        NumberItems: *mut i32,
        N1: *mut i32,
        N2: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn VerifySections(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x423ffd21, 0xedbb, 0x46dc, 0xb6, 0x6d, 0x46, 0xcc, 0x9f, 0xfb, 0xa3, 0x07)]
interface cDConcShellEurocode_2_2004(cDConcShellEurocode_2_2004Vtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0xdf961e2f, 0x7cd0, 0x4dd9, 0x97, 0x1b, 0x6d, 0x5f, 0x6e, 0x51, 0x5c, 0x0a)]
interface cDesignConcreteShell(cDesignConcreteShellVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0xc04392a3, 0x99d1, 0x4d05, 0x8d, 0xd3, 0xc0, 0x28, 0x4e, 0x26, 0x6f, 0x00)]
interface cDConcSlabACI318_14(cDConcSlabACI318_14Vtbl): IDispatch(IDispatchVtbl) {
    fn GetPreference(
        Item: i32,
        textValue: *mut BSTR,
        numericValue: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf572440b, 0xb2d9, 0x4a55, 0x81, 0x96, 0x87, 0x75, 0x50, 0xc8, 0x1d, 0x16)]
interface cDConcSlabACI318_19(cDConcSlabACI318_19Vtbl): IDispatch(IDispatchVtbl) {
    fn GetPreference(
        Item: i32,
        textValue: *mut BSTR,
        numericValue: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xad093a50, 0x7ffd, 0x42f8, 0xb1, 0xdd, 0x22, 0xfa, 0xa8, 0x17, 0x91, 0x7d)]
interface cDesignConcreteSlab(cDesignConcreteSlabVtbl): IDispatch(IDispatchVtbl) {
    fn get_ACI318_14(
        pRetVal: *mut *mut cDConcSlabACI318_14,
    ) -> HRESULT,
    fn get_DesignStrip(
        pRetVal: *mut *mut cDesignStrip,
    ) -> HRESULT,
    fn GetFlexureAndShear(
        StoryName: *mut SAFEARRAY,
        DesignStripName: *mut SAFEARRAY,
        Station: *mut SAFEARRAY,
        ConcWidth: *mut SAFEARRAY,
        FTopCombo: *mut SAFEARRAY,
        FTopMoment: *mut SAFEARRAY,
        FTopArea: *mut SAFEARRAY,
        FTopAMin: *mut SAFEARRAY,
        FBotCombo: *mut SAFEARRAY,
        FBotMoment: *mut SAFEARRAY,
        FBotArea: *mut SAFEARRAY,
        FBotAMin: *mut SAFEARRAY,
        AxialForce: *mut SAFEARRAY,
        VCombo: *mut SAFEARRAY,
        VForce: *mut SAFEARRAY,
        VArea: *mut SAFEARRAY,
        Status: *mut SAFEARRAY,
        GlobalX: *mut SAFEARRAY,
        GlobalY: *mut SAFEARRAY,
        Layer: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSummaryResultsFlexureAndShear(
        StoryName: *mut SAFEARRAY,
        DesignStripName: *mut SAFEARRAY,
        SpanID: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        FTopCombo: *mut SAFEARRAY,
        FTopMoment: *mut SAFEARRAY,
        FTopArea: *mut SAFEARRAY,
        FBotCombo: *mut SAFEARRAY,
        FBotMoment: *mut SAFEARRAY,
        FBotArea: *mut SAFEARRAY,
        VCombo: *mut SAFEARRAY,
        VForce: *mut SAFEARRAY,
        VArea: *mut SAFEARRAY,
        Status: *mut SAFEARRAY,
        Layer: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSummaryResultsSpanDefinition(
        StoryName: *mut SAFEARRAY,
        DesignStripName: *mut SAFEARRAY,
        SpanID: *mut SAFEARRAY,
        SpanLength: *mut SAFEARRAY,
        StartDist: *mut SAFEARRAY,
        EndDist: *mut SAFEARRAY,
        GlobalX1: *mut SAFEARRAY,
        GlobalY1: *mut SAFEARRAY,
        GlobalX2: *mut SAFEARRAY,
        GlobalY2: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn StartSlabDesign(
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xb8cbfe5b, 0xf426, 0x4d0a, 0xae, 0xbf, 0xf3, 0xa8, 0xe2, 0x22, 0x84, 0x9c)]
interface cDesignStrip(cDesignStripVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignStrip(
        Name: BSTR,
        Point: *mut SAFEARRAY,
        GlobalX: *mut SAFEARRAY,
        GlobalY: *mut SAFEARRAY,
        GlobalZ: *mut SAFEARRAY,
        WBLeft: *mut SAFEARRAY,
        WBRight: *mut SAFEARRAY,
        WALeft: *mut SAFEARRAY,
        WARight: *mut SAFEARRAY,
        AutoWiden: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGUID(
        Name: BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignStrip_1(
        Name: BSTR,
        DesignType: *mut i32,
        Point: *mut SAFEARRAY,
        GlobalX: *mut SAFEARRAY,
        GlobalY: *mut SAFEARRAY,
        GlobalZ: *mut SAFEARRAY,
        WBLeft: *mut SAFEARRAY,
        WBRight: *mut SAFEARRAY,
        WALeft: *mut SAFEARRAY,
        WARight: *mut SAFEARRAY,
        AutoWiden: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGUID(
        Name: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x48e6c50b, 0x130d, 0x4c1a, 0x84, 0x7f, 0xea, 0x18, 0x53, 0x07, 0xa6, 0x18)]
interface cDCoACI318_08_IBC2009(cDCoACI318_08_IBC2009Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x176897ef, 0xcfaf, 0x470b, 0xa6, 0x76, 0x07, 0x4f, 0x3d, 0x2f, 0x8f, 0xd2)]
interface cDCoACI318_11(cDCoACI318_11Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xcd4542c2, 0xd246, 0x469a, 0x85, 0x14, 0x1a, 0xc4, 0xc1, 0x81, 0x19, 0x11)]
interface cDCoACI318_19(cDCoACI318_19Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xc6a092ad, 0xf6fc, 0x4ad5, 0x98, 0x62, 0xf7, 0xb4, 0x81, 0xc4, 0x4b, 0x18)]
interface cDCoACI318_14(cDCoACI318_14Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xa3d43e54, 0x824d, 0x4538, 0xa2, 0x8a, 0xb5, 0x38, 0x5b, 0x0f, 0x51, 0xcf)]
interface cDCoAS_3600_09(cDCoAS_3600_09Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xc5e654ce, 0x23b1, 0x465b, 0x9a, 0xeb, 0x58, 0xd5, 0x74, 0xdf, 0x42, 0x25)]
interface cDCoAS_3600_2018(cDCoAS_3600_2018Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x6e93de30, 0x10b6, 0x45a8, 0x8b, 0x82, 0x12, 0x96, 0x88, 0xd8, 0xf8, 0x0e)]
interface cDCoBS8110_97(cDCoBS8110_97Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x8b3b4b91, 0x3406, 0x44d3, 0x93, 0xab, 0x29, 0xf9, 0xec, 0x82, 0x4e, 0x66)]
interface cDCoChinese_2010(cDCoChinese_2010Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x82d4214f, 0x47cc, 0x41e1, 0x9c, 0x85, 0xd4, 0xf2, 0xa5, 0x0e, 0xb2, 0x62)]
interface cDCoEurocode_2_2004(cDCoEurocode_2_2004Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x64d41225, 0x489d, 0x42ff, 0xa1, 0xf3, 0x6f, 0xbd, 0xfe, 0xf9, 0xd6, 0xfe)]
interface cDCoHong_Kong_CP_2013(cDCoHong_Kong_CP_2013Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x35968ab4, 0xe1f9, 0x41ba, 0x8c, 0x9c, 0x26, 0xca, 0xbc, 0x55, 0xdc, 0xe4)]
interface cDCoIndian_IS_456_2000(cDCoIndian_IS_456_2000Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x1308d2a3, 0x7656, 0x4e06, 0xa6, 0x10, 0xf1, 0xa9, 0x32, 0x82, 0xb5, 0xcc)]
interface cDCoItalianNTC2008C(cDCoItalianNTC2008CVtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x202f4644, 0xa7b2, 0x44fc, 0xb5, 0x19, 0x07, 0x3a, 0x55, 0x59, 0x2e, 0xac)]
interface cDCoMexican_RCDF_2004(cDCoMexican_RCDF_2004Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x3a09968a, 0x4e3d, 0x4602, 0xb8, 0x70, 0xff, 0x5d, 0x32, 0x0e, 0x00, 0xf8)]
interface cDCoMexican_RCDF_2017(cDCoMexican_RCDF_2017Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xa09ef0a6, 0xd1cb, 0x4329, 0x9b, 0xba, 0x87, 0x78, 0xd7, 0x07, 0x87, 0x94)]
interface cDCoNZS_3101_2006(cDCoNZS_3101_2006Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xcd1d9d18, 0x26e7, 0x4d7d, 0xa6, 0x9e, 0x0f, 0x70, 0x1a, 0x40, 0x55, 0x96)]
interface cDCoSP63133302011(cDCoSP63133302011Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xa2ce64ae, 0x31fd, 0x4550, 0xb4, 0xff, 0xa1, 0xca, 0x1b, 0x4f, 0x4f, 0x5b)]
interface cDCoTS_500_2000(cDCoTS_500_2000Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x4fa29d29, 0x960d, 0x4b15, 0xb1, 0x15, 0x4d, 0xa3, 0x3a, 0x4f, 0x47, 0x16)]
interface cDCoTS_500_2000_R2018(cDCoTS_500_2000_R2018Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x3e3e4806, 0xbb37, 0x4d78, 0x99, 0xa0, 0x20, 0x43, 0x6f, 0x21, 0xa0, 0xa8)]
interface cDesignConcrete(cDesignConcreteVtbl): IDispatch(IDispatchVtbl) {
    fn get_ACI318_08_IBC2009(
        pRetVal: *mut *mut cDCoACI318_08_IBC2009,
    ) -> HRESULT,
    fn get_Eurocode_2_2004(
        pRetVal: *mut *mut cDCoEurocode_2_2004,
    ) -> HRESULT,
    fn GetCode(
        CodeName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignSection(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetResultsAvailable(
        pRetVal: *mut VARIANT_BOOL,
    ) -> HRESULT,
    fn GetSummaryResultsBeam(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        TopCombo: *mut SAFEARRAY,
        TopArea: *mut SAFEARRAY,
        BotCombo: *mut SAFEARRAY,
        BotArea: *mut SAFEARRAY,
        VMajorCombo: *mut SAFEARRAY,
        VMajorArea: *mut SAFEARRAY,
        TLCombo: *mut SAFEARRAY,
        TLArea: *mut SAFEARRAY,
        TTCombo: *mut SAFEARRAY,
        TTArea: *mut SAFEARRAY,
        ErrorSummary: *mut SAFEARRAY,
        WarningSummary: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSummaryResultsColumn(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        MyOption: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        PMMCombo: *mut SAFEARRAY,
        PMMArea: *mut SAFEARRAY,
        PMMRatio: *mut SAFEARRAY,
        VMajorCombo: *mut SAFEARRAY,
        AVMajor: *mut SAFEARRAY,
        VMinorCombo: *mut SAFEARRAY,
        AVMinor: *mut SAFEARRAY,
        ErrorSummary: *mut SAFEARRAY,
        WarningSummary: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSummaryResultsJoint(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        LCJSRatioMajor: *mut SAFEARRAY,
        JSRatioMajor: *mut SAFEARRAY,
        LCJSRatioMinor: *mut SAFEARRAY,
        JSRatioMinor: *mut SAFEARRAY,
        LCBCCRatioMajor: *mut SAFEARRAY,
        BCCRatioMajor: *mut SAFEARRAY,
        LCBCCRatioMinor: *mut SAFEARRAY,
        BCCRatioMinor: *mut SAFEARRAY,
        ErrorSummary: *mut SAFEARRAY,
        WarningSummary: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCode(
        CodeName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDesignSection(
        Name: BSTR,
        PropName: BSTR,
        LastAnalysis: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn StartDesign(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_SP63_13330_2012(
        pRetVal: *mut *mut cDCoSP63133302011,
    ) -> HRESULT,
    fn get_ACI318_14(
        pRetVal: *mut *mut cDCoACI318_14,
    ) -> HRESULT,
    fn get_ACI318_19(
        pRetVal: *mut *mut cDCoACI318_19,
    ) -> HRESULT,
    fn get_AS_3600_09(
        pRetVal: *mut *mut cDCoAS_3600_09,
    ) -> HRESULT,
    fn get_BS8110_97(
        pRetVal: *mut *mut cDCoBS8110_97,
    ) -> HRESULT,
    fn get_Chinese_2010(
        pRetVal: *mut *mut cDCoChinese_2010,
    ) -> HRESULT,
    fn get_Indian_IS_456_2000(
        pRetVal: *mut *mut cDCoIndian_IS_456_2000,
    ) -> HRESULT,
    fn GetRebarPrefsBeam(
        Item: i32,
        Value: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarPrefsColumn(
        Item: i32,
        Value: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSummaryResultsBeam_2(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        TopCombo: *mut SAFEARRAY,
        TopArea: *mut SAFEARRAY,
        TopAreaReq: *mut SAFEARRAY,
        TopAreaMin: *mut SAFEARRAY,
        TopAreaProvided: *mut SAFEARRAY,
        BotCombo: *mut SAFEARRAY,
        BotArea: *mut SAFEARRAY,
        BotAreaReq: *mut SAFEARRAY,
        BotAreaMin: *mut SAFEARRAY,
        BotAreaProvided: *mut SAFEARRAY,
        VMajorCombo: *mut SAFEARRAY,
        VMajorArea: *mut SAFEARRAY,
        VmajorAreaReq: *mut SAFEARRAY,
        VmajorAreaMin: *mut SAFEARRAY,
        VmajorAreaProvided: *mut SAFEARRAY,
        TLCombo: *mut SAFEARRAY,
        TLArea: *mut SAFEARRAY,
        TTCombo: *mut SAFEARRAY,
        TTArea: *mut SAFEARRAY,
        ErrorSummary: *mut SAFEARRAY,
        WarningSummary: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_AS_3600_2018(
        pRetVal: *mut *mut cDCoAS_3600_2018,
    ) -> HRESULT,
    fn get_Mexican_RCDF_2017(
        pRetVal: *mut *mut cDCoMexican_RCDF_2017,
    ) -> HRESULT,
    fn get_TS_500_2000_R2018(
        pRetVal: *mut *mut cDCoTS_500_2000_R2018,
    ) -> HRESULT,
    fn GetSeismicFramingType(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        FramingType: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf1c53bf1, 0x0357, 0x4dab, 0xbb, 0x1b, 0xea, 0x17, 0x49, 0xed, 0x14, 0xd2)]
interface cDesignShearWall(cDesignShearWallVtbl): IDispatch(IDispatchVtbl) {
    fn GetPierSummaryResults(
        Story: *mut SAFEARRAY,
        PierLabel: *mut SAFEARRAY,
        Station: *mut SAFEARRAY,
        DesignType: *mut SAFEARRAY,
        PierSecType: *mut SAFEARRAY,
        EdgeBar: *mut SAFEARRAY,
        EndBar: *mut SAFEARRAY,
        BarSpacing: *mut SAFEARRAY,
        ReinfPercent: *mut SAFEARRAY,
        CurrPercent: *mut SAFEARRAY,
        DCRatio: *mut SAFEARRAY,
        PierLeg: *mut SAFEARRAY,
        LegX1: *mut SAFEARRAY,
        LegY1: *mut SAFEARRAY,
        LegX2: *mut SAFEARRAY,
        LegY2: *mut SAFEARRAY,
        EdgeLeft: *mut SAFEARRAY,
        EdgeRight: *mut SAFEARRAY,
        AsLeft: *mut SAFEARRAY,
        AsRight: *mut SAFEARRAY,
        ShearAv: *mut SAFEARRAY,
        StressCompLeft: *mut SAFEARRAY,
        StressCompRight: *mut SAFEARRAY,
        StressLimitLeft: *mut SAFEARRAY,
        StressLimitRight: *mut SAFEARRAY,
        CDepthLeft: *mut SAFEARRAY,
        CLimitLeft: *mut SAFEARRAY,
        CDepthRight: *mut SAFEARRAY,
        CLimitRight: *mut SAFEARRAY,
        InelasticRotDemand: *mut SAFEARRAY,
        InelasticRotCapacity: *mut SAFEARRAY,
        NormCompStress: *mut SAFEARRAY,
        NormCompStressLimit: *mut SAFEARRAY,
        CDepth: *mut SAFEARRAY,
        BZoneL: *mut SAFEARRAY,
        BZoneR: *mut SAFEARRAY,
        BZoneLength: *mut SAFEARRAY,
        WarnMsg: *mut SAFEARRAY,
        ErrMsg: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebar(
        AreaObjName: *mut SAFEARRAY,
        StoryName: *mut SAFEARRAY,
        PierLabel: *mut SAFEARRAY,
        StationLocation: *mut SAFEARRAY,
        LegID: *mut SAFEARRAY,
        LeftX1: *mut SAFEARRAY,
        LeftY1: *mut SAFEARRAY,
        RightX2: *mut SAFEARRAY,
        RightY2: *mut SAFEARRAY,
        Length: *mut SAFEARRAY,
        Thickness: *mut SAFEARRAY,
        Fc: *mut SAFEARRAY,
        FY: *mut SAFEARRAY,
        fys: *mut SAFEARRAY,
        Flexural: *mut SAFEARRAY,
        ShearAndConfinement: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpandrelSummaryResults(
        Story: *mut SAFEARRAY,
        Spandrel: *mut SAFEARRAY,
        Station: *mut SAFEARRAY,
        TopRebar: *mut SAFEARRAY,
        TopRebarRatio: *mut SAFEARRAY,
        TopRebarCombo: *mut SAFEARRAY,
        MuTop: *mut SAFEARRAY,
        BotRebar: *mut SAFEARRAY,
        BotRebarRatio: *mut SAFEARRAY,
        BotRebarCombo: *mut SAFEARRAY,
        MuBot: *mut SAFEARRAY,
        AVert: *mut SAFEARRAY,
        AHorz: *mut SAFEARRAY,
        ShearCombo: *mut SAFEARRAY,
        Vu: *mut SAFEARRAY,
        ADiag: *mut SAFEARRAY,
        ShearDiagCombo: *mut SAFEARRAY,
        VuDiag: *mut SAFEARRAY,
        WarnMsg: *mut SAFEARRAY,
        ErrMsg: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarPrefsPier(
        Item: i32,
        Value: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarPrefsSpandrel(
        Item: i32,
        Value: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xa7a9681c, 0x52c4, 0x46ea, 0x9e, 0x6e, 0x8c, 0x33, 0x04, 0x7e, 0x5f, 0x40)]
interface cDesignSteel(cDesignSteelVtbl): IDispatch(IDispatchVtbl) {
    fn get_AISC360_05_IBC2006(
        pRetVal: *mut *mut cDStAISC360_05_IBC2006,
    ) -> HRESULT,
    fn get_Canadian_S16_09(
        pRetVal: *mut *mut cDStCanadian_S16_09,
    ) -> HRESULT,
    fn DeleteResults(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_Eurocode_3_2005(
        pRetVal: *mut *mut cDStEurocode_3_2005,
    ) -> HRESULT,
    fn GetCode(
        CodeName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetComboDeflection(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetComboStrength(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignSection(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroup(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetResultsAvailable(
        pRetVal: *mut VARIANT_BOOL,
    ) -> HRESULT,
    fn GetSummaryResults(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        Ratio: *mut SAFEARRAY,
        RatioType: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        ComboName: *mut SAFEARRAY,
        ErrorSummary: *mut SAFEARRAY,
        WarningSummary: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTargetDispl(
        NumberItems: *mut i32,
        LoadCase: *mut SAFEARRAY,
        Point: *mut SAFEARRAY,
        Displ: *mut SAFEARRAY,
        Active: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTargetPeriod(
        NumberItems: *mut i32,
        ModalCase: *mut BSTR,
        Mode: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        Active: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ResetOverwrites(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetAutoSelectNull(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetCode(
        CodeName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetComboDeflection(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetComboStrength(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDesignSection(
        Name: BSTR,
        PropName: BSTR,
        LastAnalysis: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroup(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTargetDispl(
        NumberItems: i32,
        LoadCase: *mut SAFEARRAY,
        Point: *mut SAFEARRAY,
        Displ: *mut SAFEARRAY,
        Active: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTargetPeriod(
        NumberItems: i32,
        ModalCase: BSTR,
        Mode: *mut SAFEARRAY,
        Period: *mut SAFEARRAY,
        Active: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn StartDesign(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn VerifyPassed(
        NumberItems: *mut i32,
        N1: *mut i32,
        N2: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn VerifySections(
        NumberItems: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn get_SP16_13330_2011(
        pRetVal: *mut *mut cDStSP16_13330_2011,
    ) -> HRESULT,
    fn get_Canadian_S16_14(
        pRetVal: *mut *mut cDStCanadian_S16_14,
    ) -> HRESULT,
    fn get_Canadian_S16_19(
        pRetVal: *mut *mut cDStCanadian_S16_19,
    ) -> HRESULT,
    fn get_AISC_LRFD93(
        pRetVal: *mut *mut cDStAISC_LRFD93,
    ) -> HRESULT,
    fn get_Australian_AS4100_98(
        pRetVal: *mut *mut cDStAustralian_AS4100_98,
    ) -> HRESULT,
    fn get_Australian_AS4100_2020(
        pRetVal: *mut *mut cDStAustralian_AS4100_2020,
    ) -> HRESULT,
    fn get_BS5950_2000(
        pRetVal: *mut *mut cDStBS5950_2000,
    ) -> HRESULT,
    fn get_Chinese_2010(
        pRetVal: *mut *mut cDStChinese_2010,
    ) -> HRESULT,
    fn get_Chinese_2018(
        pRetVal: *mut *mut cDStChinese_2018,
    ) -> HRESULT,
    fn get_Indian_IS_800_2007(
        pRetVal: *mut *mut cDStIndian_IS_800_2007,
    ) -> HRESULT,
    fn get_NewZealand_NZS3404_97(
        pRetVal: *mut *mut cDStNewZealand_NZS3404_97,
    ) -> HRESULT,
    fn get_Italian_NTC_2008(
        pRetVal: *mut *mut cDStItalianNTC2008S,
    ) -> HRESULT,
    fn get_Italian_NTC_2018(
        pRetVal: *mut *mut cDStItalianNTC2018S,
    ) -> HRESULT,
    fn GetSummaryResults_2(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameType: *mut SAFEARRAY,
        DesignSect: *mut SAFEARRAY,
        Status: *mut SAFEARRAY,
        PMMCombo: *mut SAFEARRAY,
        PMMRatio: *mut SAFEARRAY,
        PRatio: *mut SAFEARRAY,
        MMajRatio: *mut SAFEARRAY,
        MMinRatio: *mut SAFEARRAY,
        VMajCombo: *mut SAFEARRAY,
        VMajRatio: *mut SAFEARRAY,
        VMinCombo: *mut SAFEARRAY,
        VMinRatio: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSummaryResults_3(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        FrameType: *mut SAFEARRAY,
        DesignSect: *mut SAFEARRAY,
        Status: *mut SAFEARRAY,
        PMMCombo: *mut SAFEARRAY,
        PMMRatio: *mut SAFEARRAY,
        PRatio: *mut SAFEARRAY,
        MMajRatio: *mut SAFEARRAY,
        MMinRatio: *mut SAFEARRAY,
        VMajCombo: *mut SAFEARRAY,
        VMajRatio: *mut SAFEARRAY,
        VMinCombo: *mut SAFEARRAY,
        VMinRatio: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x57576186, 0x4629, 0x4066, 0xa5, 0xe3, 0xaa, 0xfb, 0x85, 0x51, 0xb6, 0xa8)]
interface cDStAISC360_05_IBC2006(cDStAISC360_05_IBC2006Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xab1800e1, 0x011e, 0x4212, 0xa1, 0x39, 0xea, 0x82, 0x32, 0xb0, 0x45, 0x49)]
interface cDStAISC360_10(cDStAISC360_10Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xa3f32989, 0x4b8e, 0x4199, 0x86, 0x2d, 0xdd, 0x2f, 0xa2, 0x35, 0xc3, 0x81)]
interface cDStAISC_ASD89(cDStAISC_ASD89Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x38dd519b, 0xac4a, 0x4dc8, 0xb1, 0x70, 0xb8, 0xf5, 0x8d, 0xc3, 0x4b, 0x6e)]
interface cDStAISC_LRFD93(cDStAISC_LRFD93Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x46883fe3, 0x67f0, 0x4286, 0xa1, 0x19, 0x91, 0x3f, 0xa2, 0x72, 0xba, 0x9f)]
interface cDStAustralian_AS4100_98(cDStAustralian_AS4100_98Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x6a4e5155, 0x9478, 0x4f7e, 0x87, 0xab, 0xb9, 0x1a, 0x78, 0x34, 0x15, 0x97)]
interface cDStBS5950_2000(cDStBS5950_2000Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x7169a078, 0x37cb, 0x4021, 0xa6, 0xcd, 0x99, 0x23, 0xeb, 0x72, 0x3a, 0x64)]
interface cDStCanadian_S16_09(cDStCanadian_S16_09Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x31467f7c, 0x766c, 0x4be6, 0xb1, 0x9f, 0xba, 0x9f, 0x03, 0x88, 0xa2, 0x2a)]
interface cDStCanadian_S16_19(cDStCanadian_S16_19Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xd81d4698, 0xc66b, 0x40cd, 0x88, 0xff, 0x65, 0x34, 0x97, 0x0d, 0xed, 0x6d)]
interface cDStChinese_2010(cDStChinese_2010Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xa09a57cb, 0xe3d1, 0x4966, 0xba, 0xf4, 0x36, 0x5f, 0x2c, 0x25, 0x98, 0xa8)]
interface cDStChinese_2018(cDStChinese_2018Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xdbfa67a5, 0xbceb, 0x4d70, 0x98, 0x96, 0x87, 0x60, 0x0c, 0xeb, 0xa4, 0x1f)]
interface cDStEurocode_3_2005(cDStEurocode_3_2005Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x655c6ea8, 0x969d, 0x4876, 0x8a, 0xb0, 0x28, 0x73, 0x7c, 0xad, 0xe5, 0xa4)]
interface cDStIndian_IS_800_2007(cDStIndian_IS_800_2007Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xe94bee54, 0x8675, 0x4605, 0xb3, 0x82, 0xe7, 0xaa, 0x0d, 0xc6, 0x2c, 0x50)]
interface cDStItalianNTC2008S(cDStItalianNTC2008SVtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xdd1295a2, 0x2c57, 0x4719, 0xa2, 0x7a, 0xbd, 0xcc, 0x95, 0xbd, 0x06, 0x74)]
interface cDStNewZealand_NZS3404_97(cDStNewZealand_NZS3404_97Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xb41e2718, 0xabb7, 0x465f, 0x97, 0xc8, 0x95, 0x2b, 0x2c, 0x44, 0x20, 0x2b)]
interface cDStSP16_13330_2011(cDStSP16_13330_2011Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf91a6e37, 0x1a06, 0x41c3, 0x91, 0x38, 0x59, 0xe3, 0xe0, 0x07, 0xb4, 0xad)]
interface cDStCanadian_S16_14(cDStCanadian_S16_14Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xc6e5510d, 0x451e, 0x4fa9, 0x90, 0x44, 0x33, 0x5a, 0x7c, 0xd9, 0xa3, 0xd6)]
interface cDStItalianNTC2018S(cDStItalianNTC2018SVtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        textValue: *mut BSTR,
        numericValue: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        textValue: *mut BSTR,
        numericValue: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        textValue: BSTR,
        numericValue: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        textValue: BSTR,
        numericValue: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x48c48622, 0xbada, 0x4e06, 0xbb, 0x96, 0x58, 0xfa, 0xae, 0x32, 0xeb, 0x93)]
interface cDStSP16_13330_2017(cDStSP16_13330_2017Vtbl): IDispatch(IDispatchVtbl) {
    fn GetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: *mut f64,
        ProgDet: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPreference(
        Item: i32,
        Value: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOverwrite(
        Name: BSTR,
        Item: i32,
        Value: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPreference(
        Item: i32,
        Value: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x95af59de, 0x08d7, 0x4338, 0xa4, 0x2c, 0x5c, 0xf2, 0x2c, 0x36, 0xea, 0xdb)]
interface cDetailing(cDetailingVtbl): IDispatch(IDispatchVtbl) {
    fn ClearDetailing(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedBeamLines(
        NumberItems: *mut i32,
        BeamLineIDs: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedBeamLineData(
        BeamLineID: BSTR,
        ObjectUniqueNames: *mut SAFEARRAY,
        NumberSpans: *mut i32,
        SpanLength: *mut SAFEARRAY,
        NumLongBars: *mut SAFEARRAY,
        LongBarDiameter: *mut SAFEARRAY,
        LongBarNotation: *mut SAFEARRAY,
        LongBarStartDist: *mut SAFEARRAY,
        LongBarStartBend: *mut SAFEARRAY,
        LongBarEndBend: *mut SAFEARRAY,
        LongBarLength: *mut SAFEARRAY,
        LongBarNumLayers: *mut SAFEARRAY,
        NumTieBars: *mut SAFEARRAY,
        NumTieVertLegs: *mut SAFEARRAY,
        TieBarDiameter: *mut SAFEARRAY,
        TieBarNotation: *mut SAFEARRAY,
        TieBarStartDist: *mut SAFEARRAY,
        TieBarSpacing: *mut SAFEARRAY,
        TieBarType: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedBeamLineData_1(
        BeamLineID: BSTR,
        ObjectUniqueNames: *mut SAFEARRAY,
        NumberSpans: *mut i32,
        SpanLength: *mut SAFEARRAY,
        NumLongBars: *mut SAFEARRAY,
        LongBarGUID: *mut SAFEARRAY,
        LongBarDiameter: *mut SAFEARRAY,
        LongBarNotation: *mut SAFEARRAY,
        LongBarStartDist: *mut SAFEARRAY,
        LongBarStartBend: *mut SAFEARRAY,
        LongBarEndBend: *mut SAFEARRAY,
        LongBarLength: *mut SAFEARRAY,
        LongBarNumLayers: *mut SAFEARRAY,
        NumTieBars: *mut SAFEARRAY,
        NumTieVertLegs: *mut SAFEARRAY,
        TieBarGUID: *mut SAFEARRAY,
        TieBarDiameter: *mut SAFEARRAY,
        TieBarNotation: *mut SAFEARRAY,
        TieBarStartDist: *mut SAFEARRAY,
        TieBarSpacing: *mut SAFEARRAY,
        TieBarType: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedColumnStacks(
        NumberItems: *mut i32,
        ColumnStackIDs: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedColumnStackData(
        ColumnStackID: BSTR,
        ObjectUniqueNames: *mut SAFEARRAY,
        NumLongBarSets: *mut i32,
        NumLongBars: *mut SAFEARRAY,
        LongBarDiameter: *mut SAFEARRAY,
        LongBarNotation: *mut SAFEARRAY,
        LongBarStartDist: *mut SAFEARRAY,
        LongBarStartBend: *mut SAFEARRAY,
        LongBarEndBend: *mut SAFEARRAY,
        LongBarLength: *mut SAFEARRAY,
        LongBarNumLayers: *mut SAFEARRAY,
        NumTieZones: *mut i32,
        TieBarZones: *mut SAFEARRAY,
        NumTieBars: *mut SAFEARRAY,
        NumTieVertLegs: *mut SAFEARRAY,
        TieBarDiameter: *mut SAFEARRAY,
        TieBarNotation: *mut SAFEARRAY,
        TieBarStartDist: *mut SAFEARRAY,
        TieBarSpacing: *mut SAFEARRAY,
        TieBarType: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedColumnStackData_1(
        ColumnStackID: BSTR,
        ObjectUniqueNames: *mut SAFEARRAY,
        NumLongBarSets: *mut i32,
        NumLongBars: *mut SAFEARRAY,
        LongBarGUID: *mut SAFEARRAY,
        LongBarDiameter: *mut SAFEARRAY,
        LongBarNotation: *mut SAFEARRAY,
        LongBarStartDist: *mut SAFEARRAY,
        LongBarStartBend: *mut SAFEARRAY,
        LongBarEndBend: *mut SAFEARRAY,
        LongBarLength: *mut SAFEARRAY,
        LongBarNumLayers: *mut SAFEARRAY,
        NumTieZones: *mut i32,
        TieBarZones: *mut SAFEARRAY,
        NumTieBars: *mut SAFEARRAY,
        NumTieHorLegs: *mut SAFEARRAY,
        NumTieVertLegs: *mut SAFEARRAY,
        TieBarGUID: *mut SAFEARRAY,
        TieBarDiameter: *mut SAFEARRAY,
        TieBarNotation: *mut SAFEARRAY,
        TieBarStartDist: *mut SAFEARRAY,
        TieBarSpacing: *mut SAFEARRAY,
        TieBarType: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedSlabs(
        NumberItems: *mut i32,
        Names: *mut SAFEARRAY,
        SlabElevations: *mut SAFEARRAY,
        GUIDs: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedSlabBotBarData(
        SlabName: BSTR,
        NumData: *mut i32,
        Names: *mut SAFEARRAY,
        NumBars: *mut SAFEARRAY,
        BarDiameter: *mut SAFEARRAY,
        BarNotation: *mut SAFEARRAY,
        BarMaterial: *mut SAFEARRAY,
        StartX: *mut SAFEARRAY,
        StartY: *mut SAFEARRAY,
        StartZ: *mut SAFEARRAY,
        EndX: *mut SAFEARRAY,
        EndY: *mut SAFEARRAY,
        EndZ: *mut SAFEARRAY,
        WidthLeft: *mut SAFEARRAY,
        WidthRight: *mut SAFEARRAY,
        OffsetFromTop: *mut SAFEARRAY,
        OffsetFromBot: *mut SAFEARRAY,
        StartBarBend: *mut SAFEARRAY,
        EndBarBend: *mut SAFEARRAY,
        GUIDs: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedSlabBotBarData_1(
        SlabName: BSTR,
        NumData: *mut i32,
        Names: *mut SAFEARRAY,
        NumBars: *mut SAFEARRAY,
        BarDiameter: *mut SAFEARRAY,
        BarNotation: *mut SAFEARRAY,
        BarMaterial: *mut SAFEARRAY,
        StartX: *mut SAFEARRAY,
        StartY: *mut SAFEARRAY,
        StartZ: *mut SAFEARRAY,
        EndX: *mut SAFEARRAY,
        EndY: *mut SAFEARRAY,
        EndZ: *mut SAFEARRAY,
        WidthLeft: *mut SAFEARRAY,
        WidthRight: *mut SAFEARRAY,
        OffsetFromTop: *mut SAFEARRAY,
        OffsetFromBot: *mut SAFEARRAY,
        StartBarBend: *mut SAFEARRAY,
        EndBarBend: *mut SAFEARRAY,
        GUIDs: *mut SAFEARRAY,
        StripNames: *mut SAFEARRAY,
        SpanNos: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedSlabTopBarData(
        SlabName: BSTR,
        NumData: *mut i32,
        Names: *mut SAFEARRAY,
        NumBars: *mut SAFEARRAY,
        BarDiameter: *mut SAFEARRAY,
        BarNotation: *mut SAFEARRAY,
        BarMaterial: *mut SAFEARRAY,
        StartX: *mut SAFEARRAY,
        StartY: *mut SAFEARRAY,
        StartZ: *mut SAFEARRAY,
        EndX: *mut SAFEARRAY,
        EndY: *mut SAFEARRAY,
        EndZ: *mut SAFEARRAY,
        WidthLeft: *mut SAFEARRAY,
        WidthRight: *mut SAFEARRAY,
        OffsetFromTop: *mut SAFEARRAY,
        OffsetFromBot: *mut SAFEARRAY,
        StartBarBend: *mut SAFEARRAY,
        EndBarBend: *mut SAFEARRAY,
        GUIDs: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedSlabTopBarData_1(
        SlabName: BSTR,
        NumData: *mut i32,
        Names: *mut SAFEARRAY,
        NumBars: *mut SAFEARRAY,
        BarDiameter: *mut SAFEARRAY,
        BarNotation: *mut SAFEARRAY,
        BarMaterial: *mut SAFEARRAY,
        StartX: *mut SAFEARRAY,
        StartY: *mut SAFEARRAY,
        StartZ: *mut SAFEARRAY,
        EndX: *mut SAFEARRAY,
        EndY: *mut SAFEARRAY,
        EndZ: *mut SAFEARRAY,
        WidthLeft: *mut SAFEARRAY,
        WidthRight: *mut SAFEARRAY,
        OffsetFromTop: *mut SAFEARRAY,
        OffsetFromBot: *mut SAFEARRAY,
        StartBarBend: *mut SAFEARRAY,
        EndBarBend: *mut SAFEARRAY,
        GUIDs: *mut SAFEARRAY,
        StripNames: *mut SAFEARRAY,
        SpanNos: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailingAvailable(
        pRetVal: *mut VARIANT_BOOL,
    ) -> HRESULT,
    fn GetSimilarBeamLines(
        BeamLineID: BSTR,
        NumberSimilarBeams: *mut i32,
        NumberUniqueObjects: *mut SAFEARRAY,
        ObjectUniqueNames: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSimilarColumnStacks(
        ColumnStackID: BSTR,
        NumberSimilarColumns: *mut i32,
        NumberUniqueObjects: *mut SAFEARRAY,
        ObjectUniqueNames: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSimilarSlabs(
        SlabName: BSTR,
        NumberSimilarSlabs: *mut i32,
        Names: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn StartDetailing(
        OverwriteExisting: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetBeamLongRebarData(
        Name: BSTR,
        NumberRebarSets: *mut i32,
        BarSizeName: *mut SAFEARRAY,
        BarArea: *mut SAFEARRAY,
        NumberBars: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        ClearCover: *mut SAFEARRAY,
        StartCoord1: *mut SAFEARRAY,
        BarLength: *mut SAFEARRAY,
        BendingAngleStart: *mut SAFEARRAY,
        BendingAngleEnd: *mut SAFEARRAY,
        RebarSetGUID: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetBeamTieRebarData(
        Name: BSTR,
        NumberRebarSets: *mut i32,
        BarSizeName: *mut SAFEARRAY,
        BarArea: *mut SAFEARRAY,
        NumberLegs: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        ClearCover: *mut SAFEARRAY,
        StartCoord1: *mut SAFEARRAY,
        Spacing: *mut SAFEARRAY,
        Lengths: *mut SAFEARRAY,
        RebarSetGUID: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColumnLongRebarData(
        Name: BSTR,
        NumberRebarSets: *mut i32,
        BarSizeName: *mut SAFEARRAY,
        BarArea: *mut SAFEARRAY,
        NumberCBars: *mut SAFEARRAY,
        NumberR3Bars: *mut SAFEARRAY,
        NumberR2Bars: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        ClearCover: *mut SAFEARRAY,
        RebarSetGUID: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColumnTieRebarData(
        Name: BSTR,
        NumberRebarSets: *mut i32,
        BarSizeName: *mut SAFEARRAY,
        BarArea: *mut SAFEARRAY,
        Pattern: *mut SAFEARRAY,
        ConfineType: *mut SAFEARRAY,
        NumberLegs2Dir: *mut SAFEARRAY,
        NumberLegs3Dir: *mut SAFEARRAY,
        Location: *mut SAFEARRAY,
        ClearCover: *mut SAFEARRAY,
        StartCoord1: *mut SAFEARRAY,
        Spacing: *mut SAFEARRAY,
        Heights: *mut SAFEARRAY,
        RebarSetGUID: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedBeamLineGuidData(
        BeamLineID: BSTR,
        SimilarFirstBeamUniqueID: BSTR,
        LongitudinalABars: *mut SAFEARRAY,
        LongitudinalBBars: *mut SAFEARRAY,
        LongitudinalCBars: *mut SAFEARRAY,
        LongitudinalDBars: *mut SAFEARRAY,
        LongitudinalEBars: *mut SAFEARRAY,
        LongitudinalFBars: *mut SAFEARRAY,
        LongitudinalGBars: *mut SAFEARRAY,
        LongitudinalHBars: *mut SAFEARRAY,
        ZoneATies: *mut SAFEARRAY,
        ZoneBTies: *mut SAFEARRAY,
        ZoneCTies: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedColumnStackGuidData(
        ColumnStackID: BSTR,
        SimilarFirstColumnUniqueID: BSTR,
        LongitudinalBars: *mut SAFEARRAY,
        TiesA: *mut SAFEARRAY,
        TiesB: *mut SAFEARRAY,
        TiesC: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedColumnStackData_2(
        ColumnStackID: BSTR,
        ObjectUniqueNames: *mut SAFEARRAY,
        NumLongBarSets: *mut i32,
        NumLongBars: *mut SAFEARRAY,
        NumLongR2Bars: *mut SAFEARRAY,
        NumLongR3Bars: *mut SAFEARRAY,
        LongBarGUID: *mut SAFEARRAY,
        LongBarDiameter: *mut SAFEARRAY,
        LongBarNotation: *mut SAFEARRAY,
        LongBarStartDist: *mut SAFEARRAY,
        LongBarStartBend: *mut SAFEARRAY,
        LongBarEndBend: *mut SAFEARRAY,
        LongBarLength: *mut SAFEARRAY,
        LongBarNumLayers: *mut SAFEARRAY,
        NumTieZones: *mut i32,
        TieBarZone: *mut SAFEARRAY,
        NumTieBars: *mut SAFEARRAY,
        NumTieR2Legs: *mut SAFEARRAY,
        NumTieR3Legs: *mut SAFEARRAY,
        TieBarGUID: *mut SAFEARRAY,
        TieBarDiameter: *mut SAFEARRAY,
        TieBarNotation: *mut SAFEARRAY,
        TieBarStartDist: *mut SAFEARRAY,
        TieBarSpacing: *mut SAFEARRAY,
        TieBarType: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNumberDetailedSlabs(
        NumberDetailingOutput: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedSlab_OneDetailingOutputInfo(
        DetailingOutputIndex: i32,
        Guid_ETABS: *mut BSTR,
        Floor: *mut BSTR,
        StoryNameETABS: *mut BSTR,
        LevelZ: *mut f64,
        NumberStrips: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_StripInfo(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        Name: *mut BSTR,
        LayerName: *mut BSTR,
        StripType: *mut BSTR,
        NumberRegions: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_StripGUID(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        Guid_ETABS: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegionInfo(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        DetailingRegionIndex: i32,
        X1: *mut f64,
        Y1: *mut f64,
        X2: *mut f64,
        Y2: *mut f64,
        NumberTopBars: *mut i32,
        NumberBottomBars: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebarInfo(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        DetailingRegionIndex: i32,
        TopRebarIndex: i32,
        X1: *mut f64,
        Y1: *mut f64,
        X2: *mut f64,
        Y2: *mut f64,
        WidthRight: *mut f64,
        WidthLeft: *mut f64,
        Z: *mut f64,
        ReqAst: *mut f64,
        ProvAst: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebarInfo(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        DetailingRegionIndex: i32,
        BottomRebarIndex: i32,
        X1: *mut f64,
        Y1: *mut f64,
        X2: *mut f64,
        Y2: *mut f64,
        WidthRight: *mut f64,
        WidthLeft: *mut f64,
        Z: *mut f64,
        ReqAst: *mut f64,
        ProvAst: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar1Info(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        DetailingRegionIndex: i32,
        TopRebarIndex: i32,
        GUID: *mut BSTR,
        PlaceCode: *mut BSTR,
        Dia: *mut f64,
        Size: *mut BSTR,
        Number: *mut i32,
        StartDist: *mut f64,
        EndDist: *mut f64,
        StartBend: *mut i32,
        EndBend: *mut i32,
        Material: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneTopRebar_Bar2Info(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        DetailingRegionIndex: i32,
        TopRebarIndex: i32,
        GUID: *mut BSTR,
        PlaceCode: *mut BSTR,
        Dia: *mut f64,
        Size: *mut BSTR,
        Number: *mut i32,
        StartDist: *mut f64,
        EndDist: *mut f64,
        StartBend: *mut i32,
        EndBend: *mut i32,
        Material: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar1Info(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        DetailingRegionIndex: i32,
        BottomRebarIndex: i32,
        GUID: *mut BSTR,
        PlaceCode: *mut BSTR,
        Dia: *mut f64,
        Size: *mut BSTR,
        Number: *mut i32,
        StartDist: *mut f64,
        EndDist: *mut f64,
        StartBend: *mut i32,
        EndBend: *mut i32,
        Material: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOneDetailedSlab_OneDetailingOutput_OneStrip_OneDetailingRegion_OneBottomRebar_Bar2Info(
        DetailingOutputIndex: i32,
        StripIndex: i32,
        DetailingRegionIndex: i32,
        BottomRebarIndex: i32,
        GUID: *mut BSTR,
        PlaceCode: *mut BSTR,
        Dia: *mut f64,
        Size: *mut BSTR,
        Number: *mut i32,
        StartDist: *mut f64,
        EndDist: *mut f64,
        StartBend: *mut i32,
        EndBend: *mut i32,
        Material: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNumberDetailedWallStacks(
        NumberWallStacks: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailed_OneWallStack(
        WallStackIndex: i32,
        GUID: *mut BSTR,
        TowerID: *mut i32,
        NumberPiers: *mut i32,
        NUmberSpandrels: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OneWallStack_OnePierOutputInfo(
        WallStackIndex: i32,
        PierIndex: i32,
        StoryID: *mut i32,
        ETABSStoryName: *mut BSTR,
        NumberDesignLegs: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OneWallStack_OnePier_OneDesignLegOutputInfo(
        WallStackIndex: i32,
        PierIndex: i32,
        DesignLegIndex: i32,
        GUID: *mut BSTR,
        PierLabel: *mut BSTR,
        X1: *mut f64,
        Y1: *mut f64,
        z1: *mut f64,
        X2: *mut f64,
        Y2: *mut f64,
        z2: *mut f64,
        ZLevel: *mut f64,
        NumberVerticalBars: *mut i32,
        NumberHorizontalBars: *mut i32,
        TotalAreaObjects: *mut i32,
        AreaObjectNames: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneVerticalBarInfo(
        WallStackIndex: i32,
        PierIndex: i32,
        DesignLegIndex: i32,
        VerticalBarIndex: i32,
        GUID: *mut BSTR,
        BarSizeFirst_Dia: *mut f64,
        BarSizeFirst_Area: *mut f64,
        BarSizeFirst_Fy: *mut f64,
        BarSizeFirst_Notation: *mut BSTR,
        BarSizeLast_Dia: *mut f64,
        BarSizeLast_Area: *mut f64,
        BarSizeLast_Fy: *mut f64,
        BarSizeLast_Notation: *mut BSTR,
        BarSizeOthers_Dia: *mut f64,
        BarSizeOthers_Area: *mut f64,
        BarSizeOthers_Fy: *mut f64,
        BarSizeOthers_Notation: *mut BSTR,
        Number: *mut i32,
        StartX: *mut f64,
        StartY: *mut f64,
        EndX: *mut f64,
        EndY: *mut f64,
        StartBarBend: *mut i32,
        EndBarBend: *mut i32,
        OffsetZ: *mut f64,
        BarLength: *mut f64,
        LocationCode: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBarInfo(
        WallStackIndex: i32,
        PierIndex: i32,
        DesignLegIndex: i32,
        TieBarIndex: i32,
        GUID: *mut BSTR,
        BarSize_Dia: *mut f64,
        BarSize_Area: *mut f64,
        BarSize_Fy: *mut f64,
        BarSize_Notation: *mut BSTR,
        Spacing: *mut f64,
        StartZ: *mut f64,
        EndZ: *mut f64,
        TieShape: *mut i32,
        NumberOfTiePlines: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OneWallStack_OnePier_OneDesignLeg_OneTieBar_OneTiePlineInfo(
        WallStackIndex: i32,
        PierIndex: i32,
        DesignLegIndex: i32,
        TieBarIndex: i32,
        TiePLineIndex: i32,
        Dia: *mut f64,
        NumberPoints: *mut i32,
        ZoneLength: *mut f64,
        LocationCode: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OnePier_OneDesignLeg_OneTieBar_OneTiePline_OnePoint(
        WallStackIndex: i32,
        PierIndex: i32,
        DesignLegIndex: i32,
        TieBarIndex: i32,
        TiePLineIndex: i32,
        TPLinePointIndex: i32,
        X: *mut f64,
        Y: *mut f64,
        Z: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OneWallStack_OneSpandrelOutputInfo(
        WallStackIndex: i32,
        SpandrelIndex: i32,
        GUID: *mut BSTR,
        Name: *mut BSTR,
        Height: *mut f64,
        Width: *mut f64,
        Thickness: *mut f64,
        CoverLongBar: *mut f64,
        CoverStirrups: *mut f64,
        X1: *mut f64,
        Y1: *mut f64,
        z1: *mut f64,
        X2: *mut f64,
        Y2: *mut f64,
        z2: *mut f64,
        NumberLongBars: *mut i32,
        NumberStirrups: *mut i32,
        TotalAreaObjects: *mut i32,
        AreaObjectNames: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OneWallStack_OneSpandrel_OneLongBarInfo(
        WallStackIndex: i32,
        SpandrelIndex: i32,
        LongBarIndex: i32,
        BarSize_Dia: *mut f64,
        BarSize_Area: *mut f64,
        BarSize_Fy: *mut f64,
        BarSize_Notation: *mut BSTR,
        NumberPoints: *mut i32,
        X: *mut SAFEARRAY,
        Y: *mut SAFEARRAY,
        Z: *mut SAFEARRAY,
        StartType: *mut i32,
        EndType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedWall_OneWallStack_OneSpandrel_OneStirrupsInfo(
        WallStackIndex: i32,
        SpandrelIndex: i32,
        StirrupsIndex: i32,
        BarSize_Dia: *mut f64,
        BarSize_Area: *mut f64,
        BarSize_Fy: *mut f64,
        BarSize_Notation: *mut BSTR,
        X1: *mut f64,
        X2: *mut f64,
        Spacing: *mut f64,
        NumberLegs: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedBeamLines_1(
        NumberItems: *mut i32,
        TowerNames: *mut SAFEARRAY,
        StoryNames: *mut SAFEARRAY,
        BeamLineIDs: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDetailedBeamLineData_2(
        TowerName: BSTR,
        StoryName: BSTR,
        BeamLineID: BSTR,
        NumberOfObjects: *mut i32,
        ObjectUniqueNames: *mut SAFEARRAY,
        NumberSpans: *mut i32,
        SpanLength: *mut SAFEARRAY,
        NumLongBars: *mut SAFEARRAY,
        LongBarGUID: *mut SAFEARRAY,
        LongBarDiameter: *mut SAFEARRAY,
        LongBarNotation: *mut SAFEARRAY,
        LongBarStartDist: *mut SAFEARRAY,
        LongBarStartBend: *mut SAFEARRAY,
        LongBarEndBend: *mut SAFEARRAY,
        LongBarLength: *mut SAFEARRAY,
        LongBarNumLayers: *mut SAFEARRAY,
        NumTieBars: *mut SAFEARRAY,
        NumTieVertLegs: *mut SAFEARRAY,
        TieBarGUID: *mut SAFEARRAY,
        TieBarDiameter: *mut SAFEARRAY,
        TieBarNotation: *mut SAFEARRAY,
        TieBarStartDist: *mut SAFEARRAY,
        TieBarSpacing: *mut SAFEARRAY,
        TieBarType: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSimilarBeamLines_1(
        TowerName: BSTR,
        StoryName: BSTR,
        BeamLineID: BSTR,
        NumberSimilarBeams: *mut i32,
        NumberUniqueObjects: *mut SAFEARRAY,
        ObjectUniqueNames: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf7a0f69d, 0xdfdd, 0x41f6, 0xaf, 0x32, 0x76, 0xc5, 0xb8, 0xa8, 0x26, 0xb6)]
interface cEditArea(cEditAreaVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0xe1ebb47d, 0x1b93, 0x4b93, 0xa0, 0x10, 0x26, 0x60, 0x41, 0x26, 0xd7, 0xa8)]
interface cEditFrame(cEditFrameVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeConnectivity(
        Name: BSTR,
        Point1: BSTR,
        Point2: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x09861929, 0xe810, 0x487a, 0x92, 0x28, 0x51, 0xb3, 0x78, 0xfd, 0x3c, 0xdf)]
interface cEditGeneral(cEditGeneralVtbl): IDispatch(IDispatchVtbl) {
    fn Move(
        DX: f64,
        DY: f64,
        DZ: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x6a5c2fed, 0xecf4, 0x4f61, 0x81, 0x39, 0xf2, 0xb4, 0x72, 0x51, 0x63, 0x10)]
interface cEditPoint(cEditPointVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0x5684e943, 0x33cc, 0x4d03, 0x8a, 0xfe, 0x8b, 0xbe, 0xfc, 0x56, 0xd4, 0xc9)]
interface cFile(cFileVtbl): IDispatch(IDispatchVtbl) {
    fn NewBlank(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn OpenFile(
        FileName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Save(
        FileName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetFilePath(
        FilePath: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn NewSteelDeck(
        NumberStorys: i32,
        TypicalStoryHeight: f64,
        BottomStoryHeight: f64,
        NumberLinesX: i32,
        NumberLinesY: i32,
        SpacingX: f64,
        SpacingY: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn NewGridOnly(
        NumberStorys: i32,
        TypicalStoryHeight: f64,
        BottomStoryHeight: f64,
        NumberLinesX: i32,
        NumberLinesY: i32,
        SpacingX: f64,
        SpacingY: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x336b5859, 0x2cf7, 0x4c67, 0x8a, 0x7b, 0x41, 0x21, 0x7e, 0x4e, 0x2c, 0x4a)]
interface cDatabaseTables(cDatabaseTablesVtbl): IDispatch(IDispatchVtbl) {
    fn ApplyEditedTables(
        FillImportLog: VARIANT_BOOL,
        NumFatalErrors: *mut i32,
        NumErrorMsgs: *mut i32,
        NumWarnMsgs: *mut i32,
        NumInfoMsgs: *mut i32,
        ImportLog: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CancelTableEditing(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAllFieldsInTable(
        TableKey: BSTR,
        TableVersion: *mut i32,
        NumberFields: *mut i32,
        FieldKey: *mut SAFEARRAY,
        FieldName: *mut SAFEARRAY,
        Description: *mut SAFEARRAY,
        UnitsString: *mut SAFEARRAY,
        IsImportable: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAllTables(
        NumberTables: *mut i32,
        TableKey: *mut SAFEARRAY,
        TableName: *mut SAFEARRAY,
        ImportType: *mut SAFEARRAY,
        IsEmpty: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAvailableTables(
        NumberTables: *mut i32,
        TableKey: *mut SAFEARRAY,
        TableName: *mut SAFEARRAY,
        ImportType: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadCasesSelectedForDisplay(
        NumberSelectedLoadCases: *mut i32,
        LoadCaseList: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadCombinationsSelectedForDisplay(
        NumberSelectedLoadCombinations: *mut i32,
        LoadCombinationList: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadPatternsSelectedForDisplay(
        NumberSelectedLoadPatterns: *mut i32,
        LoadPatternList: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTableForDisplayArray(
        TableKey: BSTR,
        FieldKeyList: *mut SAFEARRAY,
        GroupName: BSTR,
        TableVersion: *mut i32,
        FieldsKeysIncluded: *mut SAFEARRAY,
        NumberRecords: *mut i32,
        TableData: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTableForDisplayCSVFile(
        TableKey: BSTR,
        FieldKeyList: *mut SAFEARRAY,
        GroupName: BSTR,
        TableVersion: *mut i32,
        csvFilePath: BSTR,
        sepChar: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTableForDisplayCSVString(
        TableKey: BSTR,
        FieldKeyList: *mut SAFEARRAY,
        GroupName: BSTR,
        TableVersion: *mut i32,
        csvString: *mut BSTR,
        sepChar: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTableForDisplayXMLString(
        TableKey: BSTR,
        FieldKeyList: *mut SAFEARRAY,
        GroupName: BSTR,
        IncludeSchema: VARIANT_BOOL,
        TableVersion: *mut i32,
        XMLTableData: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTableForEditingArray(
        TableKey: BSTR,
        GroupName: BSTR,
        TableVersion: *mut i32,
        FieldsKeysIncluded: *mut SAFEARRAY,
        NumberRecords: *mut i32,
        TableData: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTableForEditingCSVFile(
        TableKey: BSTR,
        GroupName: BSTR,
        TableVersion: *mut i32,
        csvFilePath: BSTR,
        sepChar: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTableForEditingCSVString(
        TableKey: BSTR,
        GroupName: BSTR,
        TableVersion: *mut i32,
        csvString: *mut BSTR,
        sepChar: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadCasesSelectedForDisplay(
        LoadCaseList: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadCombinationsSelectedForDisplay(
        LoadCombinationList: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadPatternsSelectedForDisplay(
        LoadPatternList: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTableForEditingArray(
        TableKey: BSTR,
        TableVersion: *mut i32,
        FieldsKeysIncluded: *mut SAFEARRAY,
        NumberRecords: i32,
        TableData: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTableForEditingCSVFile(
        TableKey: BSTR,
        TableVersion: *mut i32,
        csvFilePath: BSTR,
        sepChar: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTableForEditingCSVString(
        TableKey: BSTR,
        TableVersion: *mut i32,
        csvString: *mut BSTR,
        sepChar: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ShowTablesInExcel(
        TableKeyList: *mut SAFEARRAY,
        WindowHandle: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetObsoleteTableKeyList(
        NumberTableKeys: *mut i32,
        TableKeyList: *mut SAFEARRAY,
        NotesList: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOutputOptionsForDisplay(
        IsUserBaseReactionLocation: *mut VARIANT_BOOL,
        UserBaseReactionX: *mut f64,
        UserBaseReactionY: *mut f64,
        UserBaseReactionZ: *mut f64,
        IsAllModes: *mut VARIANT_BOOL,
        StartMode: *mut i32,
        EndMode: *mut i32,
        IsAllBucklingModes: *mut VARIANT_BOOL,
        StartBucklingMode: *mut i32,
        EndBucklingMode: *mut i32,
        MultistepStatic: *mut i32,
        NonlinearStatic: *mut i32,
        ModalHistory: *mut i32,
        DirectHistory: *mut i32,
        Combo: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOutputOptionsForDisplay(
        IsUserBaseReactionLocation: VARIANT_BOOL,
        UserBaseReactionX: f64,
        UserBaseReactionY: f64,
        UserBaseReactionZ: f64,
        IsAllModes: VARIANT_BOOL,
        StartMode: i32,
        EndMode: i32,
        IsAllBucklingModes: VARIANT_BOOL,
        StartBucklingMode: i32,
        EndBucklingMode: i32,
        MultistepStatic: i32,
        NonlinearStatic: i32,
        ModalHistory: i32,
        DirectHistory: i32,
        Combo: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xed2db520, 0x52d4, 0x4b27, 0x88, 0x38, 0xa5, 0xe9, 0xc2, 0x71, 0xf8, 0xc3)]
interface cAreaObj(cAreaObjVtbl): IDispatch(IDispatchVtbl) {
    fn AddByCoord(
        NumberPoints: i32,
        X: *mut SAFEARRAY,
        Y: *mut SAFEARRAY,
        Z: *mut SAFEARRAY,
        Name: *mut BSTR,
        PropName: BSTR,
        UserName: BSTR,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AddByPoint(
        NumberPoints: i32,
        Point: *mut SAFEARRAY,
        Name: *mut BSTR,
        PropName: BSTR,
        UserName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadTemperature(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadUniform(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadUniformToFrame(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadWindPressure(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteMass(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteModifiers(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteSpring(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetEdgeConstraint(
        Name: BSTR,
        ConstraintExists: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetElm(
        Name: BSTR,
        NElm: *mut i32,
        Elm: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGUID(
        Name: BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadTemperature(
        Name: BSTR,
        NumberItems: *mut i32,
        AreaName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        Value: *mut SAFEARRAY,
        PatternName: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadUniform(
        Name: BSTR,
        NumberItems: *mut i32,
        AreaName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Dir: *mut SAFEARRAY,
        Value: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadUniformToFrame(
        Name: BSTR,
        NumberItems: *mut i32,
        AreaName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Dir: *mut SAFEARRAY,
        Value: *mut SAFEARRAY,
        DistType: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadWindPressure(
        Name: BSTR,
        NumberItems: *mut i32,
        AreaName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        Cp: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLocalAxes(
        Name: BSTR,
        Ang: *mut f64,
        Advanced: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMass(
        Name: BSTR,
        MassOverL2: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMaterialOverwrite(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOpening(
        Name: BSTR,
        IsOpening: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPoints(
        Name: BSTR,
        NumberPoints: *mut i32,
        Point: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetProperty(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSelected(
        Name: BSTR,
        Selected: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSelectedEdge(
        Name: BSTR,
        NumberEdges: *mut i32,
        Selected: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTransformationMatrix(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        IsGlobal: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetEdgeConstraint(
        Name: BSTR,
        ConstraintExists: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroupAssign(
        Name: BSTR,
        GroupName: BSTR,
        Remove: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGUID(
        Name: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadTemperature(
        Name: BSTR,
        LoadPat: BSTR,
        MyType: i32,
        Value: f64,
        PatternName: BSTR,
        Replace: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadUniform(
        Name: BSTR,
        LoadPat: BSTR,
        Value: f64,
        Dir: i32,
        Replace: VARIANT_BOOL,
        CSys: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadUniformToFrame(
        Name: BSTR,
        LoadPat: BSTR,
        Value: f64,
        Dir: i32,
        DistType: i32,
        Replace: VARIANT_BOOL,
        CSys: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadWindPressure(
        Name: BSTR,
        LoadPat: BSTR,
        MyType: i32,
        Cp: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLocalAxes(
        Name: BSTR,
        Ang: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMass(
        Name: BSTR,
        MassOverL2: f64,
        Replace: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMaterialOverwrite(
        Name: BSTR,
        PropName: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOpening(
        Name: BSTR,
        IsOpening: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetProperty(
        Name: BSTR,
        PropName: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSelected(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSelectedEdge(
        Name: BSTR,
        EdgeNum: i32,
        Selected: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroupAssign(
        Name: BSTR,
        NumberGroups: *mut i32,
        Groups: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignOrientation(
        Name: BSTR,
        DesignOrientation: *mut eAreaDesignOrientation,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameListOnStory(
        StoryName: BSTR,
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDiaphragm(
        Name: BSTR,
        DiaphragmName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDiaphragm(
        Name: BSTR,
        DiaphragmName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLabelNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        MyLabel: *mut SAFEARRAY,
        MyStory: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLabelFromName(
        Name: BSTR,
        Label: *mut BSTR,
        Story: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameFromLabel(
        Label: BSTR,
        Story: BSTR,
        Name: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarDataPier(
        Name: BSTR,
        NumberRebarLayers: *mut i32,
        LayerID: *mut SAFEARRAY,
        LayerType: *mut SAFEARRAY,
        ClearCover: *mut SAFEARRAY,
        BarSizeName: *mut SAFEARRAY,
        BarArea: *mut SAFEARRAY,
        BarSpacing: *mut SAFEARRAY,
        NumberBars: *mut SAFEARRAY,
        Confined: *mut SAFEARRAY,
        EndZoneLength: *mut SAFEARRAY,
        EndZoneThickness: *mut SAFEARRAY,
        EndZoneOffset: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRebarDataSpandrel(
        Name: BSTR,
        NumberRebarLayers: *mut i32,
        LayerID: *mut SAFEARRAY,
        LayerType: *mut SAFEARRAY,
        ClearCover: *mut SAFEARRAY,
        BarSizeIndex: *mut SAFEARRAY,
        BarArea: *mut SAFEARRAY,
        BarSpacing: *mut SAFEARRAY,
        NumberBars: *mut SAFEARRAY,
        Confined: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAllAreas(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        DesignOrientation: *mut SAFEARRAY,
        NumberBoundaryPts: *mut i32,
        PointDelimiter: *mut SAFEARRAY,
        PointNames: *mut SAFEARRAY,
        PointX: *mut SAFEARRAY,
        PointY: *mut SAFEARRAY,
        PointZ: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPier(
        Name: BSTR,
        PierName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPier(
        Name: BSTR,
        PierName: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpandrel(
        Name: BSTR,
        SpandrelName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpandrel(
        Name: BSTR,
        SpandrelName: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpringAssignment(
        Name: BSTR,
        SpringProp: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpringAssignment(
        Name: BSTR,
        SpringProp: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOffsets3(
        Name: BSTR,
        NumberPoints: *mut i32,
        Offsets: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCurvedEdges(
        Name: BSTR,
        NumEdges: *mut i32,
        CurveType: *mut SAFEARRAY,
        Tension: *mut SAFEARRAY,
        NumPoints: *mut SAFEARRAY,
        GX: *mut SAFEARRAY,
        GY: *mut SAFEARRAY,
        GZ: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf87e3a66, 0x8381, 0x4202, 0x89, 0x7f, 0x46, 0x68, 0x3a, 0x84, 0x77, 0xd4)]
interface cFrameObj(cFrameObjVtbl): IDispatch(IDispatchVtbl) {
    fn AddByCoord(
        XI: f64,
        YI: f64,
        ZI: f64,
        XJ: f64,
        YJ: f64,
        ZJ: f64,
        Name: *mut BSTR,
        PropName: BSTR,
        UserName: BSTR,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AddByPoint(
        Point1: BSTR,
        Point2: BSTR,
        Name: *mut BSTR,
        PropName: BSTR,
        UserName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        MyType: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLateralBracing(
        Name: BSTR,
        MyType: i32,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadDistributed(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadPoint(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadTemperature(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteMass(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteModifiers(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteSpring(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignProcedure(
        Name: BSTR,
        MyType: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetElm(
        Name: BSTR,
        NElm: *mut i32,
        Elm: *mut SAFEARRAY,
        RDI: *mut SAFEARRAY,
        RDJ: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetEndLengthOffset(
        Name: BSTR,
        AutoOffset: *mut VARIANT_BOOL,
        Length1: *mut f64,
        Length2: *mut f64,
        RZ: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGUID(
        Name: BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetHingeAssigns(
        Name: BSTR,
        NumberHinges: *mut i32,
        HingeNum: *mut SAFEARRAY,
        Prop: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        Behavior: *mut SAFEARRAY,
        Source: *mut SAFEARRAY,
        RD: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetHingeAssigns_1(
        Name: BSTR,
        NumberHinges: *mut i32,
        HingeNum: *mut SAFEARRAY,
        Prop: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        Behavior: *mut SAFEARRAY,
        Source: *mut SAFEARRAY,
        LocType: *mut SAFEARRAY,
        RD: *mut SAFEARRAY,
        AD: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetInsertionPoint(
        Name: BSTR,
        CardinalPoint: *mut i32,
        Mirror2: *mut VARIANT_BOOL,
        StiffTransform: *mut VARIANT_BOOL,
        Offset1: *mut SAFEARRAY,
        Offset2: *mut SAFEARRAY,
        CSys: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetInsertionPoint_1(
        Name: BSTR,
        CardinalPoint: *mut i32,
        Mirror2: *mut VARIANT_BOOL,
        Mirror3: *mut VARIANT_BOOL,
        StiffTransform: *mut VARIANT_BOOL,
        Offset1: *mut SAFEARRAY,
        Offset2: *mut SAFEARRAY,
        CSys: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLateralBracing(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        Loc: *mut SAFEARRAY,
        RD1: *mut SAFEARRAY,
        RD2: *mut SAFEARRAY,
        Dist1: *mut SAFEARRAY,
        Dist2: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadDistributed(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Dir: *mut SAFEARRAY,
        RD1: *mut SAFEARRAY,
        RD2: *mut SAFEARRAY,
        Dist1: *mut SAFEARRAY,
        Dist2: *mut SAFEARRAY,
        Val1: *mut SAFEARRAY,
        Val2: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadPoint(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        Dir: *mut SAFEARRAY,
        RelDist: *mut SAFEARRAY,
        Dist: *mut SAFEARRAY,
        Val: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadTemperature(
        Name: BSTR,
        NumberItems: *mut i32,
        FrameName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        MyType: *mut SAFEARRAY,
        Val: *mut SAFEARRAY,
        PatternName: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLocalAxes(
        Name: BSTR,
        Ang: *mut f64,
        Advanced: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMass(
        Name: BSTR,
        MassOverL: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMaterialOverwrite(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetOutputStations(
        Name: BSTR,
        MyType: *mut i32,
        MaxSegSize: *mut f64,
        MinSections: *mut i32,
        NoOutPutAndDesignAtElementEnds: *mut VARIANT_BOOL,
        NoOutPutAndDesignAtPointLoads: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPoints(
        Name: BSTR,
        Point1: *mut BSTR,
        Point2: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetReleases(
        Name: BSTR,
        II: *mut SAFEARRAY,
        JJ: *mut SAFEARRAY,
        StartValue: *mut SAFEARRAY,
        EndValue: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSection(
        Name: BSTR,
        PropName: *mut BSTR,
        SAuto: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSectionNonPrismatic(
        Name: BSTR,
        PropName: *mut BSTR,
        SVarTotalLength: *mut f64,
        SVarRelStartLoc: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSelected(
        Name: BSTR,
        Selected: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTCLimits(
        Name: BSTR,
        LimitCompressionExists: *mut VARIANT_BOOL,
        LimitCompression: *mut f64,
        LimitTensionExists: *mut VARIANT_BOOL,
        LimitTension: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTransformationMatrix(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        IsGlobal: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTypeOAPI(
        Name: BSTR,
        MyType: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDesignProcedure(
        Name: BSTR,
        MyType: i32,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetEndLengthOffset(
        Name: BSTR,
        AutoOffset: VARIANT_BOOL,
        Length1: f64,
        Length2: f64,
        RZ: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroupAssign(
        Name: BSTR,
        GroupName: BSTR,
        Remove: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGUID(
        Name: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetInsertionPoint(
        Name: BSTR,
        CardinalPoint: i32,
        Mirror2: VARIANT_BOOL,
        StiffTransform: VARIANT_BOOL,
        Offset1: *mut SAFEARRAY,
        Offset2: *mut SAFEARRAY,
        CSys: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetInsertionPoint_1(
        Name: BSTR,
        CardinalPoint: i32,
        Mirror2: VARIANT_BOOL,
        Mirror3: VARIANT_BOOL,
        StiffTransform: VARIANT_BOOL,
        Offset1: *mut SAFEARRAY,
        Offset2: *mut SAFEARRAY,
        CSys: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLateralBracing(
        Name: BSTR,
        MyType: i32,
        Loc: i32,
        MyDist1: f64,
        MyDist2: f64,
        RelDist: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadDistributed(
        Name: BSTR,
        LoadPat: BSTR,
        MyType: i32,
        Dir: i32,
        Dist1: f64,
        Dist2: f64,
        Val1: f64,
        Val2: f64,
        CSys: BSTR,
        RelDist: VARIANT_BOOL,
        Replace: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadPoint(
        Name: BSTR,
        LoadPat: BSTR,
        MyType: i32,
        Dir: i32,
        Dist: f64,
        Val: f64,
        CSys: BSTR,
        RelDist: VARIANT_BOOL,
        Replace: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadTemperature(
        Name: BSTR,
        LoadPat: BSTR,
        MyType: i32,
        Val: f64,
        PatternName: BSTR,
        Replace: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLocalAxes(
        Name: BSTR,
        Ang: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMass(
        Name: BSTR,
        MassOverL: f64,
        Replace: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMaterialOverwrite(
        Name: BSTR,
        PropName: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetModifiers(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetOutputStations(
        Name: BSTR,
        MyType: i32,
        MaxSegSize: f64,
        MinSections: i32,
        NoOutPutAndDesignAtElementEnds: VARIANT_BOOL,
        NoOutPutAndDesignAtPointLoads: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetReleases(
        Name: BSTR,
        II: *mut SAFEARRAY,
        JJ: *mut SAFEARRAY,
        StartValue: *mut SAFEARRAY,
        EndValue: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSection(
        Name: BSTR,
        PropName: BSTR,
        ItemType: eItemType,
        SVarRelStartLoc: f64,
        SVarTotalLength: f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSelected(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetTCLimits(
        Name: BSTR,
        LimitCompressionExists: VARIANT_BOOL,
        LimitCompression: f64,
        LimitTensionExists: VARIANT_BOOL,
        LimitTension: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroupAssign(
        Name: BSTR,
        NumberGroups: *mut i32,
        Groups: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetColumnSpliceOverwrite(
        Name: BSTR,
        SpliceOption: *mut i32,
        Height: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameListOnStory(
        StoryName: BSTR,
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLabelNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        MyLabel: *mut SAFEARRAY,
        MyStory: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLabelFromName(
        Name: BSTR,
        Label: *mut BSTR,
        Story: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameFromLabel(
        Label: BSTR,
        Story: BSTR,
        Name: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSupports(
        Name: BSTR,
        SupportName1: *mut BSTR,
        SupportType1: *mut eObjType,
        SupportName2: *mut BSTR,
        SupportType2: *mut eObjType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAllFrames(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        PropName: *mut SAFEARRAY,
        StoryName: *mut SAFEARRAY,
        PointName1: *mut SAFEARRAY,
        PointName2: *mut SAFEARRAY,
        Point1X: *mut SAFEARRAY,
        Point1Y: *mut SAFEARRAY,
        Point1Z: *mut SAFEARRAY,
        Point2X: *mut SAFEARRAY,
        Point2Y: *mut SAFEARRAY,
        Point2Z: *mut SAFEARRAY,
        Angle: *mut SAFEARRAY,
        Offset1X: *mut SAFEARRAY,
        Offset2X: *mut SAFEARRAY,
        Offset1Y: *mut SAFEARRAY,
        Offset2Y: *mut SAFEARRAY,
        Offset1Z: *mut SAFEARRAY,
        Offset2Z: *mut SAFEARRAY,
        CardinalPoint: *mut SAFEARRAY,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDesignOrientation(
        Name: BSTR,
        DesignOrientation: *mut eFrameDesignOrientation,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPier(
        Name: BSTR,
        PierName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPier(
        Name: BSTR,
        PierName: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpandrel(
        Name: BSTR,
        SpandrelName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetColumnSpliceOverwrite(
        Name: BSTR,
        SpliceOption: i32,
        Height: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpandrel(
        Name: BSTR,
        SpandrelName: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpringAssignment(
        Name: BSTR,
        SpringProp: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpringAssignment(
        Name: BSTR,
        SpringProp: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCurved_2(
        Name: BSTR,
        CurveType: *mut i32,
        Tension: *mut f64,
        NumPnts: *mut i32,
        GX: *mut SAFEARRAY,
        GY: *mut SAFEARRAY,
        GZ: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xa28b3e57, 0x3c5e, 0x4e9e, 0x8c, 0x57, 0xe3, 0xbd, 0xf9, 0x28, 0xa8, 0xd1)]
interface cLinkObj(cLinkObjVtbl): IDispatch(IDispatchVtbl) {
    fn AddByCoord(
        XI: f64,
        YI: f64,
        ZI: f64,
        XJ: f64,
        YJ: f64,
        ZJ: f64,
        Name: *mut BSTR,
        IsSingleJoint: VARIANT_BOOL,
        PropName: BSTR,
        UserName: BSTR,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn AddByPoint(
        Point1: BSTR,
        Point2: BSTR,
        Name: *mut BSTR,
        IsSingleJoint: VARIANT_BOOL,
        PropName: BSTR,
        UserName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Delete(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetElm(
        Name: BSTR,
        Elm: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGUID(
        Name: BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLocalAxes(
        Name: BSTR,
        Ang: *mut f64,
        Advanced: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLocalAxesAdvanced(
        Name: BSTR,
        Active: *mut VARIANT_BOOL,
        AxVectOpt: *mut i32,
        AxCSys: *mut BSTR,
        AxDir: *mut SAFEARRAY,
        AxPt: *mut SAFEARRAY,
        AxVect: *mut SAFEARRAY,
        Plane2: *mut i32,
        PlVectOpt: *mut i32,
        PlCSys: *mut BSTR,
        PlDir: *mut SAFEARRAY,
        PlPt: *mut SAFEARRAY,
        PlVect: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPoints(
        Name: BSTR,
        Point1: *mut BSTR,
        Point2: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetProperty(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSelected(
        Name: BSTR,
        Selected: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTransformationMatrix(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        IsGlobal: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroupAssign(
        Name: BSTR,
        GroupName: BSTR,
        Remove: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGUID(
        Name: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLocalAxes(
        Name: BSTR,
        Ang: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLocalAxesAdvanced(
        Name: BSTR,
        Active: VARIANT_BOOL,
        AxVectOpt: i32,
        AxCSys: BSTR,
        AxDir: *mut SAFEARRAY,
        AxPt: *mut SAFEARRAY,
        AxVect: *mut SAFEARRAY,
        Plane2: i32,
        PlVectOpt: i32,
        PlCSys: BSTR,
        PlDir: *mut SAFEARRAY,
        PlPt: *mut SAFEARRAY,
        PlVect: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetProperty(
        Name: BSTR,
        PropName: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSelected(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroupAssign(
        Name: BSTR,
        NumberGroups: *mut i32,
        Groups: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameListOnStory(
        StoryName: BSTR,
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x6674645d, 0xe89a, 0x459f, 0xa4, 0x46, 0x8d, 0xb2, 0x04, 0x57, 0x7c, 0x60)]
interface cPointObj(cPointObjVtbl): IDispatch(IDispatchVtbl) {
    fn AddCartesian(
        X: f64,
        Y: f64,
        Z: f64,
        Name: *mut BSTR,
        UserName: BSTR,
        CSys: BSTR,
        MergeOff: VARIANT_BOOL,
        MergeNumber: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountLoadDispl(
        Count: *mut i32,
        Name: BSTR,
        LoadPat: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountLoadForce(
        Count: *mut i32,
        Name: BSTR,
        LoadPat: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountPanelZone(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountRestraint(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn CountSpring(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadDispl(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteLoadForce(
        Name: BSTR,
        LoadPat: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteMass(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeletePanelZone(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteRestraint(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteSpecialPoint(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn DeleteSpring(
        Name: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCommonTo(
        Name: BSTR,
        CommonTo: *mut i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetConnectivity(
        Name: BSTR,
        NumberItems: *mut i32,
        ObjectType: *mut SAFEARRAY,
        ObjectName: *mut SAFEARRAY,
        PointNumber: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCoordCartesian(
        Name: BSTR,
        X: *mut f64,
        Y: *mut f64,
        Z: *mut f64,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCoordCylindrical(
        Name: BSTR,
        R: *mut f64,
        Theta: *mut f64,
        Z: *mut f64,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetCoordSpherical(
        Name: BSTR,
        R: *mut f64,
        A: *mut f64,
        B: *mut f64,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetElm(
        Name: BSTR,
        Elm: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGUID(
        Name: BSTR,
        GUID: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadDispl(
        Name: BSTR,
        NumberItems: *mut i32,
        PointName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        LcStep: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        U1: *mut SAFEARRAY,
        U2: *mut SAFEARRAY,
        U3: *mut SAFEARRAY,
        R1: *mut SAFEARRAY,
        R2: *mut SAFEARRAY,
        R3: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadForce(
        Name: BSTR,
        NumberItems: *mut i32,
        PointName: *mut SAFEARRAY,
        LoadPat: *mut SAFEARRAY,
        LcStep: *mut SAFEARRAY,
        CSys: *mut SAFEARRAY,
        F1: *mut SAFEARRAY,
        F2: *mut SAFEARRAY,
        F3: *mut SAFEARRAY,
        M1: *mut SAFEARRAY,
        M2: *mut SAFEARRAY,
        M3: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLocalAxes(
        Name: BSTR,
        A: *mut f64,
        B: *mut f64,
        C: *mut f64,
        Advanced: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetMass(
        Name: BSTR,
        M: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetPanelZone(
        Name: BSTR,
        PropType: *mut i32,
        Thickness: *mut f64,
        K1: *mut f64,
        K2: *mut f64,
        LinkProp: *mut BSTR,
        Connectivity: *mut i32,
        LocalAxisFrom: *mut i32,
        LocalAxisAngle: *mut f64,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetRestraint(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSelected(
        Name: BSTR,
        Selected: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpecialPoint(
        Name: BSTR,
        SpecialPoint: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpring(
        Name: BSTR,
        K: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpringCoupled(
        Name: BSTR,
        K: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTransformationMatrix(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        IsGlobal: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn IsSpringCoupled(
        Name: BSTR,
        IsCoupled: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroupAssign(
        Name: BSTR,
        GroupName: BSTR,
        Remove: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGUID(
        Name: BSTR,
        GUID: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadDispl(
        Name: BSTR,
        LoadPat: BSTR,
        Value: *mut SAFEARRAY,
        Replace: VARIANT_BOOL,
        CSys: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetLoadForce(
        Name: BSTR,
        LoadPat: BSTR,
        Value: *mut SAFEARRAY,
        Replace: VARIANT_BOOL,
        CSys: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMass(
        Name: BSTR,
        M: *mut SAFEARRAY,
        ItemType: eItemType,
        IsLocalCSys: VARIANT_BOOL,
        Replace: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMassByVolume(
        Name: BSTR,
        MatProp: BSTR,
        M: *mut SAFEARRAY,
        ItemType: eItemType,
        IsLocalCSys: VARIANT_BOOL,
        Replace: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetMassByWeight(
        Name: BSTR,
        M: *mut SAFEARRAY,
        ItemType: eItemType,
        IsLocalCSys: VARIANT_BOOL,
        Replace: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetPanelZone(
        Name: BSTR,
        PropType: i32,
        Thickness: f64,
        K1: f64,
        K2: f64,
        LinkProp: BSTR,
        Connectivity: i32,
        LocalAxisFrom: i32,
        LocalAxisAngle: f64,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetRestraint(
        Name: BSTR,
        Value: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSelected(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpecialPoint(
        Name: BSTR,
        SpecialPoint: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpring(
        Name: BSTR,
        K: *mut SAFEARRAY,
        ItemType: eItemType,
        IsLocalCSys: VARIANT_BOOL,
        Replace: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpringCoupled(
        Name: BSTR,
        K: *mut SAFEARRAY,
        ItemType: eItemType,
        IsLocalCSys: VARIANT_BOOL,
        Replace: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroupAssign(
        Name: BSTR,
        NumberGroups: *mut i32,
        Groups: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameListOnStory(
        StoryName: BSTR,
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDiaphragm(
        Name: BSTR,
        DiaphragmOption: *mut eDiaphragmOption,
        DiaphragmName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDiaphragm(
        Name: BSTR,
        DiaphragmOption: eDiaphragmOption,
        DiaphragmName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLabelNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        MyLabel: *mut SAFEARRAY,
        MyStory: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLabelFromName(
        Name: BSTR,
        Label: *mut BSTR,
        Story: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameFromLabel(
        Label: BSTR,
        Story: BSTR,
        Name: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetAllPoints(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        X: *mut SAFEARRAY,
        Y: *mut SAFEARRAY,
        Z: *mut SAFEARRAY,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSpringAssignment(
        Name: BSTR,
        SpringProp: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSpringAssignment(
        Name: BSTR,
        SpringProp: BSTR,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x294bbf0b, 0x8ac2, 0x4593, 0x80, 0xd5, 0xbb, 0xf8, 0xc9, 0xe0, 0xe1, 0x65)]
interface cTendonObj(cTendonObjVtbl): IDispatch(IDispatchVtbl) {
    fn ChangeName(
        Name: BSTR,
        NewName: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Count(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameList(
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetProperty(
        Name: BSTR,
        PropName: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSelected(
        Name: BSTR,
        Selected: *mut VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetTendonGeometry(
        Name: BSTR,
        NumberPoints: *mut i32,
        X: *mut SAFEARRAY,
        Y: *mut SAFEARRAY,
        Z: *mut SAFEARRAY,
        CSys: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetSelected(
        Name: BSTR,
        Selected: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetGroupAssign(
        Name: BSTR,
        NumberGroups: *mut i32,
        Groups: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetGroupAssign(
        Name: BSTR,
        GroupName: BSTR,
        Remove: VARIANT_BOOL,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNameListOnStory(
        StoryName: BSTR,
        NumberNames: *mut i32,
        MyName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLoadForceStress_1(
        Name: BSTR,
        NumberItems: *mut i32,
        TendonName: *mut SAFEARRAY,
        LoadPatFinal: *mut SAFEARRAY,
        LoadPatTransfer: *mut SAFEARRAY,
        JackFrom: *mut SAFEARRAY,
        LoadType: *mut SAFEARRAY,
        LoadValue: *mut SAFEARRAY,
        LossSpecification: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLossesDetailed(
        Name: BSTR,
        NumberItems: *mut i32,
        TendonName: *mut SAFEARRAY,
        CurvatureCoeff: *mut SAFEARRAY,
        WobbleCoeff: *mut SAFEARRAY,
        LossAnchorage: *mut SAFEARRAY,
        LossShortening: *mut SAFEARRAY,
        LossCreep: *mut SAFEARRAY,
        LossShrinkage: *mut SAFEARRAY,
        LossSteelRelax: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLossesFixed(
        Name: BSTR,
        NumberItems: *mut i32,
        TendonName: *mut SAFEARRAY,
        StressingFixed: *mut SAFEARRAY,
        LongTermFixed: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetLossesPercent(
        Name: BSTR,
        NumberItems: *mut i32,
        TendonName: *mut SAFEARRAY,
        StressingPercent: *mut SAFEARRAY,
        LongTermPercent: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetNumberStrands(
        Name: BSTR,
        NumberItems: *mut i32,
        TendonName: *mut SAFEARRAY,
        NumberStrands: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDatumOffset(
        Name: BSTR,
        NumberItems: *mut i32,
        TendonName: *mut SAFEARRAY,
        DatumOffset: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetDrawingPoint(
        Name: BSTR,
        NumberItems: *mut i32,
        TendonName: *mut SAFEARRAY,
        DrawingPointID: *mut SAFEARRAY,
        GX: *mut SAFEARRAY,
        GY: *mut SAFEARRAY,
        GZ: *mut SAFEARRAY,
        ItemType: eItemType,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xf1600512, 0xd795, 0x4a2f, 0x98, 0xc3, 0x2d, 0x16, 0x15, 0x54, 0x21, 0x53)]
interface cOptions(cOptionsVtbl): IDispatch(IDispatchVtbl) {
    fn GetDefaultFunctionFolder(
        Path: *mut BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn SetDefaultFunctionFolder(
        Path: BSTR,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0x73239643, 0x902c, 0x4ac2, 0xad, 0xdb, 0x6c, 0xc9, 0x19, 0x99, 0x7e, 0xb0)]
interface cSelect(cSelectVtbl): IDispatch(IDispatchVtbl) {
    fn All(
        Deselect: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn ClearSelection(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn GetSelected(
        NumberItems: *mut i32,
        ObjectType: *mut SAFEARRAY,
        ObjectName: *mut SAFEARRAY,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn Group(
        Name: BSTR,
        Deselect: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn InvertSelection(
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn PreviousSelection(
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

RIDL!{#[uuid(0xabcc81d2, 0x5f58, 0x422d, 0x92, 0xdf, 0x6a, 0x8c, 0x58, 0x7b, 0x96, 0x06)]
interface cNamedDisplay(cNamedDisplayVtbl): IDispatch(IDispatchVtbl) {
}}

RIDL!{#[uuid(0xbf177229, 0x2909, 0x4894, 0x93, 0x7d, 0x64, 0x91, 0x20, 0x8e, 0x02, 0x7c)]
interface cView(cViewVtbl): IDispatch(IDispatchVtbl) {
    fn RefreshView(
        Window: i32,
        Zoom: VARIANT_BOOL,
        pRetVal: *mut i32,
    ) -> HRESULT,
    fn RefreshWindow(
        Window: i32,
        pRetVal: *mut i32,
    ) -> HRESULT,
}}

ENUM!{enum eBridgeObjectBentPart {
    eBridgeObjectBentPart_CapBeam = 1,
    eBridgeObjectBentPart_Column = 2,
    eBridgeObjectBentPart_Bearing = 3,
    eBridgeObjectBentPart_Wall = 4,
}}

ENUM!{enum eBridgeObjectFoundationPart {
    eBridgeObjectFoundationPart_Footing = 1,
    eBridgeObjectFoundationPart_PileCap = 2,
    eBridgeObjectFoundationPart_Pile = 3,
    eBridgeObjectFoundationPart_FoundationSpring = 4,
}}

ENUM!{enum eBridgeResponseDesignRating {
    eBridgeResponseDesignRating_S11_Longitudinal_Top_Left = 0,
    eBridgeResponseDesignRating_S11_Longitudinal_Top_Center = 1,
    eBridgeResponseDesignRating_S11_Longitudinal_Top_Right = 2,
    eBridgeResponseDesignRating_S11_Longitudinal_Top_Envelope = 3,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Left = 4,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Center = 5,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Beam_Center = 6,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Right = 7,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Top_Envelope = 8,
    eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Left = 9,
    eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Center = 10,
    eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Right = 11,
    eBridgeResponseDesignRating_S11_Longitudinal_Beam_Top_Envelope = 12,
    eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left = 13,
    eBridgeResponseDesignRating_S11_Longitudinal_Bot_Left_Corner = 14,
    eBridgeResponseDesignRating_S11_Longitudinal_Bot_Center = 15,
    eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right = 16,
    eBridgeResponseDesignRating_S11_Longitudinal_Bot_Right_Corner = 17,
    eBridgeResponseDesignRating_S11_Longitudinal_Bot_Envelope = 18,
    eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Left = 19,
    eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Right = 20,
    eBridgeResponseDesignRating_S11_Longitudinal_Girder_Bot_Envelope = 21,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Left = 22,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Left = 23,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Center = 24,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Beam_Right = 25,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Center = 26,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Right = 27,
    eBridgeResponseDesignRating_S11_Longitudinal_Slab_Bot_Envelope = 28,
    eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Left = 29,
    eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Center = 39,
    eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Right = 31,
    eBridgeResponseDesignRating_S11_Longitudinal_Beam_Bot_Envelope = 32,
    eBridgeResponseDesignRating_Design_Shear_Demand_Concrete_Shear_Capacity_Ratio = 33,
    eBridgeResponseDesignRating_Design_Shear_Controlling_Shear_DC_Ratio = 34,
    eBridgeResponseDesignRating_Design_Shear_Controlling_Torsion_DC_Ratio = 35,
    eBridgeResponseDesignRating_Design_Shear_Required_Extra_Shear_Rebar_Area_PerL = 36,
    eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area = 37,
    eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_For_Torsion = 38,
    eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Bot_Slab = 39,
    eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Top_Slab = 40,
    eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Slab = 41,
    eBridgeResponseDesignRating_Design_Shear_Required_Extra_Longit_Rebar_Area_Beam = 42,
    eBridgeResponseDesignRating_Design_Shear_Controlling_DC_Ratio = 43,
    eBridgeResponseDesignRating_Design_Shear_Rebar_Area_PerL = 44,
    eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area = 45,
    eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Slab = 46,
    eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Top_Slab = 47,
    eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Bot_Flange = 48,
    eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Slab = 49,
    eBridgeResponseDesignRating_Design_Shear_Longit_Rebar_Area_Beam = 50,
    eBridgeResponseDesignRating_Design_Shear_Longit_Torsional_Rebar_Area_PerL = 51,
    eBridgeResponseDesignRating_Design_Shear_Torsion_Rebar_Area_PerL = 52,
    eBridgeResponseDesignRating_Design_Shear_Torsion_Plus_Shear_Rebar_Area_PerL = 53,
    eBridgeResponseDesignRating_Design_Crack_Top_Crack_Width = 54,
    eBridgeResponseDesignRating_Design_Crack_Bot_Crack_Width = 55,
    eBridgeResponseDesignRating_Design_Crack_Top_Bot_Crack_Widths = 56,
    eBridgeResponseDesignRating_Design_Principal_Stress_Envelope = 57,
    eBridgeResponseDesignRating_Design_Principal_Stress_Web_Top = 58,
    eBridgeResponseDesignRating_Design_Principal_Stress_Web_Bot = 59,
    eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Top = 60,
    eBridgeResponseDesignRating_Design_Principal_Stress_Beam_Web_Bot = 61,
    eBridgeResponseDesignRating_Design_Principal_Stress_Neutral_Axis = 62,
    eBridgeResponseDesignRating_Design_Tendon_Stress_Controlling_DC_Ratio = 63,
    eBridgeResponseDesignRating_Design_Flexure_Moment_About_Horizontal_Axis_M3 = 64,
    eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Positive_Moment = 65,
    eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Negative_Moment = 66,
    eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Shear = 67,
    eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Pos = 68,
    eBridgeResponseDesignRating_Design_Strength_DC_Ratio_Net_Section_Fracture_Neg = 69,
    eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Pos = 70,
    eBridgeResponseDesignRating_Design_Strength_DC_Ratio_FlexureShearInteract_Neg = 71,
    eBridgeResponseDesignRating_Design_Strength_Total_Nominal_Shear_Force_6_10_10_4_2 = 72,
    eBridgeResponseDesignRating_Design_Fatigue_Top_Flange_Tensile_Stress_Range_Without_FLB = 73,
    eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Tensile_Stress_Range_Without_FLB = 74,
    eBridgeResponseDesignRating_Design_Fatigue_Bot_Flange_Lateral_Bending_Stress_Range = 75,
    eBridgeResponseDesignRating_Design_Fatigue_DC_Ratio_Web_Shear = 76,
    eBridgeResponseDesignRating_Rating_Shear = 77,
    eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance = 78,
    eBridgeResponseDesignRating_Rating_Shear_Factored_Shear_Resistance_UVr = 79,
    eBridgeResponseDesignRating_Rating_Shear_Live_load_Capacity_Factor_F = 80,
    eBridgeResponseDesignRating_Rating_Flexure = 81,
    eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance = 82,
    eBridgeResponseDesignRating_Rating_Flexure_Factored_Moment_Resistance_UMr = 83,
    eBridgeResponseDesignRating_Rating_Flexure_Live_load_Capacity_Factor_F = 84,
    eBridgeResponseDesignRating_Rating_Strength_Shear_Rating = 85,
    eBridgeResponseDesignRating_Rating_Strength_Flexure_Rating = 86,
    eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Moment_M3 = 87,
    eBridgeResponseDesignRating_Rating_Strength_Live_load_Capacity_Factor_F_Shear_V2 = 88,
    eBridgeResponseDesignRating_Rating_Service_Flexure_Rating = 89,
    eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Pos = 90,
    eBridgeResponseDesignRating_Rating_MinRebar_Min_Of_Abs_1_2Mcr_And_Abs_1_33Mu_For_Neg = 91,
    eBridgeResponseDesignRating_Rating_MinRebar_Flexure_Rating = 92,
    eBridgeResponseDesignRating_Rating_Service = 93,
}}

ENUM!{enum eBridgeResponseDisplDOF {
    eBridgeResponseDisplDOF_Vertical_Displacement = 0,
    eBridgeResponseDisplDOF_Transverse_Displacement = 1,
    eBridgeResponseDisplDOF_Longitudinal_Displacement = 2,
    eBridgeResponseDisplDOF_Longitudinal_Rotation = 3,
    eBridgeResponseDisplDOF_Avg_Longitudinal_Rotation = 4,
}}

ENUM!{enum eBridgeResponseDisplLoc {
    eBridgeResponseDisplLoc_Web_Top = 0,
    eBridgeResponseDisplLoc_Web_Bottom = 1,
    eBridgeResponseDisplLoc_Web = 2,
    eBridgeResponseDisplLoc_Left_Web_Top = 3,
    eBridgeResponseDisplLoc_Left_Web_Bottom = 4,
    eBridgeResponseDisplLoc_Left_Web = 5,
    eBridgeResponseDisplLoc_Right_Web_Top = 6,
    eBridgeResponseDisplLoc_Right_Web_Bottom = 7,
    eBridgeResponseDisplLoc_Right_Web = 8,
    eBridgeResponseDisplLoc_Slab_Center = 9,
}}

ENUM!{enum eBridgeResponseForce {
    eBridgeResponseForce_Axial_Force_P = 1,
    eBridgeResponseForce_Shear_Vertical_V2 = 2,
    eBridgeResponseForce_Shear_Horizontal_V3 = 3,
    eBridgeResponseForce_Torsion_T = 4,
    eBridgeResponseForce_Moment_About_Vertical_Axis_M2 = 5,
    eBridgeResponseForce_Moment_About_Horizontal_Axis_M3 = 6,
}}

ENUM!{enum eBridgeResponsePart {
    eBridgeResponsePart_Entire_Bridge_Section = 1,
    eBridgeResponsePart_Girder = 2,
    eBridgeResponsePart_Beam = 3,
    eBridgeResponsePart_Web = 4,
    eBridgeResponsePart_Slab = 5,
    eBridgeResponsePart_All_Girders = 6,
    eBridgeResponsePart_All_Beams = 7,
    eBridgeResponsePart_All_Webs = 8,
    eBridgeResponsePart_All_Slabs = 9,
    eBridgeResponsePart_Entire_Section_Plus_All_Girders = 10,
}}

ENUM!{enum eBridgeResponseStress {
    eBridgeResponseStress_S11_Longitudinal_Top_Left = 0,
    eBridgeResponseStress_S11_Longitudinal_Top_Center = 1,
    eBridgeResponseStress_S11_Longitudinal_Top_Right = 2,
    eBridgeResponseStress_S11_Longitudinal_Top_Beam_Center = 3,
    eBridgeResponseStress_S11_Longitudinal_Top_Envelope = 4,
    eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Left = 5,
    eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Center = 6,
    eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Right = 7,
    eBridgeResponseStress_S11_Longitudinal_Top_ULeft_Envelope = 8,
    eBridgeResponseStress_S11_Longitudinal_Top_URight_Left = 9,
    eBridgeResponseStress_S11_Longitudinal_Top_URight_Center = 10,
    eBridgeResponseStress_S11_Longitudinal_Top_URight_Right = 11,
    eBridgeResponseStress_S11_Longitudinal_Top_URight_Envelope = 12,
    eBridgeResponseStress_S11_Longitudinal_Bot_Left = 13,
    eBridgeResponseStress_S11_Longitudinal_Bot_Center = 14,
    eBridgeResponseStress_S11_Longitudinal_Bot_Right = 15,
    eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Left = 16,
    eBridgeResponseStress_S11_Longitudinal_Bot_Beam_Right = 17,
    eBridgeResponseStress_S11_Longitudinal_Bot_Envelope = 18,
    eBridgeResponseStress_S11_Longitudinal_Top_Bot_Left = 19,
    eBridgeResponseStress_S11_Longitudinal_Top_Bot_Center = 20,
    eBridgeResponseStress_S11_Longitudinal_Top_Bot_Right = 21,
    eBridgeResponseStress_S11_Lateral_Bending_Top = 22,
    eBridgeResponseStress_S11_Lateral_Bending_Top_ULeft = 23,
    eBridgeResponseStress_S11_Lateral_Bending_Top_URight = 24,
    eBridgeResponseStress_S11_Lateral_Bending_Bot = 25,
}}

ENUM!{enum eBridgeSegmentConstructionMethod {
    eBridgeSegmentConstructionMethod_Precast = 0,
    eBridgeSegmentConstructionMethod_CastInPlace = 1,
}}

ENUM!{enum eBridgeSegmentType {
    eBridgeSegmentType_Rigid = 0,
    eBridgeSegmentType_PierTable = 1,
    eBridgeSegmentType_Segment = 2,
    eBridgeSegmentType_Closure = 3,
}}

ENUM!{enum eFrameDesignOrientation {
    eFrameDesignOrientation_Column = 1,
    eFrameDesignOrientation_Beam = 2,
    eFrameDesignOrientation_Brace = 3,
    eFrameDesignOrientation_Null = 4,
    eFrameDesignOrientation_Other = 5,
}}

ENUM!{enum eHingeDistributionType {
    eHingeDistributionType_NonlinearBeamColumn = 1,
    eHingeDistributionType_DistributedPlasticity = 2,
    eHingeDistributionType_EqualSpacing = 3,
    eHingeDistributionType_ContinuousSupport = 4,
    eHingeDistributionType_UserDefined = 5,
}}

ENUM!{enum eHingeLengthOverwriteType {
    eHingeLengthOverwriteType_None = 1,
    eHingeLengthOverwriteType_Absolute = 2,
    eHingeLengthOverwriteType_Relative = 3,
}}

ENUM!{enum eHingeLocationType {
    eHingeLocationType_RelativeDistance = 1,
    eHingeLocationType_OffsetFromIEnd = 2,
    eHingeLocationType_OffsetFromJEnd = 3,
}}

ENUM!{enum eMatCoupledType {
    eMatCoupledType_None = 1,
    eMatCoupledType_VonMisesPlasticity = 2,
    eMatCoupledType_ModifiedDarwinPecknoldConcrete = 3,
}}

ENUM!{enum eNamedSetType {
    eNamedSetType_All = 0,
    eNamedSetType_UpdateBridgeObject = 1,
    eNamedSetType_RunAnalysis = 2,
    eNamedSetType_RunBridgeDesignSuperstructure = 3,
    eNamedSetType_RunBridgeDesignSubstructure = 4,
    eNamedSetType_RunBridgeDesignSeismic = 5,
    eNamedSetType_RunBridgeRatingSuperstructure = 6,
    eNamedSetType_RunMemberRating = 7,
    eNamedSetType_JointTHResponseSpectra = 8,
    eNamedSetType_NamedDisplay = 9,
    eNamedSetType_PlotFunctionTraces = 10,
    eNamedSetType_PushoverCurve = 11,
    eNamedSetType_VirtualWork = 12,
    eNamedSetType_TableSet = 13,
    eNamedSetType_TableGroupSuperset = 14,
    eNamedSetType_BridgeSeismicReport = 15,
    eNamedSetType_BridgeSuperstructureResponse = 16,
    eNamedSetType_BridgeCalculationReport = 17,
    eNamedSetType_BridgeCalculationReportSub = 18,
}}

ENUM!{enum eReturnCode {
    eReturnCode_NotApplicable = 0xffffff9c,
    eReturnCode_NotImplemented = 0xffffff9d,
    eReturnCode_NoError = 0,
    eReturnCode_UnspecifiedError = 1,
    eReturnCode_Deprecated = 0xffffff9e,
    eReturnCode_TableIsObsolete = 0xffffff9f,
    eReturnCode_TableDoesNotExist = 0xffffffa0,
}}

ENUM!{enum eSuperObjectClass {
    eSuperObjectClass_None = 0,
    eSuperObjectClass_SuperObject = 1,
    eSuperObjectClass_Foundation = 2,
    eSuperObjectClass_BridgeFoundation = 3,
}}

ENUM!{enum eWallSpandrelRebarLayerType {
    eWallSpandrelRebarLayerType_Horizontal_Top_Total = 1,
    eWallSpandrelRebarLayerType_Horizontal_Bottom_Total = 2,
    eWallSpandrelRebarLayerType_Horizontal_Distributed_Eachface = 3,
    eWallSpandrelRebarLayerType_Vertical_Ties_Distributed = 4,
    eWallSpandrelRebarLayerType_Diagonal_Each = 5,
}}

ENUM!{enum eWallPierRebarLayerType {
    eWallPierRebarLayerType_Vertical_Distributed_MiddleZone_Eachface = 1,
    eWallPierRebarLayerType_Horizontal_Distributed_MiddleZone_Eachface = 2,
    eWallPierRebarLayerType_Vertical_Distributed_EndZoneI_Total = 3,
    eWallPierRebarLayerType_Vertical_Distributed_EndZoneJ_Total = 4,
    eWallPierRebarLayerType_Confinement_EndZoneI = 5,
    eWallPierRebarLayerType_Confinement_EndZoneJ = 6,
    eWallPierRebarLayerType_Diagonal_Each = 7,
}}

ENUM!{enum eObjType {
    eObjType_Point = 1,
    eObjType_Frame = 2,
    eObjType_Area = 3,
    eObjType_Solid = 6,
}}

ENUM!{enum eBridgeCodeAASHTO {
    eBridgeCodeAASHTO_AASHTO_STD_2002 = 0,
    eBridgeCodeAASHTO_AASHTO_LRFD_2007 = 1,
    eBridgeCodeAASHTO_AASHTO_LRFD_2012 = 2,
    eBridgeCodeAASHTO_AASHTO_LRFD_2014 = 3,
    eBridgeCodeAASHTO_AASHTO_LRFD_2017 = 4,
    eBridgeCodeAASHTO_AASHTO_LRFD_2020 = 5,
}}

ENUM!{enum eBridgeCodeInterims {
    eBridgeCodeInterims_NoInterims = 0,
    eBridgeCodeInterims_Interim_2011 = 1,
    eBridgeCodeInterims_Interim_2012 = 2,
    eBridgeCodeInterims_Interim_2013 = 3,
    eBridgeCodeInterims_Interim_2014 = 4,
    eBridgeCodeInterims_Interim_2015 = 5,
}}

ENUM!{enum eBridgeObjectType {
    eBridgeObjectType_General = 0,
    eBridgeObjectType_Segmental = 1,
}}

ENUM!{enum eBridgeObjectUserPointType {
    eBridgeObjectUserPointType_General = 0,
    eBridgeObjectUserPointType_SegmentalTendon = 1,
}}

ENUM!{enum eBridgeTendonCategory {
    eBridgeTendonCategory_General = 0,
    eBridgeTendonCategory_Cantilever = 1,
    eBridgeTendonCategory_BottomSpan = 2,
    eBridgeTendonCategory_TopSpan = 3,
    eBridgeTendonCategory_Continuity = 4,
}}

ENUM!{enum eDesignActionType {
    eDesignActionType_NonComposite = 1,
    eDesignActionType_ShortTermComposite = 2,
    eDesignActionType_LongTermComposite = 3,
    eDesignActionType_Staged = 4,
    eDesignActionType_Other = 5,
}}

ENUM!{enum eDiaphragmOption {
    eDiaphragmOption_Disconnect = 1,
    eDiaphragmOption_FromShellObject = 2,
    eDiaphragmOption_DefinedDiaphragm = 3,
}}

ENUM!{enum eShellType {
    eShellType_ShellThin = 1,
    eShellType_ShellThick = 2,
    eShellType_Membrane = 3,
    eShellType_PlateThin_DO_NOT_USE = 4,
    eShellType_PlateThick_DO_NOT_USE = 5,
    eShellType_Layered = 6,
}}

ENUM!{enum eWallPropType {
    eWallPropType_Specified = 1,
    eWallPropType_AutoSelectList = 2,
}}

ENUM!{enum eDeckType {
    eDeckType_Filled = 1,
    eDeckType_Unfilled = 2,
    eDeckType_SolidSlab = 3,
}}

ENUM!{enum eSlabType {
    eSlabType_Slab = 0,
    eSlabType_Drop = 1,
    eSlabType_Stiff_DO_NOT_USE = 2,
    eSlabType_Ribbed = 3,
    eSlabType_Waffle = 4,
    eSlabType_Mat = 5,
    eSlabType_Footing = 6,
}}

ENUM!{enum eTemperature {
    eTemperature_NotApplicable = 0,
    eTemperature_F = 1,
    eTemperature_C = 2,
}}

ENUM!{enum eForce {
    eForce_NotApplicable = 0,
    eForce_lb = 1,
    eForce_kip = 2,
    eForce_N = 3,
    eForce_kN = 4,
    eForce_kgf = 5,
    eForce_tonf = 6,
}}

ENUM!{enum eLength {
    eLength_NotApplicable = 0,
    eLength_inch = 1,
    eLength_ft = 2,
    eLength_micron = 3,
    eLength_mm = 4,
    eLength_cm = 5,
    eLength_m = 6,
}}

ENUM!{enum eAreaDesignOrientation {
    eAreaDesignOrientation_Wall = 1,
    eAreaDesignOrientation_Floor = 2,
    eAreaDesignOrientation_Ramp_DO_NOT_USE = 3,
    eAreaDesignOrientation_Null = 4,
    eAreaDesignOrientation_Other = 5,
}}

ENUM!{enum eMatTypeAluminum {
    eMatTypeAluminum_SubType_6061_T6 = 1,
    eMatTypeAluminum_SubType_6063_T6 = 2,
    eMatTypeAluminum_SubType_5052_H34 = 3,
}}

ENUM!{enum eMatTypeColdFormed {
    eMatTypeColdFormed_ASTM_A653SQGr33 = 1,
    eMatTypeColdFormed_ASTM_A653SQGr50 = 2,
}}

ENUM!{enum e2DFrameType {
    e2DFrameType_PortalFrame = 0,
    e2DFrameType_ConcentricBraced = 1,
    e2DFrameType_EccentricBraced = 2,
}}

ENUM!{enum e3DFrameType {
    e3DFrameType_OpenFrame = 0,
    e3DFrameType_PerimeterFrame = 1,
    e3DFrameType_BeamSlab = 2,
    e3DFrameType_FlatPlate = 3,
}}

ENUM!{enum eConstraintAxis {
    eConstraintAxis_X = 1,
    eConstraintAxis_Y = 2,
    eConstraintAxis_Z = 3,
    eConstraintAxis_AutoAxis = 4,
}}

ENUM!{enum eConstraintType {
    eConstraintType_Body = 1,
    eConstraintType_Diaphragm = 2,
    eConstraintType_Plate = 3,
    eConstraintType_Rod = 4,
    eConstraintType_Beam = 5,
    eConstraintType_Equal = 6,
    eConstraintType_Local = 7,
    eConstraintType_Weld = 8,
    eConstraintType_Line = 13,
}}

ENUM!{enum eCNameType {
    eCNameType_LoadCase = 0,
    eCNameType_LoadCombo = 1,
}}

ENUM!{enum eFramePropType {
    eFramePropType_I = 1,
    eFramePropType_Channel = 2,
    eFramePropType_T = 3,
    eFramePropType_Angle = 4,
    eFramePropType_DblAngle = 5,
    eFramePropType_Box = 6,
    eFramePropType_Pipe = 7,
    eFramePropType_Rectangular = 8,
    eFramePropType_Circle = 9,
    eFramePropType_General = 10,
    eFramePropType_DbChannel = 11,
    eFramePropType_Auto = 12,
    eFramePropType_SD = 13,
    eFramePropType_Variable = 14,
    eFramePropType_Joist = 15,
    eFramePropType_Bridge = 16,
    eFramePropType_Cold_C = 17,
    eFramePropType_Cold_2C = 18,
    eFramePropType_Cold_Z = 19,
    eFramePropType_Cold_L = 20,
    eFramePropType_Cold_2L = 21,
    eFramePropType_Cold_Hat = 22,
    eFramePropType_BuiltupICoverplate = 23,
    eFramePropType_PCCGirderI = 24,
    eFramePropType_PCCGirderU = 25,
    eFramePropType_BuiltupIHybrid = 26,
    eFramePropType_BuiltupUHybrid = 27,
    eFramePropType_Concrete_L = 28,
    eFramePropType_FilledTube = 29,
    eFramePropType_FilledPipe = 30,
    eFramePropType_EncasedRectangle = 31,
    eFramePropType_EncasedCircle = 32,
    eFramePropType_BucklingRestrainedBrace = 33,
    eFramePropType_CoreBrace_BRB = 34,
    eFramePropType_ConcreteTee = 35,
    eFramePropType_ConcreteBox = 36,
    eFramePropType_ConcretePipe = 37,
    eFramePropType_ConcreteCross = 38,
    eFramePropType_SteelPlate = 39,
    eFramePropType_SteelRod = 40,
    eFramePropType_PCCGirderSuperT = 41,
    eFramePropType_Cold_Box = 42,
    eFramePropType_Cold_I = 43,
    eFramePropType_Cold_Pipe = 44,
    eFramePropType_Cold_T = 45,
    eFramePropType_Trapezoidal = 46,
}}

ENUM!{enum eItemType {
    eItemType_Objects = 0,
    eItemType_Group = 1,
    eItemType_SelectedObjects = 2,
}}

ENUM!{enum eItemTypeElm {
    eItemTypeElm_ObjectElm = 0,
    eItemTypeElm_Element = 1,
    eItemTypeElm_GroupElm = 2,
    eItemTypeElm_SelectionElm = 3,
}}

ENUM!{enum eLinkPropType {
    eLinkPropType_Linear = 1,
    eLinkPropType_Damper = 2,
    eLinkPropType_Gap = 3,
    eLinkPropType_Hook = 4,
    eLinkPropType_PlasticWen = 5,
    eLinkPropType_Isolator1 = 6,
    eLinkPropType_Isolator2 = 7,
    eLinkPropType_MultilinearElastic = 8,
    eLinkPropType_MultilinearPlastic = 9,
    eLinkPropType_Isolator3 = 10,
}}

ENUM!{enum eLoadCaseType {
    eLoadCaseType_LinearStatic = 1,
    eLoadCaseType_NonlinearStatic = 2,
    eLoadCaseType_Modal = 3,
    eLoadCaseType_ResponseSpectrum = 4,
    eLoadCaseType_LinearHistory = 5,
    eLoadCaseType_NonlinearHistory = 6,
    eLoadCaseType_LinearDynamic = 7,
    eLoadCaseType_NonlinearDynamic = 8,
    eLoadCaseType_MovingLoad = 9,
    eLoadCaseType_Buckling = 10,
    eLoadCaseType_SteadyState = 11,
    eLoadCaseType_PowerSpectralDensity = 12,
    eLoadCaseType_LinearStaticMultiStep = 13,
    eLoadCaseType_HyperStatic = 14,
}}

ENUM!{enum eLoadPatternType {
    eLoadPatternType_Dead = 1,
    eLoadPatternType_SuperDead = 2,
    eLoadPatternType_Live = 3,
    eLoadPatternType_ReduceLive = 4,
    eLoadPatternType_Quake = 5,
    eLoadPatternType_Wind = 6,
    eLoadPatternType_Snow = 7,
    eLoadPatternType_Other = 8,
    eLoadPatternType_Move = 9,
    eLoadPatternType_Temperature = 10,
    eLoadPatternType_Rooflive = 11,
    eLoadPatternType_Notional = 12,
    eLoadPatternType_PatternLive = 13,
    eLoadPatternType_Wave = 14,
    eLoadPatternType_Braking = 15,
    eLoadPatternType_Centrifugal = 16,
    eLoadPatternType_Friction = 17,
    eLoadPatternType_Ice = 18,
    eLoadPatternType_WindOnLiveLoad = 19,
    eLoadPatternType_HorizontalEarthPressure = 20,
    eLoadPatternType_VerticalEarthPressure = 21,
    eLoadPatternType_EarthSurcharge = 22,
    eLoadPatternType_DownDrag = 23,
    eLoadPatternType_VehicleCollision = 24,
    eLoadPatternType_VesselCollision = 25,
    eLoadPatternType_TemperatureGradient = 26,
    eLoadPatternType_Settlement = 27,
    eLoadPatternType_Shrinkage = 28,
    eLoadPatternType_Creep = 29,
    eLoadPatternType_WaterloadPressure = 30,
    eLoadPatternType_LiveLoadSurcharge = 31,
    eLoadPatternType_LockedInForces = 32,
    eLoadPatternType_PedestrianLL = 33,
    eLoadPatternType_Prestress = 34,
    eLoadPatternType_Hyperstatic = 35,
    eLoadPatternType_Bouyancy = 36,
    eLoadPatternType_StreamFlow = 37,
    eLoadPatternType_Impact = 38,
    eLoadPatternType_Construction = 39,
    eLoadPatternType_DeadWearing = 40,
    eLoadPatternType_DeadWater = 41,
    eLoadPatternType_DeadManufacture = 42,
    eLoadPatternType_EarthHydrostatic = 43,
    eLoadPatternType_PassiveEarthPressure = 44,
    eLoadPatternType_ActiveEarthPressure = 45,
    eLoadPatternType_PedestrianLLReduced = 46,
    eLoadPatternType_SnowHighAltitude = 47,
    eLoadPatternType_EuroLm1Char = 48,
    eLoadPatternType_EuroLm1Freq = 49,
    eLoadPatternType_EuroLm2 = 50,
    eLoadPatternType_EuroLm3 = 51,
    eLoadPatternType_EuroLm4 = 52,
    eLoadPatternType_SeaState = 53,
    eLoadPatternType_Permit = 54,
    eLoadPatternType_MoveFatigue = 55,
    eLoadPatternType_MoveFatiguePermit = 56,
    eLoadPatternType_MoveDeflection = 57,
    eLoadPatternType_MoveTrain = 58,
    eLoadPatternType_PrestressTransfer = 59,
    eLoadPatternType_PatternAuto = 60,
    eLoadPatternType_QuakeDrift = 61,
    eLoadPatternType_QuakeVerticalOnly = 62,
}}

ENUM!{enum eMatType {
    eMatType_Steel = 1,
    eMatType_Concrete = 2,
    eMatType_NoDesign = 3,
    eMatType_Aluminum = 4,
    eMatType_ColdFormed = 5,
    eMatType_Rebar = 6,
    eMatType_Tendon = 7,
    eMatType_Masonry = 8,
}}

ENUM!{enum eMatTypeConcrete {
    eMatTypeConcrete_FC3000_NormalWeight = 1,
    eMatTypeConcrete_FC4000_NormalWeight = 2,
    eMatTypeConcrete_FC5000_NormalWeight = 3,
    eMatTypeConcrete_FC6000_NormalWeight = 4,
    eMatTypeConcrete_FC3000_LightWeight = 5,
    eMatTypeConcrete_FC4000_LightWeight = 6,
    eMatTypeConcrete_FC5000_LightWeight = 7,
    eMatTypeConcrete_FC6000_LightWeight = 8,
    eMatTypeConcrete_Chinese_C20_NormalWeight = 9,
    eMatTypeConcrete_Chinese_C30_NormalWeight = 10,
    eMatTypeConcrete_Chinese_C40_NormalWeight = 11,
    eMatTypeConcrete_Indian_M15_NormalWeight = 12,
    eMatTypeConcrete_Indian_M20_NormalWeight = 13,
    eMatTypeConcrete_Indian_M25_NormalWeight = 14,
    eMatTypeConcrete_Indian_M30_NormalWeight = 15,
    eMatTypeConcrete_Indian_M35_NormalWeight = 16,
    eMatTypeConcrete_Indian_M40_NormalWeight = 17,
    eMatTypeConcrete_Indian_M45_NormalWeight = 18,
    eMatTypeConcrete_Indian_M50_NormalWeight = 19,
    eMatTypeConcrete_Indian_M55_NormalWeight = 20,
    eMatTypeConcrete_Indian_M60_NormalWeight = 21,
    eMatTypeConcrete_EN_C12_NormalWeight = 22,
    eMatTypeConcrete_EN_C16_NormalWeight = 23,
    eMatTypeConcrete_EN_C20_NormalWeight = 24,
    eMatTypeConcrete_EN_C25_NormalWeight = 25,
    eMatTypeConcrete_EN_C30_NormalWeight = 26,
    eMatTypeConcrete_EN_C35_NormalWeight = 27,
    eMatTypeConcrete_EN_C40_NormalWeight = 28,
    eMatTypeConcrete_EN_C45_NormalWeight = 29,
    eMatTypeConcrete_EN_C50_NormalWeight = 30,
    eMatTypeConcrete_EN_C55_NormalWeight = 31,
    eMatTypeConcrete_EN_C60_NormalWeight = 32,
    eMatTypeConcrete_EN_C70_NormalWeight = 33,
    eMatTypeConcrete_EN_C80_NormalWeight = 34,
    eMatTypeConcrete_EN_C90_NormalWeight = 35,
}}

ENUM!{enum eMatTypeRebar {
    eMatTypeRebar_ASTM_A615Gr40 = 1,
    eMatTypeRebar_ASTM_A615Gr60 = 2,
    eMatTypeRebar_ASTM_A615Gr75 = 3,
    eMatTypeRebar_ASTM_A706 = 4,
    eMatTypeRebar_Chinese_HPB235 = 5,
    eMatTypeRebar_Chinese_HRB335 = 6,
    eMatTypeRebar_Chinese_HRB400 = 7,
    eMatTypeRebar_Indian_Mild250 = 8,
    eMatTypeRebar_Indian_HYSD415 = 9,
    eMatTypeRebar_Indian_HYSD500 = 10,
    eMatTypeRebar_Indian_HYSD550 = 11,
}}

ENUM!{enum eMatTypeSteel {
    eMatTypeSteel_ASTM_A36 = 1,
    eMatTypeSteel_ASTM_A53GrB = 2,
    eMatTypeSteel_ASTM_A500GrB_Fy42 = 3,
    eMatTypeSteel_ASTM_A500GrB_Fy46 = 4,
    eMatTypeSteel_ASTM_A572Gr50 = 5,
    eMatTypeSteel_ASTM_A913Gr50 = 6,
    eMatTypeSteel_ASTM_A992_Fy50 = 7,
    eMatTypeSteel_Chinese_Q235 = 8,
    eMatTypeSteel_Chinese_Q345 = 9,
    eMatTypeSteel_Indian_Fe250 = 10,
    eMatTypeSteel_Indian_Fe345 = 11,
    eMatTypeSteel_EN100252_S235 = 12,
    eMatTypeSteel_EN100252_S275 = 13,
    eMatTypeSteel_EN100252_S355 = 14,
    eMatTypeSteel_EN100252_S450 = 15,
    eMatTypeSteel_Chinese_Q355 = 16,
}}

ENUM!{enum eMatTypeTendon {
    eMatTypeTendon_ASTM_A416Gr250 = 1,
    eMatTypeTendon_ASTM_A416Gr270 = 2,
}}

ENUM!{enum eTemplateType {
    eTemplateType_Grid = 0,
    eTemplateType_Clear = 1,
    eTemplateType_Beam = 2,
    eTemplateType_SlopedTruss = 3,
    eTemplateType_VerticalTruss = 4,
    eTemplateType_SpaceTruss = 5,
    eTemplateType_PortalFrame = 6,
    eTemplateType_BracedFrame = 7,
    eTemplateType_EccentricFrame = 8,
    eTemplateType_PerimeterFrame = 9,
    eTemplateType_SpaceFrame = 10,
    eTemplateType_Bridge = 11,
    eTemplateType_Barrel = 12,
    eTemplateType_Cylinder = 13,
    eTemplateType_Dome = 14,
    eTemplateType_ShearWall = 15,
    eTemplateType_Floor = 16,
    eTemplateType_Advanced = 17,
    eTemplateType_UndergoundConcrete = 18,
    eTemplateType_Truss2D = 19,
    eTemplateType_Truss3D = 20,
    eTemplateType_Frame2D = 21,
    eTemplateType_Frame3D = 22,
    eTemplateType_BridgeWizard = 23,
    eTemplateType_PipesAndPlates = 24,
    eTemplateType_Shells = 25,
    eTemplateType_SolidModels = 26,
    eTemplateType_StorageStructures = 27,
    eTemplateType_Staircases = 28,
    eTemplateType_CableBridges = 29,
}}

ENUM!{enum eUnits {
    eUnits_lb_in_F = 1,
    eUnits_lb_ft_F = 2,
    eUnits_kip_in_F = 3,
    eUnits_kip_ft_F = 4,
    eUnits_kN_mm_C = 5,
    eUnits_kN_m_C = 6,
    eUnits_kgf_mm_C = 7,
    eUnits_kgf_m_C = 8,
    eUnits_N_mm_C = 9,
    eUnits_N_m_C = 10,
    eUnits_Ton_mm_C = 11,
    eUnits_Ton_m_C = 12,
    eUnits_kN_cm_C = 13,
    eUnits_kgf_cm_C = 14,
    eUnits_N_cm_C = 15,
    eUnits_Ton_cm_C = 16,
}}

// Implements _StartService
// Implements _Object
RIDL!{#[uuid(0x11a3bbc3, 0xf4b4, 0x3c43, 0x9c, 0x93, 0x90, 0xca, 0x30, 0x06, 0xf8, 0x0b)]
class StartService; }

RIDL!{#[uuid(0xc9d2950b, 0x7584, 0x3924, 0xb9, 0xc5, 0xc4, 0x54, 0xed, 0xb9, 0x56, 0x13)]
interface _StartService(_StartServiceVtbl): IDispatch(IDispatchVtbl) {
}}

